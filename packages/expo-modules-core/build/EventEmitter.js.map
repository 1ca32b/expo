{"version":3,"file":"EventEmitter.js","sourceRoot":"","sources":["../src/EventEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,+BAA+B,EAAE,MAAM,uBAAuB,CAAC;AAGxE,+BAA+B,EAAE,CAAC;AAElC;;;GAGG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC;AAUzD;;;;;;GAMG;AACH,eAAe,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC","sourcesContent":["import { ensureNativeModulesAreInstalled } from './requireNativeModule';\nimport type { EventSubscription } from './ts-declarations/EventEmitter';\n\nensureNativeModulesAreInstalled();\n\n/**\n * @deprecated Deprecated as of SDK 51 in favor of the default import.\n * @hidden\n */\nexport const EventEmitter = globalThis.expo.EventEmitter;\n\n/**\n * @deprecated Use `EventSubscription` instead.\n * @hidden\n */\nexport type Subscription = EventSubscription;\n\nexport { EventSubscription };\n\n/**\n * A class that provides a consistent API for emitting and listening to events.\n * It shares many concepts with other emitter APIs, such as Node's EventEmitter and `fbemitter`.\n * When the event is emitted, all of the functions attached to that specific event are called *synchronously*.\n * Any values returned by the called listeners are *ignored* and discarded.\n * Its implementation is written in C++ and common for all the platforms.\n */\nexport default globalThis.expo.EventEmitter;\n"]}