{"version":3,"file":"AssetHooks.js","sourceRoot":"","sources":["../src/AssetHooks.ts"],"names":[],"mappings":"AAAA,+CAA+C;AAI/C,cAAc;AACd;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,UAAU,SAAS,CAAC,SAA4B;IACpD,mDAAmD;IACnD,+CAA+C;IAE/C,oBAAoB;IACpB,gEAAgE;IAChE,UAAU;IAEV,0BAA0B;IAC1B,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAChC,CAAC","sourcesContent":["// import { useEffect, useState } from 'react';\n\nimport { Asset } from './Asset';\n\n// @needsAudit\n/**\n * Downloads and stores one or more assets locally.\n * After the assets are loaded, this hook returns a list of asset instances.\n * If something went wrong when loading the assets, an error is returned.\n *\n * > Note, the assets are not \"reloaded\" when you dynamically change the asset list.\n *\n * @return Returns an array containing:\n * - on the first position, a list of all loaded assets. If they aren't loaded yet, this value is\n *   `undefined`.\n * - on the second position, an error which encountered when loading the assets. If there was no\n *   error, this value is `undefined`.\n *\n * @example\n * ```tsx\n * const [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);\n *\n * return assets ? <Image source={assets[0]} /> : null;\n * ```\n */\nexport function useAssets(moduleIds: number | number[]): [Asset[] | undefined, Error | undefined] {\n  // const [assets, setAssets] = useState<Asset[]>();\n  // const [error, setError] = useState<Error>();\n\n  // useEffect(() => {\n  //   Asset.loadAsync(moduleIds).then(setAssets).catch(setError);\n  // }, []);\n\n  // return [assets, error];\n  return [undefined, undefined];\n}\n"]}