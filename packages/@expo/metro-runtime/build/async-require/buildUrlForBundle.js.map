{"version":3,"file":"buildUrlForBundle.js","sourceRoot":"","sources":["../../src/async-require/buildUrlForBundle.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;AAEH;;;;;;;GAOG;AACH,SAAS,gBAAgB,CAAC,QAAgB;IACxC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QACjC,OAAO,SAAS,CAAC,QAAQ,CAAC,CAAC;KAC5B;IACD,MAAM,MAAM,GAAG,CAAC,QAAgB,EAAU,EAAE,CAC1C,QAAQ,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC9F,IAAI,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;QAClC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtD,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACpC,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;KACvB;SAAM;QACL,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC9C,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KAClE;AACH,CAAC;AAED;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,UAAkB;IAClD,IAAI,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;QACpC,OAAO,gBAAgB,CAAC,UAAU,CAAC,CAAC;KACrC;IACD,iFAAiF;IACjF,kFAAkF;IAClF,OAAO,gBAAgB,CAAC,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;AAChE,CAAC;AAPD,8CAOC","sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/** Given a path encodes the pathname part to be a safe URI.\n *\n * @remarks\n * On file services, especially S3, special characters in the pathname\n * part must be encoded to be recognized properly.\n * We list a regular expression with the specifically problematic\n * characters manually to be encoded here.\n */\nfunction encodeBundlePath(filename: string): string {\n  if (typeof window === 'undefined') {\n    return encodeURI(filename);\n  }\n  const encode = (pathname: string): string =>\n    pathname.replace(/[+!\"#$&'()*+,:;=?@]/g, (match) => `%${match.charCodeAt(0).toString(16)}`);\n  if (filename.match(/^https?:\\/\\//)) {\n    const url = new URL(filename, window.location.origin);\n    url.pathname = encode(url.pathname);\n    return url.toString();\n  } else {\n    const [pathname, query] = filename.split('?');\n    return query ? `${encode(pathname)}?${query}` : encode(pathname);\n  }\n}\n\n/**\n * Given a path and some optional additional query parameters, create the dev server bundle URL.\n * @param bundlePath like `/foobar`\n * @param params like `{ platform: \"web\" }`\n * @returns a URL like \"/foobar.bundle?platform=android&modulesOnly=true&runModule=false&runtimeBytecodeVersion=null\"\n */\nexport function buildUrlForBundle(bundlePath: string): string {\n  if (bundlePath.match(/^https?:\\/\\//)) {\n    return encodeBundlePath(bundlePath);\n  }\n  // NOTE(EvanBacon): This must come from the window origin (at least in dev mode).\n  // Otherwise Metro will crash from attempting to load a bundle that doesn't exist.\n  return encodeBundlePath('/' + bundlePath.replace(/^\\/+/, ''));\n}\n"]}