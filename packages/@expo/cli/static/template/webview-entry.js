// Generated by Expo CLI
import '@expo/metro-runtime';

// Add web error box
import { renderRootComponent } from 'expo-router/build/renderRootComponent';
import { _getActionsObject, addEventListener } from 'expo/webview';
import React from 'react';

const actions = _getActionsObject();

function ActionsWrapper(props) {
  const AppModule = React.useMemo(() => {
    return React.lazy(async () => {
      const AppModule = await import('[$$GENERATED_ENTRY]');

      if (!AppModule) {
        throw new Error('No exports from module: [$$GENERATED_ENTRY]');
      }

      if (!AppModule.default) {
        return {
          default: () =>
            React.createElement(
              'div',
              undefined,
              'Missing default export in module: [$$GENERATED_ENTRY]'
            ),
        };
      }

      return AppModule;
    });
  }, []);

  // Props listeners
  const [marshalledProps, setProps] = React.useState(() => {
    if (typeof globalThis.$$EXPO_INITIAL_PROPS === 'undefined') {
      return {};
    }
    return JSON.parse(globalThis.$$EXPO_INITIAL_PROPS);
  });

  React.useEffect(() => {
    const remove = addEventListener((msg) => {
      if (msg.type === '$$props') {
        setProps(msg.data);
      }
    });
    return () => {
      remove();
    };
  }, [setProps]);

  const proxyActions = React.useMemo(() => {
    if (!marshalledProps.names) return {};
    // Create a named map { [name: string]: ProxyFunction }
    return Object.fromEntries(
      marshalledProps.names.map((key) => {
        return [key, actions[key]];
      })
    );
  }, [marshalledProps.names]);

  console.log('ACTIONS:', marshalledProps, proxyActions);
  return (
    <React.Suspense fallback={null}>
      <AppModule {...props} {...(marshalledProps.props || {})} {...proxyActions} />
    </React.Suspense>
  );
}

renderRootComponent(ActionsWrapper);
