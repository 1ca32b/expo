{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":304,"column":0,"index":8450}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":304,"column":0,"index":8450}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":304,"column":0,"index":8450}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./VirtualizeUtils","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":14,"column":0,"index":377},"end":{"line":14,"column":70,"index":447}}],"key":"Wl6GyPbjTp2tYGf7EdH/3upwFzg="}},{"name":"invariant","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":15,"column":0,"index":448},"end":{"line":15,"column":34,"index":482}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _VirtualizeUtils = _$$_REQUIRE(_dependencyMap[3], \"./VirtualizeUtils\");\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  // TODO: `inverted` can be incorporated here if it is moved to an order\n  // based implementation instead of transform.\n  /**\n   * Subset of VirtualizedList props needed to calculate cell metrics\n   */\n  /**\n   * Provides an interface to query information about the metrics of a list and its cells.\n   */\n  var ListMetricsAggregator = exports.default = /*#__PURE__*/function () {\n    function ListMetricsAggregator() {\n      (0, _classCallCheck2.default)(this, ListMetricsAggregator);\n      this._averageCellLength = 0;\n      this._cellMetrics = new Map();\n      this._highestMeasuredCellIndex = 0;\n      this._measuredCellsLength = 0;\n      this._measuredCellsCount = 0;\n      this._orientation = {\n        horizontal: false,\n        rtl: false\n      };\n    }\n    return (0, _createClass2.default)(ListMetricsAggregator, [{\n      key: \"notifyCellLayout\",\n      value:\n      /**\n       * Notify the ListMetricsAggregator that a cell has been laid out.\n       *\n       * @returns whether the cell layout has changed since last notification\n       */\n      function notifyCellLayout(_ref) {\n        var cellIndex = _ref.cellIndex,\n          cellKey = _ref.cellKey,\n          orientation = _ref.orientation,\n          layout = _ref.layout;\n        this._invalidateIfOrientationChanged(orientation);\n        var next = {\n          index: cellIndex,\n          length: this._selectLength(layout),\n          isMounted: true,\n          offset: this.flowRelativeOffset(layout)\n        };\n        var curr = this._cellMetrics.get(cellKey);\n        if (!curr || next.offset !== curr.offset || next.length !== curr.length) {\n          if (curr) {\n            var dLength = next.length - curr.length;\n            this._measuredCellsLength += dLength;\n          } else {\n            this._measuredCellsLength += next.length;\n            this._measuredCellsCount += 1;\n          }\n          this._averageCellLength = this._measuredCellsLength / this._measuredCellsCount;\n          this._cellMetrics.set(cellKey, next);\n          this._highestMeasuredCellIndex = Math.max(this._highestMeasuredCellIndex, cellIndex);\n          return true;\n        } else {\n          curr.isMounted = true;\n          return false;\n        }\n      }\n\n      /**\n       * Notify ListMetricsAggregator that a cell has been unmounted.\n       */\n    }, {\n      key: \"notifyCellUnmounted\",\n      value: function notifyCellUnmounted(cellKey) {\n        var curr = this._cellMetrics.get(cellKey);\n        if (curr) {\n          curr.isMounted = false;\n        }\n      }\n\n      /**\n       * Notify ListMetricsAggregator that the lists content container has been laid out.\n       */\n    }, {\n      key: \"notifyListContentLayout\",\n      value: function notifyListContentLayout(_ref2) {\n        var orientation = _ref2.orientation,\n          layout = _ref2.layout;\n        this._invalidateIfOrientationChanged(orientation);\n        this._contentLength = this._selectLength(layout);\n      }\n\n      /**\n       * Return the average length of the cells which have been measured\n       */\n    }, {\n      key: \"getAverageCellLength\",\n      value: function getAverageCellLength() {\n        return this._averageCellLength;\n      }\n\n      /**\n       * Return the highest measured cell index (or 0 if nothing has been measured\n       * yet)\n       */\n    }, {\n      key: \"getHighestMeasuredCellIndex\",\n      value: function getHighestMeasuredCellIndex() {\n        return this._highestMeasuredCellIndex;\n      }\n\n      /**\n       * Returns the exact metrics of a cell if it has already been laid out,\n       * otherwise an estimate based on the average length of previously measured\n       * cells\n       */\n    }, {\n      key: \"getCellMetricsApprox\",\n      value: function getCellMetricsApprox(index, props) {\n        var frame = this.getCellMetrics(index, props);\n        if (frame && frame.index === index) {\n          // check for invalid frames due to row re-ordering\n          return frame;\n        } else {\n          var data = props.data,\n            getItemCount = props.getItemCount;\n          (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get frame for out of range index ' + index);\n          return {\n            length: this._averageCellLength,\n            offset: this._averageCellLength * index,\n            index,\n            isMounted: false\n          };\n        }\n      }\n\n      /**\n       * Returns the exact metrics of a cell if it has already been laid out\n       */\n    }, {\n      key: \"getCellMetrics\",\n      value: function getCellMetrics(index, props) {\n        var data = props.data,\n          getItem = props.getItem,\n          getItemCount = props.getItemCount,\n          getItemLayout = props.getItemLayout;\n        (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get metrics for out of range cell index ' + index);\n        var keyExtractor = props.keyExtractor ?? _VirtualizeUtils.keyExtractor;\n        var frame = this._cellMetrics.get(keyExtractor(getItem(data, index), index));\n        if (frame && frame.index === index) {\n          return frame;\n        }\n        if (getItemLayout) {\n          var _getItemLayout = getItemLayout(data, index),\n            length = _getItemLayout.length,\n            offset = _getItemLayout.offset;\n          // TODO: `isMounted` is used for both \"is exact layout\" and \"has been\n          // unmounted\". Should be refactored.\n          return {\n            index,\n            length,\n            offset,\n            isMounted: true\n          };\n        }\n        return null;\n      }\n\n      /**\n       * Gets an approximate offset to an item at a given index. Supports\n       * fractional indices.\n       */\n    }, {\n      key: \"getCellOffsetApprox\",\n      value: function getCellOffsetApprox(index, props) {\n        if (Number.isInteger(index)) {\n          return this.getCellMetricsApprox(index, props).offset;\n        } else {\n          var frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);\n          var remainder = index - Math.floor(index);\n          return frameMetrics.offset + remainder * frameMetrics.length;\n        }\n      }\n\n      /**\n       * Returns the length of all ScrollView content along the scrolling axis.\n       */\n    }, {\n      key: \"getContentLength\",\n      value: function getContentLength() {\n        return this._contentLength ?? 0;\n      }\n\n      /**\n       * Whether a content length has been observed\n       */\n    }, {\n      key: \"hasContentLength\",\n      value: function hasContentLength() {\n        return this._contentLength != null;\n      }\n\n      /**\n       * Finds the flow-relative offset (e.g. starting from the left in LTR, but\n       * right in RTL) from a layout box.\n       */\n    }, {\n      key: \"flowRelativeOffset\",\n      value: function flowRelativeOffset(layout, referenceContentLength) {\n        var _this$_orientation = this._orientation,\n          horizontal = _this$_orientation.horizontal,\n          rtl = _this$_orientation.rtl;\n        if (horizontal && rtl) {\n          var contentLength = referenceContentLength ?? this._contentLength;\n          (0, _invariant.default)(contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');\n          return contentLength - (this._selectOffset(layout) + this._selectLength(layout));\n        } else {\n          return this._selectOffset(layout);\n        }\n      }\n\n      /**\n       * Converts a flow-relative offset to a cartesian offset\n       */\n    }, {\n      key: \"cartesianOffset\",\n      value: function cartesianOffset(flowRelativeOffset) {\n        var _this$_orientation2 = this._orientation,\n          horizontal = _this$_orientation2.horizontal,\n          rtl = _this$_orientation2.rtl;\n        if (horizontal && rtl) {\n          (0, _invariant.default)(this._contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');\n          return this._contentLength - flowRelativeOffset;\n        } else {\n          return flowRelativeOffset;\n        }\n      }\n    }, {\n      key: \"_invalidateIfOrientationChanged\",\n      value: function _invalidateIfOrientationChanged(orientation) {\n        if (orientation.rtl !== this._orientation.rtl) {\n          this._cellMetrics.clear();\n        }\n        if (orientation.horizontal !== this._orientation.horizontal) {\n          this._averageCellLength = 0;\n          this._highestMeasuredCellIndex = 0;\n          this._measuredCellsLength = 0;\n          this._measuredCellsCount = 0;\n        }\n        this._orientation = orientation;\n      }\n    }, {\n      key: \"_selectLength\",\n      value: function _selectLength(_ref3) {\n        var width = _ref3.width,\n          height = _ref3.height;\n        return this._orientation.horizontal ? width : height;\n      }\n    }, {\n      key: \"_selectOffset\",\n      value: function _selectOffset(_ref4) {\n        var x = _ref4.x,\n          y = _ref4.y;\n        return this._orientation.horizontal ? x : y;\n      }\n    }]);\n  }();\n});","lineCount":279,"map":[[9,2,14,0],[9,6,14,0,"_VirtualizeUtils"],[9,22,14,0],[9,25,14,0,"_$$_REQUIRE"],[9,36,14,0],[9,37,14,0,"_dependencyMap"],[9,51,14,0],[10,2,15,0],[10,6,15,0,"_invariant"],[10,16,15,0],[10,19,15,0,"_interopRequireDefault"],[10,41,15,0],[10,42,15,0,"_$$_REQUIRE"],[10,53,15,0],[10,54,15,0,"_dependencyMap"],[10,68,15,0],[11,2,1,0],[12,0,2,0],[13,0,3,0],[14,0,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[18,0,8,0],[19,0,9,0],[20,2,37,0],[21,2,38,0],[22,2,44,0],[23,0,45,0],[24,0,46,0],[25,2,56,0],[26,0,57,0],[27,0,58,0],[28,2,56,0],[28,6,59,21,"ListMetricsAggregator"],[28,27,59,42],[28,30,59,42,"exports"],[28,37,59,42],[28,38,59,42,"default"],[28,45,59,42],[29,4,59,42],[29,13,59,42,"ListMetricsAggregator"],[29,35,59,42],[30,6,59,42],[30,10,59,42,"_classCallCheck2"],[30,26,59,42],[30,27,59,42,"default"],[30,34,59,42],[30,42,59,42,"ListMetricsAggregator"],[30,63,59,42],[31,6,59,42],[31,11,60,2,"_averageCellLength"],[31,29,60,20],[31,32,60,23],[31,33,60,24],[32,6,60,24],[32,11,61,2,"_cellMetrics"],[32,23,61,14],[32,26,61,43],[32,30,61,47,"Map"],[32,33,61,50],[32,34,61,51],[32,35,61,52],[33,6,61,52],[33,11,63,2,"_highestMeasuredCellIndex"],[33,36,63,27],[33,39,63,30],[33,40,63,31],[34,6,63,31],[34,11,64,2,"_measuredCellsLength"],[34,31,64,22],[34,34,64,25],[34,35,64,26],[35,6,64,26],[35,11,65,2,"_measuredCellsCount"],[35,30,65,21],[35,33,65,24],[35,34,65,25],[36,6,65,25],[36,11,66,2,"_orientation"],[36,23,66,14],[36,26,66,34],[37,8,67,4,"horizontal"],[37,18,67,14],[37,20,67,16],[37,25,67,21],[38,8,68,4,"rtl"],[38,11,68,7],[38,13,68,9],[39,6,69,2],[39,7,69,3],[40,4,69,3],[41,4,69,3],[41,15,69,3,"_createClass2"],[41,28,69,3],[41,29,69,3,"default"],[41,36,69,3],[41,38,69,3,"ListMetricsAggregator"],[41,59,69,3],[42,6,69,3,"key"],[42,9,69,3],[43,6,69,3,"value"],[43,11,69,3],[44,6,71,2],[45,0,72,0],[46,0,73,0],[47,0,74,0],[48,0,75,0],[49,6,76,2],[49,15,76,2,"notifyCellLayout"],[49,31,76,18,"notifyCellLayout"],[49,32,76,18,"_ref"],[49,36,76,18],[49,38,86,14],[50,8,86,14],[50,12,77,4,"cellIndex"],[50,21,77,13],[50,24,77,13,"_ref"],[50,28,77,13],[50,29,77,4,"cellIndex"],[50,38,77,13],[51,10,78,4,"cellKey"],[51,17,78,11],[51,20,78,11,"_ref"],[51,24,78,11],[51,25,78,4,"cellKey"],[51,32,78,11],[52,10,79,4,"orientation"],[52,21,79,15],[52,24,79,15,"_ref"],[52,28,79,15],[52,29,79,4,"orientation"],[52,40,79,15],[53,10,80,4,"layout"],[53,16,80,10],[53,19,80,10,"_ref"],[53,23,80,10],[53,24,80,4,"layout"],[53,30,80,10],[54,8,87,4],[54,12,87,8],[54,13,87,9,"_invalidateIfOrientationChanged"],[54,44,87,40],[54,45,87,41,"orientation"],[54,56,87,52],[54,57,87,53],[55,8,89,4],[55,12,89,10,"next"],[55,16,89,27],[55,19,89,30],[56,10,90,6,"index"],[56,15,90,11],[56,17,90,13,"cellIndex"],[56,26,90,22],[57,10,91,6,"length"],[57,16,91,12],[57,18,91,14],[57,22,91,18],[57,23,91,19,"_selectLength"],[57,36,91,32],[57,37,91,33,"layout"],[57,43,91,39],[57,44,91,40],[58,10,92,6,"isMounted"],[58,19,92,15],[58,21,92,17],[58,25,92,21],[59,10,93,6,"offset"],[59,16,93,12],[59,18,93,14],[59,22,93,18],[59,23,93,19,"flowRelativeOffset"],[59,41,93,37],[59,42,93,38,"layout"],[59,48,93,44],[60,8,94,4],[60,9,94,5],[61,8,95,4],[61,12,95,10,"curr"],[61,16,95,14],[61,19,95,17],[61,23,95,21],[61,24,95,22,"_cellMetrics"],[61,36,95,34],[61,37,95,35,"get"],[61,40,95,38],[61,41,95,39,"cellKey"],[61,48,95,46],[61,49,95,47],[62,8,97,4],[62,12,97,8],[62,13,97,9,"curr"],[62,17,97,13],[62,21,97,17,"next"],[62,25,97,21],[62,26,97,22,"offset"],[62,32,97,28],[62,37,97,33,"curr"],[62,41,97,37],[62,42,97,38,"offset"],[62,48,97,44],[62,52,97,48,"next"],[62,56,97,52],[62,57,97,53,"length"],[62,63,97,59],[62,68,97,64,"curr"],[62,72,97,68],[62,73,97,69,"length"],[62,79,97,75],[62,81,97,77],[63,10,98,6],[63,14,98,10,"curr"],[63,18,98,14],[63,20,98,16],[64,12,99,8],[64,16,99,14,"dLength"],[64,23,99,21],[64,26,99,24,"next"],[64,30,99,28],[64,31,99,29,"length"],[64,37,99,35],[64,40,99,38,"curr"],[64,44,99,42],[64,45,99,43,"length"],[64,51,99,49],[65,12,100,8],[65,16,100,12],[65,17,100,13,"_measuredCellsLength"],[65,37,100,33],[65,41,100,37,"dLength"],[65,48,100,44],[66,10,101,6],[66,11,101,7],[66,17,101,13],[67,12,102,8],[67,16,102,12],[67,17,102,13,"_measuredCellsLength"],[67,37,102,33],[67,41,102,37,"next"],[67,45,102,41],[67,46,102,42,"length"],[67,52,102,48],[68,12,103,8],[68,16,103,12],[68,17,103,13,"_measuredCellsCount"],[68,36,103,32],[68,40,103,36],[68,41,103,37],[69,10,104,6],[70,10,106,6],[70,14,106,10],[70,15,106,11,"_averageCellLength"],[70,33,106,29],[70,36,107,8],[70,40,107,12],[70,41,107,13,"_measuredCellsLength"],[70,61,107,33],[70,64,107,36],[70,68,107,40],[70,69,107,41,"_measuredCellsCount"],[70,88,107,60],[71,10,108,6],[71,14,108,10],[71,15,108,11,"_cellMetrics"],[71,27,108,23],[71,28,108,24,"set"],[71,31,108,27],[71,32,108,28,"cellKey"],[71,39,108,35],[71,41,108,37,"next"],[71,45,108,41],[71,46,108,42],[72,10,109,6],[72,14,109,10],[72,15,109,11,"_highestMeasuredCellIndex"],[72,40,109,36],[72,43,109,39,"Math"],[72,47,109,43],[72,48,109,44,"max"],[72,51,109,47],[72,52,110,8],[72,56,110,12],[72,57,110,13,"_highestMeasuredCellIndex"],[72,82,110,38],[72,84,111,8,"cellIndex"],[72,93,112,6],[72,94,112,7],[73,10,113,6],[73,17,113,13],[73,21,113,17],[74,8,114,4],[74,9,114,5],[74,15,114,11],[75,10,115,6,"curr"],[75,14,115,10],[75,15,115,11,"isMounted"],[75,24,115,20],[75,27,115,23],[75,31,115,27],[76,10,116,6],[76,17,116,13],[76,22,116,18],[77,8,117,4],[78,6,118,2],[80,6,120,2],[81,0,121,0],[82,0,122,0],[83,4,120,2],[84,6,120,2,"key"],[84,9,120,2],[85,6,120,2,"value"],[85,11,120,2],[85,13,123,2],[85,22,123,2,"notifyCellUnmounted"],[85,41,123,21,"notifyCellUnmounted"],[85,42,123,22,"cellKey"],[85,49,123,37],[85,51,123,45],[86,8,124,4],[86,12,124,10,"curr"],[86,16,124,14],[86,19,124,17],[86,23,124,21],[86,24,124,22,"_cellMetrics"],[86,36,124,34],[86,37,124,35,"get"],[86,40,124,38],[86,41,124,39,"cellKey"],[86,48,124,46],[86,49,124,47],[87,8,125,4],[87,12,125,8,"curr"],[87,16,125,12],[87,18,125,14],[88,10,126,6,"curr"],[88,14,126,10],[88,15,126,11,"isMounted"],[88,24,126,20],[88,27,126,23],[88,32,126,28],[89,8,127,4],[90,6,128,2],[92,6,130,2],[93,0,131,0],[94,0,132,0],[95,4,130,2],[96,6,130,2,"key"],[96,9,130,2],[97,6,130,2,"value"],[97,11,130,2],[97,13,133,2],[97,22,133,2,"notifyListContentLayout"],[97,45,133,25,"notifyListContentLayout"],[97,46,133,25,"_ref2"],[97,51,133,25],[97,53,139,11],[98,8,139,11],[98,12,134,4,"orientation"],[98,23,134,15],[98,26,134,15,"_ref2"],[98,31,134,15],[98,32,134,4,"orientation"],[98,43,134,15],[99,10,135,4,"layout"],[99,16,135,10],[99,19,135,10,"_ref2"],[99,24,135,10],[99,25,135,4,"layout"],[99,31,135,10],[100,8,140,4],[100,12,140,8],[100,13,140,9,"_invalidateIfOrientationChanged"],[100,44,140,40],[100,45,140,41,"orientation"],[100,56,140,52],[100,57,140,53],[101,8,141,4],[101,12,141,8],[101,13,141,9,"_contentLength"],[101,27,141,23],[101,30,141,26],[101,34,141,30],[101,35,141,31,"_selectLength"],[101,48,141,44],[101,49,141,45,"layout"],[101,55,141,51],[101,56,141,52],[102,6,142,2],[104,6,144,2],[105,0,145,0],[106,0,146,0],[107,4,144,2],[108,6,144,2,"key"],[108,9,144,2],[109,6,144,2,"value"],[109,11,144,2],[109,13,147,2],[109,22,147,2,"getAverageCellLength"],[109,42,147,22,"getAverageCellLength"],[109,43,147,22],[109,45,147,33],[110,8,148,4],[110,15,148,11],[110,19,148,15],[110,20,148,16,"_averageCellLength"],[110,38,148,34],[111,6,149,2],[113,6,151,2],[114,0,152,0],[115,0,153,0],[116,0,154,0],[117,4,151,2],[118,6,151,2,"key"],[118,9,151,2],[119,6,151,2,"value"],[119,11,151,2],[119,13,155,2],[119,22,155,2,"getHighestMeasuredCellIndex"],[119,49,155,29,"getHighestMeasuredCellIndex"],[119,50,155,29],[119,52,155,40],[120,8,156,4],[120,15,156,11],[120,19,156,15],[120,20,156,16,"_highestMeasuredCellIndex"],[120,45,156,41],[121,6,157,2],[123,6,159,2],[124,0,160,0],[125,0,161,0],[126,0,162,0],[127,0,163,0],[128,4,159,2],[129,6,159,2,"key"],[129,9,159,2],[130,6,159,2,"value"],[130,11,159,2],[130,13,164,2],[130,22,164,2,"getCellMetricsApprox"],[130,42,164,22,"getCellMetricsApprox"],[130,43,164,23,"index"],[130,48,164,36],[130,50,164,38,"props"],[130,55,164,60],[130,57,164,75],[131,8,165,4],[131,12,165,10,"frame"],[131,17,165,15],[131,20,165,18],[131,24,165,22],[131,25,165,23,"getCellMetrics"],[131,39,165,37],[131,40,165,38,"index"],[131,45,165,43],[131,47,165,45,"props"],[131,52,165,50],[131,53,165,51],[132,8,166,4],[132,12,166,8,"frame"],[132,17,166,13],[132,21,166,17,"frame"],[132,26,166,22],[132,27,166,23,"index"],[132,32,166,28],[132,37,166,33,"index"],[132,42,166,38],[132,44,166,40],[133,10,167,6],[134,10,168,6],[134,17,168,13,"frame"],[134,22,168,18],[135,8,169,4],[135,9,169,5],[135,15,169,11],[136,10,170,6],[136,14,170,13,"data"],[136,18,170,17],[136,21,170,35,"props"],[136,26,170,40],[136,27,170,13,"data"],[136,31,170,17],[137,12,170,19,"getItemCount"],[137,24,170,31],[137,27,170,35,"props"],[137,32,170,40],[137,33,170,19,"getItemCount"],[137,45,170,31],[138,10,171,6],[138,14,171,6,"invariant"],[138,32,171,15],[138,34,172,8,"index"],[138,39,172,13],[138,43,172,17],[138,44,172,18],[138,48,172,22,"index"],[138,53,172,27],[138,56,172,30,"getItemCount"],[138,68,172,42],[138,69,172,43,"data"],[138,73,172,47],[138,74,172,48],[138,76,173,8],[138,120,173,52],[138,123,173,55,"index"],[138,128,174,6],[138,129,174,7],[139,10,175,6],[139,17,175,13],[140,12,176,8,"length"],[140,18,176,14],[140,20,176,16],[140,24,176,20],[140,25,176,21,"_averageCellLength"],[140,43,176,39],[141,12,177,8,"offset"],[141,18,177,14],[141,20,177,16],[141,24,177,20],[141,25,177,21,"_averageCellLength"],[141,43,177,39],[141,46,177,42,"index"],[141,51,177,47],[142,12,178,8,"index"],[142,17,178,13],[143,12,179,8,"isMounted"],[143,21,179,17],[143,23,179,19],[144,10,180,6],[144,11,180,7],[145,8,181,4],[146,6,182,2],[148,6,184,2],[149,0,185,0],[150,0,186,0],[151,4,184,2],[152,6,184,2,"key"],[152,9,184,2],[153,6,184,2,"value"],[153,11,184,2],[153,13,187,2],[153,22,187,2,"getCellMetrics"],[153,36,187,16,"getCellMetrics"],[153,37,187,17,"index"],[153,42,187,30],[153,44,187,32,"props"],[153,49,187,54],[153,51,187,70],[154,8,188,4],[154,12,188,11,"data"],[154,16,188,15],[154,19,188,57,"props"],[154,24,188,62],[154,25,188,11,"data"],[154,29,188,15],[155,10,188,17,"getItem"],[155,17,188,24],[155,20,188,57,"props"],[155,25,188,62],[155,26,188,17,"getItem"],[155,33,188,24],[156,10,188,26,"getItemCount"],[156,22,188,38],[156,25,188,57,"props"],[156,30,188,62],[156,31,188,26,"getItemCount"],[156,43,188,38],[157,10,188,40,"getItemLayout"],[157,23,188,53],[157,26,188,57,"props"],[157,31,188,62],[157,32,188,40,"getItemLayout"],[157,45,188,53],[158,8,189,4],[158,12,189,4,"invariant"],[158,30,189,13],[158,32,190,6,"index"],[158,37,190,11],[158,41,190,15],[158,42,190,16],[158,46,190,20,"index"],[158,51,190,25],[158,54,190,28,"getItemCount"],[158,66,190,40],[158,67,190,41,"data"],[158,71,190,45],[158,72,190,46],[158,74,191,6],[158,125,191,57],[158,128,191,60,"index"],[158,133,192,4],[158,134,192,5],[159,8,193,4],[159,12,193,10,"keyExtractor"],[159,24,193,22],[159,27,193,25,"props"],[159,32,193,30],[159,33,193,31,"keyExtractor"],[159,45,193,43],[159,49,193,47,"defaultKeyExtractor"],[159,78,193,66],[160,8,194,4],[160,12,194,10,"frame"],[160,17,194,15],[160,20,194,18],[160,24,194,22],[160,25,194,23,"_cellMetrics"],[160,37,194,35],[160,38,194,36,"get"],[160,41,194,39],[160,42,195,6,"keyExtractor"],[160,54,195,18],[160,55,195,19,"getItem"],[160,62,195,26],[160,63,195,27,"data"],[160,67,195,31],[160,69,195,33,"index"],[160,74,195,38],[160,75,195,39],[160,77,195,41,"index"],[160,82,195,46],[160,83,196,4],[160,84,196,5],[161,8,197,4],[161,12,197,8,"frame"],[161,17,197,13],[161,21,197,17,"frame"],[161,26,197,22],[161,27,197,23,"index"],[161,32,197,28],[161,37,197,33,"index"],[161,42,197,38],[161,44,197,40],[162,10,198,6],[162,17,198,13,"frame"],[162,22,198,18],[163,8,199,4],[164,8,201,4],[164,12,201,8,"getItemLayout"],[164,25,201,21],[164,27,201,23],[165,10,202,6],[165,14,202,6,"_getItemLayout"],[165,28,202,6],[165,31,202,31,"getItemLayout"],[165,44,202,44],[165,45,202,45,"data"],[165,49,202,49],[165,51,202,51,"index"],[165,56,202,56],[165,57,202,57],[166,12,202,13,"length"],[166,18,202,19],[166,21,202,19,"_getItemLayout"],[166,35,202,19],[166,36,202,13,"length"],[166,42,202,19],[167,12,202,21,"offset"],[167,18,202,27],[167,21,202,27,"_getItemLayout"],[167,35,202,27],[167,36,202,21,"offset"],[167,42,202,27],[168,10,203,6],[169,10,204,6],[170,10,205,6],[170,17,205,13],[171,12,205,14,"index"],[171,17,205,19],[172,12,205,21,"length"],[172,18,205,27],[173,12,205,29,"offset"],[173,18,205,35],[174,12,205,37,"isMounted"],[174,21,205,46],[174,23,205,48],[175,10,205,52],[175,11,205,53],[176,8,206,4],[177,8,208,4],[177,15,208,11],[177,19,208,15],[178,6,209,2],[180,6,211,2],[181,0,212,0],[182,0,213,0],[183,0,214,0],[184,4,211,2],[185,6,211,2,"key"],[185,9,211,2],[186,6,211,2,"value"],[186,11,211,2],[186,13,215,2],[186,22,215,2,"getCellOffsetApprox"],[186,41,215,21,"getCellOffsetApprox"],[186,42,215,22,"index"],[186,47,215,35],[186,49,215,37,"props"],[186,54,215,59],[186,56,215,69],[187,8,216,4],[187,12,216,8,"Number"],[187,18,216,14],[187,19,216,15,"isInteger"],[187,28,216,24],[187,29,216,25,"index"],[187,34,216,30],[187,35,216,31],[187,37,216,33],[188,10,217,6],[188,17,217,13],[188,21,217,17],[188,22,217,18,"getCellMetricsApprox"],[188,42,217,38],[188,43,217,39,"index"],[188,48,217,44],[188,50,217,46,"props"],[188,55,217,51],[188,56,217,52],[188,57,217,53,"offset"],[188,63,217,59],[189,8,218,4],[189,9,218,5],[189,15,218,11],[190,10,219,6],[190,14,219,12,"frameMetrics"],[190,26,219,24],[190,29,219,27],[190,33,219,31],[190,34,219,32,"getCellMetricsApprox"],[190,54,219,52],[190,55,219,53,"Math"],[190,59,219,57],[190,60,219,58,"floor"],[190,65,219,63],[190,66,219,64,"index"],[190,71,219,69],[190,72,219,70],[190,74,219,72,"props"],[190,79,219,77],[190,80,219,78],[191,10,220,6],[191,14,220,12,"remainder"],[191,23,220,21],[191,26,220,24,"index"],[191,31,220,29],[191,34,220,32,"Math"],[191,38,220,36],[191,39,220,37,"floor"],[191,44,220,42],[191,45,220,43,"index"],[191,50,220,48],[191,51,220,49],[192,10,221,6],[192,17,221,13,"frameMetrics"],[192,29,221,25],[192,30,221,26,"offset"],[192,36,221,32],[192,39,221,35,"remainder"],[192,48,221,44],[192,51,221,47,"frameMetrics"],[192,63,221,59],[192,64,221,60,"length"],[192,70,221,66],[193,8,222,4],[194,6,223,2],[196,6,225,2],[197,0,226,0],[198,0,227,0],[199,4,225,2],[200,6,225,2,"key"],[200,9,225,2],[201,6,225,2,"value"],[201,11,225,2],[201,13,228,2],[201,22,228,2,"getContentLength"],[201,38,228,18,"getContentLength"],[201,39,228,18],[201,41,228,29],[202,8,229,4],[202,15,229,11],[202,19,229,15],[202,20,229,16,"_contentLength"],[202,34,229,30],[202,38,229,34],[202,39,229,35],[203,6,230,2],[205,6,232,2],[206,0,233,0],[207,0,234,0],[208,4,232,2],[209,6,232,2,"key"],[209,9,232,2],[210,6,232,2,"value"],[210,11,232,2],[210,13,235,2],[210,22,235,2,"hasContentLength"],[210,38,235,18,"hasContentLength"],[210,39,235,18],[210,41,235,30],[211,8,236,4],[211,15,236,11],[211,19,236,15],[211,20,236,16,"_contentLength"],[211,34,236,30],[211,38,236,34],[211,42,236,38],[212,6,237,2],[214,6,239,2],[215,0,240,0],[216,0,241,0],[217,0,242,0],[218,4,239,2],[219,6,239,2,"key"],[219,9,239,2],[220,6,239,2,"value"],[220,11,239,2],[220,13,243,2],[220,22,243,2,"flowRelativeOffset"],[220,40,243,20,"flowRelativeOffset"],[220,41,243,21,"layout"],[220,47,243,35],[220,49,243,37,"referenceContentLength"],[220,71,243,69],[220,73,243,79],[221,8,244,4],[221,12,244,4,"_this$_orientation"],[221,30,244,4],[221,33,244,30],[221,37,244,34],[221,38,244,35,"_orientation"],[221,50,244,47],[222,10,244,11,"horizontal"],[222,20,244,21],[222,23,244,21,"_this$_orientation"],[222,41,244,21],[222,42,244,11,"horizontal"],[222,52,244,21],[223,10,244,23,"rtl"],[223,13,244,26],[223,16,244,26,"_this$_orientation"],[223,34,244,26],[223,35,244,23,"rtl"],[223,38,244,26],[224,8,246,4],[224,12,246,8,"horizontal"],[224,22,246,18],[224,26,246,22,"rtl"],[224,29,246,25],[224,31,246,27],[225,10,247,6],[225,14,247,12,"contentLength"],[225,27,247,25],[225,30,247,28,"referenceContentLength"],[225,52,247,50],[225,56,247,54],[225,60,247,58],[225,61,247,59,"_contentLength"],[225,75,247,73],[226,10,248,6],[226,14,248,6,"invariant"],[226,32,248,15],[226,34,249,8,"contentLength"],[226,47,249,21],[226,51,249,25],[226,55,249,29],[226,57,250,8],[226,145,251,6],[226,146,251,7],[227,10,252,6],[227,17,253,8,"contentLength"],[227,30,253,21],[227,34,254,9],[227,38,254,13],[227,39,254,14,"_selectOffset"],[227,52,254,27],[227,53,254,28,"layout"],[227,59,254,34],[227,60,254,35],[227,63,254,38],[227,67,254,42],[227,68,254,43,"_selectLength"],[227,81,254,56],[227,82,254,57,"layout"],[227,88,254,63],[227,89,254,64],[227,90,254,65],[228,8,256,4],[228,9,256,5],[228,15,256,11],[229,10,257,6],[229,17,257,13],[229,21,257,17],[229,22,257,18,"_selectOffset"],[229,35,257,31],[229,36,257,32,"layout"],[229,42,257,38],[229,43,257,39],[230,8,258,4],[231,6,259,2],[233,6,261,2],[234,0,262,0],[235,0,263,0],[236,4,261,2],[237,6,261,2,"key"],[237,9,261,2],[238,6,261,2,"value"],[238,11,261,2],[238,13,264,2],[238,22,264,2,"cartesianOffset"],[238,37,264,17,"cartesianOffset"],[238,38,264,18,"flowRelativeOffset"],[238,56,264,44],[238,58,264,54],[239,8,265,4],[239,12,265,4,"_this$_orientation2"],[239,31,265,4],[239,34,265,30],[239,38,265,34],[239,39,265,35,"_orientation"],[239,51,265,47],[240,10,265,11,"horizontal"],[240,20,265,21],[240,23,265,21,"_this$_orientation2"],[240,42,265,21],[240,43,265,11,"horizontal"],[240,53,265,21],[241,10,265,23,"rtl"],[241,13,265,26],[241,16,265,26,"_this$_orientation2"],[241,35,265,26],[241,36,265,23,"rtl"],[241,39,265,26],[242,8,267,4],[242,12,267,8,"horizontal"],[242,22,267,18],[242,26,267,22,"rtl"],[242,29,267,25],[242,31,267,27],[243,10,268,6],[243,14,268,6,"invariant"],[243,32,268,15],[243,34,269,8],[243,38,269,12],[243,39,269,13,"_contentLength"],[243,53,269,27],[243,57,269,31],[243,61,269,35],[243,63,270,8],[243,151,271,6],[243,152,271,7],[244,10,272,6],[244,17,272,13],[244,21,272,17],[244,22,272,18,"_contentLength"],[244,36,272,32],[244,39,272,35,"flowRelativeOffset"],[244,57,272,53],[245,8,273,4],[245,9,273,5],[245,15,273,11],[246,10,274,6],[246,17,274,13,"flowRelativeOffset"],[246,35,274,31],[247,8,275,4],[248,6,276,2],[249,4,276,3],[250,6,276,3,"key"],[250,9,276,3],[251,6,276,3,"value"],[251,11,276,3],[251,13,278,2],[251,22,278,2,"_invalidateIfOrientationChanged"],[251,53,278,33,"_invalidateIfOrientationChanged"],[251,54,278,34,"orientation"],[251,65,278,62],[251,67,278,70],[252,8,279,4],[252,12,279,8,"orientation"],[252,23,279,19],[252,24,279,20,"rtl"],[252,27,279,23],[252,32,279,28],[252,36,279,32],[252,37,279,33,"_orientation"],[252,49,279,45],[252,50,279,46,"rtl"],[252,53,279,49],[252,55,279,51],[253,10,280,6],[253,14,280,10],[253,15,280,11,"_cellMetrics"],[253,27,280,23],[253,28,280,24,"clear"],[253,33,280,29],[253,34,280,30],[253,35,280,31],[254,8,281,4],[255,8,283,4],[255,12,283,8,"orientation"],[255,23,283,19],[255,24,283,20,"horizontal"],[255,34,283,30],[255,39,283,35],[255,43,283,39],[255,44,283,40,"_orientation"],[255,56,283,52],[255,57,283,53,"horizontal"],[255,67,283,63],[255,69,283,65],[256,10,284,6],[256,14,284,10],[256,15,284,11,"_averageCellLength"],[256,33,284,29],[256,36,284,32],[256,37,284,33],[257,10,285,6],[257,14,285,10],[257,15,285,11,"_highestMeasuredCellIndex"],[257,40,285,36],[257,43,285,39],[257,44,285,40],[258,10,286,6],[258,14,286,10],[258,15,286,11,"_measuredCellsLength"],[258,35,286,31],[258,38,286,34],[258,39,286,35],[259,10,287,6],[259,14,287,10],[259,15,287,11,"_measuredCellsCount"],[259,34,287,30],[259,37,287,33],[259,38,287,34],[260,8,288,4],[261,8,290,4],[261,12,290,8],[261,13,290,9,"_orientation"],[261,25,290,21],[261,28,290,24,"orientation"],[261,39,290,35],[262,6,291,2],[263,4,291,3],[264,6,291,3,"key"],[264,9,291,3],[265,6,291,3,"value"],[265,11,291,3],[265,13,293,2],[265,22,293,2,"_selectLength"],[265,35,293,15,"_selectLength"],[265,36,293,15,"_ref3"],[265,41,293,15],[265,43,296,62],[266,8,296,62],[266,12,294,4,"width"],[266,17,294,9],[266,20,294,9,"_ref3"],[266,25,294,9],[266,26,294,4,"width"],[266,31,294,9],[267,10,295,4,"height"],[267,16,295,10],[267,19,295,10,"_ref3"],[267,24,295,10],[267,25,295,4,"height"],[267,31,295,10],[268,8,297,4],[268,15,297,11],[268,19,297,15],[268,20,297,16,"_orientation"],[268,32,297,28],[268,33,297,29,"horizontal"],[268,43,297,39],[268,46,297,42,"width"],[268,51,297,47],[268,54,297,50,"height"],[268,60,297,56],[269,6,298,2],[270,4,298,3],[271,6,298,3,"key"],[271,9,298,3],[272,6,298,3,"value"],[272,11,298,3],[272,13,300,2],[272,22,300,2,"_selectOffset"],[272,35,300,15,"_selectOffset"],[272,36,300,15,"_ref4"],[272,41,300,15],[272,43,300,72],[273,8,300,72],[273,12,300,17,"x"],[273,13,300,18],[273,16,300,18,"_ref4"],[273,21,300,18],[273,22,300,17,"x"],[273,23,300,18],[274,10,300,20,"y"],[274,11,300,21],[274,14,300,21,"_ref4"],[274,19,300,21],[274,20,300,20,"y"],[274,21,300,21],[275,8,301,4],[275,15,301,11],[275,19,301,15],[275,20,301,16,"_orientation"],[275,32,301,28],[275,33,301,29,"horizontal"],[275,43,301,39],[275,46,301,42,"x"],[275,47,301,43],[275,50,301,46,"y"],[275,51,301,47],[276,6,302,2],[277,4,302,3],[278,2,302,3],[279,0,302,3],[279,3]],"functionMap":{"names":["<global>","ListMetricsAggregator","notifyCellLayout","notifyCellUnmounted","notifyListContentLayout","getAverageCellLength","getHighestMeasuredCellIndex","getCellMetricsApprox","getCellMetrics","getCellOffsetApprox","getContentLength","hasContentLength","flowRelativeOffset","cartesianOffset","_invalidateIfOrientationChanged","_selectLength","_selectOffset"],"mappings":"AAA;eC0D;ECiB;GD0C;EEK;GFK;EGK;GHS;EIK;GJE;EKM;GLE;EMO;GNkB;EOK;GPsB;EQM;GRQ;ESK;GTE;EUK;GVE;EWM;GXgB;EYK;GZY;EaE;Gba;EcE;GdK;EeE;GfE;CDC"}},"type":"js/module"}]}