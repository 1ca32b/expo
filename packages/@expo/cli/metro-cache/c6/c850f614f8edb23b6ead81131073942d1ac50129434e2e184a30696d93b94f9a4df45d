{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":623,"column":0,"index":17369}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"escape-string-regexp","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":101},"end":{"line":6,"column":42,"index":143}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}},{"name":"query-string","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":0,"index":144},"end":{"line":7,"column":44,"index":188}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./findFocusedRoute","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":0,"index":190},"end":{"line":9,"column":50,"index":240}}],"key":"9+VFhBOjQcTQeIvNi1xuiiMPBRA="}},{"name":"./validatePathConfig","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":11,"column":0,"index":287},"end":{"line":11,"column":54,"index":341}}],"key":"cg7LCOlFjZ3IP0CYIpbP6C+VR6g="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getStateFromPath;\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[2], \"query-string\"));\n  var _findFocusedRoute = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./findFocusedRoute\"));\n  var _validatePathConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./validatePathConfig\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    if (options) {\n      (0, _validatePathConfig.default)(options);\n    }\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    var screens = options?.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n\n    // Create a normalized configs array which will be easier to use\n    var configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n      var aParts = a.pattern.split('/');\n      var bParts = b.pattern.split('/');\n      for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [config.pattern]: config\n      });\n    }, {});\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(config => config.path === '' && config.routeNames.every(\n      // Make sure that none of the parent configs have a non-empty path defined\n      name => !configs.find(c => c.screen === name)?.path));\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(c => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      }))),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          var matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Path parameter so increment position for the segment\n            acc.pos += 1;\n            var decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match[(acc.pos + 1) * 2]\n            // Remove trailing slash\n            .replace(/\\/$/, ''));\n            Object.assign(acc.matchedParams, {\n              [p]: Object.assign(acc.matchedParams[p] || {}, {\n                [index]: decodedParamSegment\n              })\n            });\n            return acc;\n          }, {\n            pos: -1,\n            matchedParams: {}\n          });\n          var matchedParams = matchResult.matchedParams || {};\n          routes = config.routeNames.map(name => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === name && config.pattern.startsWith(c.pattern);\n            });\n\n            // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n            var normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n\n            // Get the number of segments in the initial pattern\n            var numInitialSegments = routeConfig?.pattern\n            // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n            .replace(new RegExp(`${(0, _escapeStringRegexp.default)(normalizedPath)}$`), '')?.split('/').length;\n            var params = normalizedPath?.split('/').reduce((acc, p, index) => {\n              if (!p.startsWith(':')) {\n                return acc;\n              }\n\n              // Get the real index of the path parameter in the matched path\n              // by offsetting by the number of segments in the initial pattern\n              var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n              var value = matchedParams[p]?.[index + offset];\n              if (value) {\n                var key = p.replace(/^:/, '').replace(/\\?$/, '');\n                acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n              }\n              return acc;\n            }, {});\n            if (params && Object.keys(params).length) {\n              return {\n                name,\n                params\n              };\n            }\n            return {\n              name\n            };\n          });\n          remainingPath = remainingPath.replace(match[1], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = function (screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n\n    // @ts-expect-error: we can't strongly typecheck this for now\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], _pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = (screen, routeNames, pattern, path, parse) => {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n      if (it.startsWith(':')) {\n        return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n      }\n      return `${it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)}\\\\/`;\n    }).join('')})`) : undefined;\n    return {\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      parse\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    var state;\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRoute.default)(state);\n    route.path = path;\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":438,"map":[[7,2,6,0],[7,6,6,0,"_escapeStringRegexp"],[7,25,6,0],[7,28,6,0,"_interopRequireDefault"],[7,50,6,0],[7,51,6,0,"_$$_REQUIRE"],[7,62,6,0],[7,63,6,0,"_dependencyMap"],[7,77,6,0],[8,2,7,0],[8,6,7,0,"queryString"],[8,17,7,0],[8,20,7,0,"_interopRequireWildcard"],[8,43,7,0],[8,44,7,0,"_$$_REQUIRE"],[8,55,7,0],[8,56,7,0,"_dependencyMap"],[8,70,7,0],[9,2,9,0],[9,6,9,0,"_findFocusedRoute"],[9,23,9,0],[9,26,9,0,"_interopRequireDefault"],[9,48,9,0],[9,49,9,0,"_$$_REQUIRE"],[9,60,9,0],[9,61,9,0,"_dependencyMap"],[9,75,9,0],[10,2,11,0],[10,6,11,0,"_validatePathConfig"],[10,25,11,0],[10,28,11,0,"_interopRequireDefault"],[10,50,11,0],[10,51,11,0,"_$$_REQUIRE"],[10,62,11,0],[10,63,11,0,"_dependencyMap"],[10,77,11,0],[11,2,11,54],[11,11,11,54,"_getRequireWildcardCache"],[11,36,11,54,"e"],[11,37,11,54],[11,66,11,54,"WeakMap"],[11,73,11,54],[11,92,11,54,"r"],[11,93,11,54],[11,100,11,54,"WeakMap"],[11,107,11,54],[11,111,11,54,"t"],[11,112,11,54],[11,119,11,54,"WeakMap"],[11,126,11,54],[11,138,11,54,"_getRequireWildcardCache"],[11,162,11,54],[11,174,11,54,"_getRequireWildcardCache"],[11,175,11,54,"e"],[11,176,11,54],[11,187,11,54,"e"],[11,188,11,54],[11,191,11,54,"t"],[11,192,11,54],[11,195,11,54,"r"],[11,196,11,54],[11,201,11,54,"e"],[11,202,11,54],[12,2,11,54],[12,11,11,54,"_interopRequireWildcard"],[12,35,11,54,"e"],[12,36,11,54],[12,38,11,54,"r"],[12,39,11,54],[12,48,11,54,"r"],[12,49,11,54],[12,53,11,54,"e"],[12,54,11,54],[12,58,11,54,"e"],[12,59,11,54],[12,60,11,54,"__esModule"],[12,70,11,54],[12,79,11,54,"e"],[12,80,11,54],[12,95,11,54,"e"],[12,96,11,54],[12,119,11,54,"e"],[12,120,11,54],[12,145,11,54,"e"],[12,146,11,54],[12,157,11,54,"default"],[12,164,11,54],[12,166,11,54,"e"],[12,167,11,54],[12,175,11,54,"t"],[12,176,11,54],[12,179,11,54,"_getRequireWildcardCache"],[12,203,11,54],[12,204,11,54,"r"],[12,205,11,54],[12,212,11,54,"t"],[12,213,11,54],[12,217,11,54,"t"],[12,218,11,54],[12,219,11,54,"has"],[12,222,11,54],[12,223,11,54,"e"],[12,224,11,54],[12,234,11,54,"t"],[12,235,11,54],[12,236,11,54,"get"],[12,239,11,54],[12,240,11,54,"e"],[12,241,11,54],[12,248,11,54,"n"],[12,249,11,54],[12,254,11,54,"__proto__"],[12,263,11,54],[12,273,11,54,"a"],[12,274,11,54],[12,277,11,54,"Object"],[12,283,11,54],[12,284,11,54,"defineProperty"],[12,298,11,54],[12,302,11,54,"Object"],[12,308,11,54],[12,309,11,54,"getOwnPropertyDescriptor"],[12,333,11,54],[12,344,11,54,"u"],[12,345,11,54],[12,349,11,54,"e"],[12,350,11,54],[12,370,11,54,"u"],[12,371,11,54],[12,375,11,54,"Object"],[12,381,11,54],[12,382,11,54,"prototype"],[12,391,11,54],[12,392,11,54,"hasOwnProperty"],[12,406,11,54],[12,407,11,54,"call"],[12,411,11,54],[12,412,11,54,"e"],[12,413,11,54],[12,415,11,54,"u"],[12,416,11,54],[12,425,11,54,"i"],[12,426,11,54],[12,429,11,54,"a"],[12,430,11,54],[12,433,11,54,"Object"],[12,439,11,54],[12,440,11,54,"getOwnPropertyDescriptor"],[12,464,11,54],[12,465,11,54,"e"],[12,466,11,54],[12,468,11,54,"u"],[12,469,11,54],[12,479,11,54,"i"],[12,480,11,54],[12,485,11,54,"i"],[12,486,11,54],[12,487,11,54,"get"],[12,490,11,54],[12,494,11,54,"i"],[12,495,11,54],[12,496,11,54,"set"],[12,499,11,54],[12,503,11,54,"Object"],[12,509,11,54],[12,510,11,54,"defineProperty"],[12,524,11,54],[12,525,11,54,"n"],[12,526,11,54],[12,528,11,54,"u"],[12,529,11,54],[12,531,11,54,"i"],[12,532,11,54],[12,536,11,54,"n"],[12,537,11,54],[12,538,11,54,"u"],[12,539,11,54],[12,543,11,54,"e"],[12,544,11,54],[12,545,11,54,"u"],[12,546,11,54],[12,558,11,54,"n"],[12,559,11,54],[12,560,11,54,"default"],[12,567,11,54],[12,570,11,54,"e"],[12,571,11,54],[12,573,11,54,"t"],[12,574,11,54],[12,578,11,54,"t"],[12,579,11,54],[12,580,11,54,"set"],[12,583,11,54],[12,584,11,54,"e"],[12,585,11,54],[12,587,11,54,"n"],[12,588,11,54],[12,591,11,54,"n"],[12,592,11,54],[13,2,44,0],[14,0,45,0],[15,0,46,0],[16,0,47,0],[17,0,48,0],[18,0,49,0],[19,0,50,0],[20,0,51,0],[21,0,52,0],[22,0,53,0],[23,0,54,0],[24,0,55,0],[25,0,56,0],[26,0,57,0],[27,0,58,0],[28,0,59,0],[29,0,60,0],[30,0,61,0],[31,0,62,0],[32,0,63,0],[33,0,64,0],[34,2,65,15],[34,11,65,24,"getStateFromPath"],[34,27,65,40,"getStateFromPath"],[34,28,66,2,"path"],[34,32,66,14],[34,34,67,2,"options"],[34,41,67,30],[34,43,68,27],[35,4,69,2],[35,8,69,6,"options"],[35,15,69,13],[35,17,69,15],[36,6,70,4],[36,10,70,4,"validatePathConfig"],[36,37,70,22],[36,39,70,23,"options"],[36,46,70,30],[36,47,70,31],[37,4,71,2],[38,4,73,2],[38,8,73,6,"initialRoutes"],[38,21,73,41],[38,24,73,44],[38,26,73,46],[39,4,75,2],[39,8,75,6,"options"],[39,15,75,13],[39,17,75,15,"initialRouteName"],[39,33,75,31],[39,35,75,33],[40,6,76,4,"initialRoutes"],[40,19,76,17],[40,20,76,18,"push"],[40,24,76,22],[40,25,76,23],[41,8,77,6,"initialRouteName"],[41,24,77,22],[41,26,77,24,"options"],[41,33,77,31],[41,34,77,32,"initialRouteName"],[41,50,77,48],[42,8,78,6,"parentScreens"],[42,21,78,19],[42,23,78,21],[43,6,79,4],[43,7,79,5],[43,8,79,6],[44,4,80,2],[45,4,82,2],[45,8,82,8,"screens"],[45,15,82,15],[45,18,82,18,"options"],[45,25,82,25],[45,27,82,27,"screens"],[45,34,82,34],[46,4,84,2],[46,8,84,6,"remaining"],[46,17,84,15],[46,20,84,18,"path"],[46,24,84,22],[46,25,85,5,"replace"],[46,32,85,12],[46,33,85,13],[46,39,85,19],[46,41,85,21],[46,44,85,24],[46,45,85,25],[46,46,85,26],[47,4,85,26],[47,5,86,5,"replace"],[47,12,86,12],[47,13,86,13],[47,18,86,18],[47,20,86,20],[47,22,86,22],[47,23,86,23],[47,24,86,24],[48,4,86,24],[48,5,87,5,"replace"],[48,12,87,12],[48,13,87,13],[48,20,87,20],[48,22,87,22],[48,24,87,24],[48,25,87,25],[48,26,87,26],[48,27,87,27],[50,4,89,2],[51,4,90,2,"remaining"],[51,13,90,11],[51,16,90,14,"remaining"],[51,25,90,23],[51,26,90,24,"endsWith"],[51,34,90,32],[51,35,90,33],[51,38,90,36],[51,39,90,37],[51,42,90,40,"remaining"],[51,51,90,49],[51,54,90,52],[51,57,90,55,"remaining"],[51,66,90,64],[51,69,90,67],[52,4,92,2],[52,8,92,6,"screens"],[52,15,92,13],[52,20,92,18,"undefined"],[52,29,92,27],[52,31,92,29],[53,6,93,4],[54,6,94,4],[54,10,94,10,"routes"],[54,17,94,16],[54,20,94,19,"remaining"],[54,29,94,28],[54,30,95,7,"split"],[54,35,95,12],[54,36,95,13],[54,39,95,16],[54,40,95,17],[54,41,96,7,"filter"],[54,47,96,13],[54,48,96,14,"Boolean"],[54,55,96,21],[54,56,96,22],[54,57,97,7,"map"],[54,60,97,10],[54,61,97,12,"segment"],[54,68,97,19],[54,72,97,24],[55,8,98,8],[55,12,98,14,"name"],[55,16,98,18],[55,19,98,21,"decodeURIComponent"],[55,37,98,39],[55,38,98,40,"segment"],[55,45,98,47],[55,46,98,48],[56,8,99,8],[56,15,99,15],[57,10,99,17,"name"],[58,8,99,22],[58,9,99,23],[59,6,100,6],[59,7,100,7],[59,8,100,8],[60,6,102,4],[60,10,102,8,"routes"],[60,17,102,14],[60,18,102,15,"length"],[60,24,102,21],[60,26,102,23],[61,8,103,6],[61,15,103,13,"createNestedStateObject"],[61,38,103,36],[61,39,103,37,"path"],[61,43,103,41],[61,45,103,43,"routes"],[61,52,103,49],[61,54,103,51,"initialRoutes"],[61,67,103,64],[61,68,103,65],[62,6,104,4],[63,6,106,4],[63,13,106,11,"undefined"],[63,22,106,20],[64,4,107,2],[66,4,109,2],[67,4,110,2],[67,8,110,8,"configs"],[67,15,110,15],[67,18,110,19],[67,20,110,21],[67,21,111,5,"concat"],[67,27,111,11],[67,28,112,6],[67,31,112,9,"Object"],[67,37,112,15],[67,38,112,16,"keys"],[67,42,112,20],[67,43,112,21,"screens"],[67,50,112,28],[67,51,112,29],[67,52,112,30,"map"],[67,55,112,33],[67,56,112,35,"key"],[67,59,112,38],[67,63,113,8,"createNormalizedConfigs"],[67,86,113,31],[67,87,114,10,"key"],[67,90,114,13],[67,92,115,10,"screens"],[67,99,115,17],[67,101,116,10],[67,103,116,12],[67,105,117,10,"initialRoutes"],[67,118,117,23],[67,120,118,10],[67,122,119,8],[67,123,120,6],[67,124,121,4],[67,125,121,5],[67,126,122,5,"sort"],[67,130,122,9],[67,131,122,10],[67,132,122,11,"a"],[67,133,122,12],[67,135,122,14,"b"],[67,136,122,15],[67,141,122,20],[68,6,123,6],[69,6,124,6],[70,6,125,6],[72,6,127,6],[73,6,128,6],[74,6,129,6],[74,10,129,10,"a"],[74,11,129,11],[74,12,129,12,"pattern"],[74,19,129,19],[74,24,129,24,"b"],[74,25,129,25],[74,26,129,26,"pattern"],[74,33,129,33],[74,35,129,35],[75,8,130,8],[75,15,130,15,"b"],[75,16,130,16],[75,17,130,17,"routeNames"],[75,27,130,27],[75,28,130,28,"join"],[75,32,130,32],[75,33,130,33],[75,36,130,36],[75,37,130,37],[75,38,130,38,"localeCompare"],[75,51,130,51],[75,52,130,52,"a"],[75,53,130,53],[75,54,130,54,"routeNames"],[75,64,130,64],[75,65,130,65,"join"],[75,69,130,69],[75,70,130,70],[75,73,130,73],[75,74,130,74],[75,75,130,75],[76,6,131,6],[78,6,133,6],[79,6,134,6],[80,6,135,6],[80,10,135,10,"a"],[80,11,135,11],[80,12,135,12,"pattern"],[80,19,135,19],[80,20,135,20,"startsWith"],[80,30,135,30],[80,31,135,31,"b"],[80,32,135,32],[80,33,135,33,"pattern"],[80,40,135,40],[80,41,135,41],[80,43,135,43],[81,8,136,8],[81,15,136,15],[81,16,136,16],[81,17,136,17],[82,6,137,6],[83,6,139,6],[83,10,139,10,"b"],[83,11,139,11],[83,12,139,12,"pattern"],[83,19,139,19],[83,20,139,20,"startsWith"],[83,30,139,30],[83,31,139,31,"a"],[83,32,139,32],[83,33,139,33,"pattern"],[83,40,139,40],[83,41,139,41],[83,43,139,43],[84,8,140,8],[84,15,140,15],[84,16,140,16],[85,6,141,6],[86,6,143,6],[86,10,143,12,"aParts"],[86,16,143,18],[86,19,143,21,"a"],[86,20,143,22],[86,21,143,23,"pattern"],[86,28,143,30],[86,29,143,31,"split"],[86,34,143,36],[86,35,143,37],[86,38,143,40],[86,39,143,41],[87,6,144,6],[87,10,144,12,"bParts"],[87,16,144,18],[87,19,144,21,"b"],[87,20,144,22],[87,21,144,23,"pattern"],[87,28,144,30],[87,29,144,31,"split"],[87,34,144,36],[87,35,144,37],[87,38,144,40],[87,39,144,41],[88,6,146,6],[88,11,146,11],[88,15,146,15,"i"],[88,16,146,16],[88,19,146,19],[88,20,146,20],[88,22,146,22,"i"],[88,23,146,23],[88,26,146,26,"Math"],[88,30,146,30],[88,31,146,31,"max"],[88,34,146,34],[88,35,146,35,"aParts"],[88,41,146,41],[88,42,146,42,"length"],[88,48,146,48],[88,50,146,50,"bParts"],[88,56,146,56],[88,57,146,57,"length"],[88,63,146,63],[88,64,146,64],[88,66,146,66,"i"],[88,67,146,67],[88,69,146,69],[88,71,146,71],[89,8,147,8],[90,8,148,8],[90,12,148,12,"aParts"],[90,18,148,18],[90,19,148,19,"i"],[90,20,148,20],[90,21,148,21],[90,25,148,25],[90,29,148,29],[90,31,148,31],[91,10,149,10],[91,17,149,17],[91,18,149,18],[92,8,150,8],[93,8,151,8],[94,8,152,8],[94,12,152,12,"bParts"],[94,18,152,18],[94,19,152,19,"i"],[94,20,152,20],[94,21,152,21],[94,25,152,25],[94,29,152,29],[94,31,152,31],[95,10,153,10],[95,17,153,17],[95,18,153,18],[95,19,153,19],[96,8,154,8],[97,8,155,8],[97,12,155,14,"aWildCard"],[97,21,155,23],[97,24,155,26,"aParts"],[97,30,155,32],[97,31,155,33,"i"],[97,32,155,34],[97,33,155,35],[97,38,155,40],[97,41,155,43],[97,45,155,47,"aParts"],[97,51,155,53],[97,52,155,54,"i"],[97,53,155,55],[97,54,155,56],[97,55,155,57,"startsWith"],[97,65,155,67],[97,66,155,68],[97,69,155,71],[97,70,155,72],[98,8,156,8],[98,12,156,14,"bWildCard"],[98,21,156,23],[98,24,156,26,"bParts"],[98,30,156,32],[98,31,156,33,"i"],[98,32,156,34],[98,33,156,35],[98,38,156,40],[98,41,156,43],[98,45,156,47,"bParts"],[98,51,156,53],[98,52,156,54,"i"],[98,53,156,55],[98,54,156,56],[98,55,156,57,"startsWith"],[98,65,156,67],[98,66,156,68],[98,69,156,71],[98,70,156,72],[99,8,157,8],[100,8,158,8],[100,12,158,12,"aWildCard"],[100,21,158,21],[100,25,158,25,"bWildCard"],[100,34,158,34],[100,36,158,36],[101,10,159,10],[102,8,160,8],[103,8,161,8],[104,8,162,8],[104,12,162,12,"aWildCard"],[104,21,162,21],[104,23,162,23],[105,10,163,10],[105,17,163,17],[105,18,163,18],[106,8,164,8],[107,8,165,8],[108,8,166,8],[108,12,166,12,"bWildCard"],[108,21,166,21],[108,23,166,23],[109,10,167,10],[109,17,167,17],[109,18,167,18],[109,19,167,19],[110,8,168,8],[111,6,169,6],[112,6,170,6],[112,13,170,13,"bParts"],[112,19,170,19],[112,20,170,20,"length"],[112,26,170,26],[112,29,170,29,"aParts"],[112,35,170,35],[112,36,170,36,"length"],[112,42,170,42],[113,4,171,4],[113,5,171,5],[113,6,171,6],[115,4,173,2],[116,4,174,2,"configs"],[116,11,174,9],[116,12,174,10,"reduce"],[116,18,174,16],[116,19,174,46],[116,20,174,47,"acc"],[116,23,174,50],[116,25,174,52,"config"],[116,31,174,58],[116,36,174,63],[117,6,175,4],[117,10,175,8,"acc"],[117,13,175,11],[117,14,175,12,"config"],[117,20,175,18],[117,21,175,19,"pattern"],[117,28,175,26],[117,29,175,27],[117,31,175,29],[118,8,176,6],[118,12,176,12,"a"],[118,13,176,13],[118,16,176,16,"acc"],[118,19,176,19],[118,20,176,20,"config"],[118,26,176,26],[118,27,176,27,"pattern"],[118,34,176,34],[118,35,176,35],[118,36,176,36,"routeNames"],[118,46,176,46],[119,8,177,6],[119,12,177,12,"b"],[119,13,177,13],[119,16,177,16,"config"],[119,22,177,22],[119,23,177,23,"routeNames"],[119,33,177,33],[121,8,179,6],[122,8,180,6],[123,8,181,6],[123,12,181,12,"intersects"],[123,22,181,22],[123,25,182,8,"a"],[123,26,182,9],[123,27,182,10,"length"],[123,33,182,16],[123,36,182,19,"b"],[123,37,182,20],[123,38,182,21,"length"],[123,44,182,27],[123,47,183,12,"b"],[123,48,183,13],[123,49,183,14,"every"],[123,54,183,19],[123,55,183,20],[123,56,183,21,"it"],[123,58,183,23],[123,60,183,25,"i"],[123,61,183,26],[123,66,183,31,"a"],[123,67,183,32],[123,68,183,33,"i"],[123,69,183,34],[123,70,183,35],[123,75,183,40,"it"],[123,77,183,42],[123,78,183,43],[123,81,184,12,"a"],[123,82,184,13],[123,83,184,14,"every"],[123,88,184,19],[123,89,184,20],[123,90,184,21,"it"],[123,92,184,23],[123,94,184,25,"i"],[123,95,184,26],[123,100,184,31,"b"],[123,101,184,32],[123,102,184,33,"i"],[123,103,184,34],[123,104,184,35],[123,109,184,40,"it"],[123,111,184,42],[123,112,184,43],[124,8,186,6],[124,12,186,10],[124,13,186,11,"intersects"],[124,23,186,21],[124,25,186,23],[125,10,187,8],[125,16,187,14],[125,20,187,18,"Error"],[125,25,187,23],[125,26,188,10],[125,91,189,12,"config"],[125,97,189,18],[125,98,189,19,"pattern"],[125,105,189,26],[125,128,190,33,"a"],[125,129,190,34],[125,130,190,35,"join"],[125,134,190,39],[125,135,190,40],[125,140,190,45],[125,141,190,46],[125,151,190,56,"b"],[125,152,190,57],[125,153,190,58,"join"],[125,157,190,62],[125,158,191,12],[125,163,192,10],[125,164,192,11],[125,236,193,8],[125,237,193,9],[126,8,194,6],[127,6,195,4],[128,6,197,4],[128,13,197,11,"Object"],[128,19,197,17],[128,20,197,18,"assign"],[128,26,197,24],[128,27,197,25,"acc"],[128,30,197,28],[128,32,197,30],[129,8,198,6],[129,9,198,7,"config"],[129,15,198,13],[129,16,198,14,"pattern"],[129,23,198,21],[129,26,198,24,"config"],[130,6,199,4],[130,7,199,5],[130,8,199,6],[131,4,200,2],[131,5,200,3],[131,7,200,5],[131,8,200,6],[131,9,200,7],[131,10,200,8],[132,4,202,2],[132,8,202,6,"remaining"],[132,17,202,15],[132,22,202,20],[132,25,202,23],[132,27,202,25],[133,6,203,4],[134,6,204,4],[135,6,205,4],[135,10,205,10,"match"],[135,15,205,15],[135,18,205,18,"configs"],[135,25,205,25],[135,26,205,26,"find"],[135,30,205,30],[135,31,206,7,"config"],[135,37,206,13],[135,41,207,8,"config"],[135,47,207,14],[135,48,207,15,"path"],[135,52,207,19],[135,57,207,24],[135,59,207,26],[135,63,208,8,"config"],[135,69,208,14],[135,70,208,15,"routeNames"],[135,80,208,25],[135,81,208,26,"every"],[135,86,208,31],[136,6,209,10],[137,6,210,11,"name"],[137,10,210,15],[137,14,210,20],[137,15,210,21,"configs"],[137,22,210,28],[137,23,210,29,"find"],[137,27,210,33],[137,28,210,35,"c"],[137,29,210,36],[137,33,210,41,"c"],[137,34,210,42],[137,35,210,43,"screen"],[137,41,210,49],[137,46,210,54,"name"],[137,50,210,58],[137,51,210,59],[137,53,210,61,"path"],[137,57,211,8],[137,58,212,4],[137,59,212,5],[138,6,214,4],[138,10,214,8,"match"],[138,15,214,13],[138,17,214,15],[139,8,215,6],[139,15,215,13,"createNestedStateObject"],[139,38,215,36],[139,39,216,8,"path"],[139,43,216,12],[139,45,217,8,"match"],[139,50,217,13],[139,51,217,14,"routeNames"],[139,61,217,24],[139,62,217,25,"map"],[139,65,217,28],[139,66,217,30,"name"],[139,70,217,34],[139,75,217,40],[140,10,217,42,"name"],[141,8,217,47],[141,9,217,48],[141,10,217,49],[141,11,217,50],[141,13,218,8,"initialRoutes"],[141,26,218,21],[141,28,219,8,"configs"],[141,35,220,6],[141,36,220,7],[142,6,221,4],[143,6,223,4],[143,13,223,11,"undefined"],[143,22,223,20],[144,4,224,2],[145,4,226,2],[145,8,226,6,"result"],[145,14,226,55],[146,4,227,2],[146,8,227,6,"current"],[146,15,227,56],[148,4,229,2],[149,4,230,2],[150,4,231,2],[150,8,231,2,"_matchAgainstConfigs"],[150,28,231,2],[150,31,231,36,"matchAgainstConfigs"],[150,50,231,55],[150,51,232,4,"remaining"],[150,60,232,13],[150,62,233,4,"configs"],[150,69,233,11],[150,70,233,12,"map"],[150,73,233,15],[150,74,233,17,"c"],[150,75,233,18],[150,80,233,24],[151,8,234,6],[151,11,234,9,"c"],[151,12,234,10],[152,8,235,6],[153,8,236,6,"regex"],[153,13,236,11],[153,15,236,13,"c"],[153,16,236,14],[153,17,236,15,"regex"],[153,22,236,20],[153,25,236,23],[153,29,236,27,"RegExp"],[153,35,236,33],[153,36,236,34,"c"],[153,37,236,35],[153,38,236,36,"regex"],[153,43,236,41],[153,44,236,42,"source"],[153,50,236,48],[153,53,236,51],[153,56,236,54],[153,57,236,55],[153,60,236,58,"undefined"],[154,6,237,4],[154,7,237,5],[154,8,237,6],[154,9,238,2],[154,10,238,3],[155,6,231,10,"routes"],[155,12,231,16],[155,15,231,16,"_matchAgainstConfigs"],[155,35,231,16],[155,36,231,10,"routes"],[155,42,231,16],[156,6,231,18,"remainingPath"],[156,19,231,31],[156,22,231,31,"_matchAgainstConfigs"],[156,42,231,31],[156,43,231,18,"remainingPath"],[156,56,231,31],[157,4,240,2],[157,8,240,6,"routes"],[157,14,240,12],[157,19,240,17,"undefined"],[157,28,240,26],[157,30,240,28],[158,6,241,4],[159,6,242,4,"current"],[159,13,242,11],[159,16,242,14,"createNestedStateObject"],[159,39,242,37],[159,40,242,38,"path"],[159,44,242,42],[159,46,242,44,"routes"],[159,52,242,50],[159,54,242,52,"initialRoutes"],[159,67,242,65],[159,69,242,67,"configs"],[159,76,242,74],[159,77,242,75],[160,6,243,4,"remaining"],[160,15,243,13],[160,18,243,16,"remainingPath"],[160,31,243,29],[161,6,244,4,"result"],[161,12,244,10],[161,15,244,13,"current"],[161,22,244,20],[162,4,245,2],[163,4,247,2],[163,8,247,6,"current"],[163,15,247,13],[163,19,247,17],[163,23,247,21],[163,27,247,25,"result"],[163,33,247,31],[163,37,247,35],[163,41,247,39],[163,43,247,41],[164,6,248,4],[164,13,248,11,"undefined"],[164,22,248,20],[165,4,249,2],[166,4,251,2],[166,11,251,9,"result"],[166,17,251,15],[167,2,252,0],[168,2,254,0],[168,6,254,6,"joinPaths"],[168,15,254,15],[168,18,254,18],[168,27,254,18,"joinPaths"],[168,28,254,18],[169,4,254,18],[169,13,254,18,"_len"],[169,17,254,18],[169,20,254,18,"arguments"],[169,29,254,18],[169,30,254,18,"length"],[169,36,254,18],[169,38,254,22,"paths"],[169,43,254,27],[169,50,254,27,"Array"],[169,55,254,27],[169,56,254,27,"_len"],[169,60,254,27],[169,63,254,27,"_key"],[169,67,254,27],[169,73,254,27,"_key"],[169,77,254,27],[169,80,254,27,"_len"],[169,84,254,27],[169,86,254,27,"_key"],[169,90,254,27],[170,6,254,22,"paths"],[170,11,254,27],[170,12,254,27,"_key"],[170,16,254,27],[170,20,254,27,"arguments"],[170,29,254,27],[170,30,254,27,"_key"],[170,34,254,27],[171,4,254,27],[172,4,254,27],[172,11,255,3],[172,13,255,5],[172,14,256,5,"concat"],[172,20,256,11],[172,21,256,12],[172,24,256,15,"paths"],[172,29,256,20],[172,30,256,21,"map"],[172,33,256,24],[172,34,256,26,"p"],[172,35,256,27],[172,39,256,32,"p"],[172,40,256,33],[172,41,256,34,"split"],[172,46,256,39],[172,47,256,40],[172,50,256,43],[172,51,256,44],[172,52,256,45],[172,53,256,46],[172,54,257,5,"filter"],[172,60,257,11],[172,61,257,12,"Boolean"],[172,68,257,19],[172,69,257,20],[172,70,258,5,"join"],[172,74,258,9],[172,75,258,10],[172,78,258,13],[172,79,258,14],[173,2,258,14],[174,2,260,0],[174,6,260,6,"matchAgainstConfigs"],[174,25,260,25],[174,28,260,28,"matchAgainstConfigs"],[174,29,260,29,"remaining"],[174,38,260,46],[174,40,260,48,"configs"],[174,47,260,70],[174,52,260,75],[175,4,261,2],[175,8,261,6,"routes"],[175,14,261,39],[176,4,262,2],[176,8,262,6,"remainingPath"],[176,21,262,19],[176,24,262,22,"remaining"],[176,33,262,31],[178,4,264,2],[179,4,264,2],[179,8,264,2,"_loop"],[179,13,264,2],[179,25,264,2,"_loop"],[179,26,264,2,"config"],[179,32,264,2],[179,34,265,32],[180,8,266,4],[180,12,266,8],[180,13,266,9,"config"],[180,19,266,15],[180,20,266,16,"regex"],[180,25,266,21],[180,27,266,23],[181,10,266,23],[182,8,268,4],[183,8,270,4],[183,12,270,10,"match"],[183,17,270,15],[183,20,270,18,"remainingPath"],[183,33,270,31],[183,34,270,32,"match"],[183,39,270,37],[183,40,270,38,"config"],[183,46,270,44],[183,47,270,45,"regex"],[183,52,270,50],[183,53,270,51],[185,8,272,4],[186,8,273,4],[186,12,273,8,"match"],[186,17,273,13],[186,19,273,15],[187,10,274,6],[187,14,274,12,"matchResult"],[187,25,274,23],[187,28,274,26,"config"],[187,34,274,32],[187,35,274,33,"pattern"],[187,42,274,40],[187,44,274,42,"split"],[187,49,274,47],[187,50,274,48],[187,53,274,51],[187,54,274,52],[187,55,274,53,"reduce"],[187,61,274,59],[187,62,278,8],[187,63,278,9,"acc"],[187,66,278,12],[187,68,278,14,"p"],[187,69,278,15],[187,71,278,17,"index"],[187,76,278,22],[187,81,278,27],[188,12,279,10],[188,16,279,14],[188,17,279,15,"p"],[188,18,279,16],[188,19,279,17,"startsWith"],[188,29,279,27],[188,30,279,28],[188,33,279,31],[188,34,279,32],[188,36,279,34],[189,14,280,12],[189,21,280,19,"acc"],[189,24,280,22],[190,12,281,10],[192,12,283,10],[193,12,284,10,"acc"],[193,15,284,13],[193,16,284,14,"pos"],[193,19,284,17],[193,23,284,21],[193,24,284,22],[194,12,286,10],[194,16,286,16,"decodedParamSegment"],[194,35,286,35],[194,38,286,38,"decodeURIComponent"],[194,56,286,56],[195,12,287,12],[196,12,288,12,"match"],[196,17,288,17],[196,18,288,19],[196,19,288,20,"acc"],[196,22,288,23],[196,23,288,24,"pos"],[196,26,288,27],[196,29,288,30],[196,30,288,31],[196,34,288,35],[196,35,288,36],[197,12,289,14],[198,12,289,14],[198,13,290,15,"replace"],[198,20,290,22],[198,21,290,23],[198,26,290,28],[198,28,290,30],[198,30,290,32],[198,31,291,10],[198,32,291,11],[199,12,293,10,"Object"],[199,18,293,16],[199,19,293,17,"assign"],[199,25,293,23],[199,26,293,24,"acc"],[199,29,293,27],[199,30,293,28,"matchedParams"],[199,43,293,41],[199,45,293,43],[200,14,294,12],[200,15,294,13,"p"],[200,16,294,14],[200,19,294,17,"Object"],[200,25,294,23],[200,26,294,24,"assign"],[200,32,294,30],[200,33,294,31,"acc"],[200,36,294,34],[200,37,294,35,"matchedParams"],[200,50,294,48],[200,51,294,49,"p"],[200,52,294,50],[200,53,294,51],[200,57,294,55],[200,58,294,56],[200,59,294,57],[200,61,294,59],[201,16,295,14],[201,17,295,15,"index"],[201,22,295,20],[201,25,295,23,"decodedParamSegment"],[202,14,296,12],[202,15,296,13],[203,12,297,10],[203,13,297,11],[203,14,297,12],[204,12,299,10],[204,19,299,17,"acc"],[204,22,299,20],[205,10,300,8],[205,11,300,9],[205,13,301,8],[206,12,301,10,"pos"],[206,15,301,13],[206,17,301,15],[206,18,301,16],[206,19,301,17],[207,12,301,19,"matchedParams"],[207,25,301,32],[207,27,301,34],[207,28,301,35],[208,10,301,37],[208,11,302,6],[208,12,302,7],[209,10,304,6],[209,14,304,12,"matchedParams"],[209,27,304,25],[209,30,304,28,"matchResult"],[209,41,304,39],[209,42,304,40,"matchedParams"],[209,55,304,53],[209,59,304,57],[209,60,304,58],[209,61,304,59],[210,10,306,6,"routes"],[210,16,306,12],[210,19,306,15,"config"],[210,25,306,21],[210,26,306,22,"routeNames"],[210,36,306,32],[210,37,306,33,"map"],[210,40,306,36],[210,41,306,38,"name"],[210,45,306,42],[210,49,306,47],[211,12,307,8],[211,16,307,14,"routeConfig"],[211,27,307,25],[211,30,307,28,"configs"],[211,37,307,35],[211,38,307,36,"find"],[211,42,307,40],[211,43,307,42,"c"],[211,44,307,43],[211,48,307,48],[212,14,308,10],[213,14,309,10],[213,21,309,17,"c"],[213,22,309,18],[213,23,309,19,"screen"],[213,29,309,25],[213,34,309,30,"name"],[213,38,309,34],[213,42,309,38,"config"],[213,48,309,44],[213,49,309,45,"pattern"],[213,56,309,52],[213,57,309,53,"startsWith"],[213,67,309,63],[213,68,309,64,"c"],[213,69,309,65],[213,70,309,66,"pattern"],[213,77,309,73],[213,78,309,74],[214,12,310,8],[214,13,310,9],[214,14,310,10],[216,12,312,8],[217,12,313,8],[217,16,313,14,"normalizedPath"],[217,30,313,28],[217,33,313,31,"routeConfig"],[217,44,313,42],[217,46,313,44,"path"],[217,50,313,48],[217,51,314,11,"split"],[217,56,314,16],[217,57,314,17],[217,60,314,20],[217,61,314,21],[217,62,315,11,"filter"],[217,68,315,17],[217,69,315,18,"Boolean"],[217,76,315,25],[217,77,315,26],[217,78,316,11,"join"],[217,82,316,15],[217,83,316,16],[217,86,316,19],[217,87,316,20],[219,12,318,8],[220,12,319,8],[220,16,319,14,"numInitialSegments"],[220,34,319,32],[220,37,319,35,"routeConfig"],[220,48,319,46],[220,50,319,48,"pattern"],[221,12,320,10],[222,12,320,10],[222,13,321,11,"replace"],[222,20,321,18],[222,21,321,19],[222,25,321,23,"RegExp"],[222,31,321,29],[222,32,321,30],[222,35,321,33],[222,39,321,33,"escape"],[222,66,321,39],[222,68,321,40,"normalizedPath"],[222,82,321,55],[222,83,321,56],[222,86,321,59],[222,87,321,60],[222,89,321,62],[222,91,321,64],[222,92,321,65],[222,94,322,12,"split"],[222,99,322,17],[222,100,322,18],[222,103,322,21],[222,104,322,22],[222,105,322,23,"length"],[222,111,322,29],[223,12,324,8],[223,16,324,14,"params"],[223,22,324,20],[223,25,324,23,"normalizedPath"],[223,39,324,37],[223,41,325,12,"split"],[223,46,325,17],[223,47,325,18],[223,50,325,21],[223,51,325,22],[223,52,326,11,"reduce"],[223,58,326,17],[223,59,326,43],[223,60,326,44,"acc"],[223,63,326,47],[223,65,326,49,"p"],[223,66,326,50],[223,68,326,52,"index"],[223,73,326,57],[223,78,326,62],[224,14,327,12],[224,18,327,16],[224,19,327,17,"p"],[224,20,327,18],[224,21,327,19,"startsWith"],[224,31,327,29],[224,32,327,30],[224,35,327,33],[224,36,327,34],[224,38,327,36],[225,16,328,14],[225,23,328,21,"acc"],[225,26,328,24],[226,14,329,12],[228,14,331,12],[229,14,332,12],[230,14,333,12],[230,18,333,18,"offset"],[230,24,333,24],[230,27,333,27,"numInitialSegments"],[230,45,333,45],[230,48,333,48,"numInitialSegments"],[230,66,333,66],[230,69,333,69],[230,70,333,70],[230,73,333,73],[230,74,333,74],[231,14,334,12],[231,18,334,18,"value"],[231,23,334,23],[231,26,334,26,"matchedParams"],[231,39,334,39],[231,40,334,40,"p"],[231,41,334,41],[231,42,334,42],[231,45,334,45,"index"],[231,50,334,50],[231,53,334,53,"offset"],[231,59,334,59],[231,60,334,60],[232,14,336,12],[232,18,336,16,"value"],[232,23,336,21],[232,25,336,23],[233,16,337,14],[233,20,337,20,"key"],[233,23,337,23],[233,26,337,26,"p"],[233,27,337,27],[233,28,337,28,"replace"],[233,35,337,35],[233,36,337,36],[233,40,337,40],[233,42,337,42],[233,44,337,44],[233,45,337,45],[233,46,337,46,"replace"],[233,53,337,53],[233,54,337,54],[233,59,337,59],[233,61,337,61],[233,63,337,63],[233,64,337,64],[234,16,338,14,"acc"],[234,19,338,17],[234,20,338,18,"key"],[234,23,338,21],[234,24,338,22],[234,27,338,25,"routeConfig"],[234,38,338,36],[234,40,338,38,"parse"],[234,45,338,43],[234,48,338,46,"key"],[234,51,338,49],[234,52,338,50],[234,55,339,18,"routeConfig"],[234,66,339,29],[234,67,339,30,"parse"],[234,72,339,35],[234,73,339,36,"key"],[234,76,339,39],[234,77,339,40],[234,78,339,41,"value"],[234,83,339,46],[234,84,339,47],[234,87,340,18,"value"],[234,92,340,23],[235,14,341,12],[236,14,343,12],[236,21,343,19,"acc"],[236,24,343,22],[237,12,344,10],[237,13,344,11],[237,15,344,13],[237,16,344,14],[237,17,344,15],[237,18,344,16],[238,12,346,8],[238,16,346,12,"params"],[238,22,346,18],[238,26,346,22,"Object"],[238,32,346,28],[238,33,346,29,"keys"],[238,37,346,33],[238,38,346,34,"params"],[238,44,346,40],[238,45,346,41],[238,46,346,42,"length"],[238,52,346,48],[238,54,346,50],[239,14,347,10],[239,21,347,17],[240,16,347,19,"name"],[240,20,347,23],[241,16,347,25,"params"],[242,14,347,32],[242,15,347,33],[243,12,348,8],[244,12,350,8],[244,19,350,15],[245,14,350,17,"name"],[246,12,350,22],[246,13,350,23],[247,10,351,6],[247,11,351,7],[247,12,351,8],[248,10,353,6,"remainingPath"],[248,23,353,19],[248,26,353,22,"remainingPath"],[248,39,353,35],[248,40,353,36,"replace"],[248,47,353,43],[248,48,353,44,"match"],[248,53,353,49],[248,54,353,50],[248,55,353,51],[248,56,353,52],[248,58,353,54],[248,60,353,56],[248,61,353,57],[249,10,353,58],[250,8,356,4],[251,6,357,2],[251,7,357,3],[252,6,357,3,"_ret"],[252,10,357,3],[253,4,265,2],[253,9,265,7],[253,13,265,13,"config"],[253,19,265,19],[253,23,265,23,"configs"],[253,30,265,30],[254,6,265,30,"_ret"],[254,10,265,30],[254,13,265,30,"_loop"],[254,18,265,30],[254,19,265,30,"config"],[254,25,265,30],[255,6,265,30],[255,10,265,30,"_ret"],[255,14,265,30],[255,22,267,6],[256,6,267,15],[256,10,267,15,"_ret"],[256,14,267,15],[256,22,355,6],[257,4,355,12],[258,4,359,2],[258,11,359,9],[259,6,359,11,"routes"],[259,12,359,17],[260,6,359,19,"remainingPath"],[261,4,359,33],[261,5,359,34],[262,2,360,0],[262,3,360,1],[263,2,362,0],[263,6,362,6,"createNormalizedConfigs"],[263,29,362,29],[263,32,362,32],[263,41,362,32,"createNormalizedConfigs"],[263,42,363,2,"screen"],[263,48,363,16],[263,50,364,2,"routeConfig"],[263,61,364,36],[263,63,369,20],[264,4,369,20],[264,8,365,2,"routeNames"],[264,18,365,22],[264,21,365,22,"arguments"],[264,30,365,22],[264,31,365,22,"length"],[264,37,365,22],[264,45,365,22,"arguments"],[264,54,365,22],[264,62,365,22,"undefined"],[264,71,365,22],[264,74,365,22,"arguments"],[264,83,365,22],[264,89,365,25],[264,91,365,27],[265,4,365,27],[265,8,366,2,"initials"],[265,16,366,32],[265,19,366,32,"arguments"],[265,28,366,32],[265,29,366,32,"length"],[265,35,366,32],[265,42,366,32,"arguments"],[265,51,366,32],[265,57,366,32,"undefined"],[265,66,366,32],[266,4,366,32],[266,8,367,2,"parentScreens"],[266,21,367,25],[266,24,367,25,"arguments"],[266,33,367,25],[266,34,367,25,"length"],[266,40,367,25],[266,47,367,25,"arguments"],[266,56,367,25],[266,62,367,25,"undefined"],[266,71,367,25],[267,4,367,25],[267,8,368,2,"parentPattern"],[267,21,368,24],[267,24,368,24,"arguments"],[267,33,368,24],[267,34,368,24,"length"],[267,40,368,24],[267,47,368,24,"arguments"],[267,56,368,24],[267,62,368,24,"undefined"],[267,71,368,24],[268,4,370,2],[268,8,370,8,"configs"],[268,15,370,30],[268,18,370,33],[268,20,370,35],[269,4,372,2,"routeNames"],[269,14,372,12],[269,15,372,13,"push"],[269,19,372,17],[269,20,372,18,"screen"],[269,26,372,24],[269,27,372,25],[270,4,374,2,"parentScreens"],[270,17,374,15],[270,18,374,16,"push"],[270,22,374,20],[270,23,374,21,"screen"],[270,29,374,27],[270,30,374,28],[272,4,376,2],[273,4,377,2],[273,8,377,8,"config"],[273,14,377,14],[273,17,377,17,"routeConfig"],[273,28,377,28],[273,29,377,29,"screen"],[273,35,377,35],[273,36,377,36],[274,4,379,2],[274,8,379,6],[274,15,379,13,"config"],[274,21,379,19],[274,26,379,24],[274,34,379,32],[274,36,379,34],[275,6,380,4],[276,6,381,4],[276,10,381,10,"pattern"],[276,17,381,17],[276,20,381,20,"parentPattern"],[276,33,381,33],[276,36,381,36,"joinPaths"],[276,45,381,45],[276,46,381,46,"parentPattern"],[276,59,381,59],[276,61,381,61,"config"],[276,67,381,67],[276,68,381,68],[276,71,381,71,"config"],[276,77,381,77],[277,6,383,4,"configs"],[277,13,383,11],[277,14,383,12,"push"],[277,18,383,16],[277,19,383,17,"createConfigItem"],[277,35,383,33],[277,36,383,34,"screen"],[277,42,383,40],[277,44,383,42,"routeNames"],[277,54,383,52],[277,56,383,54,"pattern"],[277,63,383,61],[277,65,383,63,"config"],[277,71,383,69],[277,72,383,70],[277,73,383,71],[278,4,384,2],[278,5,384,3],[278,11,384,9],[278,15,384,13],[278,22,384,20,"config"],[278,28,384,26],[278,33,384,31],[278,41,384,39],[278,43,384,41],[279,6,385,4],[279,10,385,8,"pattern"],[279,18,385,35],[281,6,387,4],[282,6,388,4],[283,6,389,4],[284,6,390,4],[284,10,390,8],[284,17,390,15,"config"],[284,23,390,21],[284,24,390,22,"path"],[284,28,390,26],[284,33,390,31],[284,41,390,39],[284,43,390,41],[285,8,391,6],[285,12,391,10,"config"],[285,18,391,16],[285,19,391,17,"exact"],[285,24,391,22],[285,28,391,26,"config"],[285,34,391,32],[285,35,391,33,"path"],[285,39,391,37],[285,44,391,42,"undefined"],[285,53,391,51],[285,55,391,53],[286,10,392,8],[286,16,392,14],[286,20,392,18,"Error"],[286,25,392,23],[286,26,393,10],[286,176,394,8],[286,177,394,9],[287,8,395,6],[288,8,397,6,"pattern"],[288,16,397,13],[288,19,398,8,"config"],[288,25,398,14],[288,26,398,15,"exact"],[288,31,398,20],[288,36,398,25],[288,40,398,29],[288,43,399,12,"joinPaths"],[288,52,399,21],[288,53,399,22,"parentPattern"],[288,66,399,35],[288,70,399,39],[288,72,399,41],[288,74,399,43,"config"],[288,80,399,49],[288,81,399,50,"path"],[288,85,399,54],[288,89,399,58],[288,91,399,60],[288,92,399,61],[288,95,400,12,"config"],[288,101,400,18],[288,102,400,19,"path"],[288,106,400,23],[288,110,400,27],[288,112,400,29],[289,8,402,6,"configs"],[289,15,402,13],[289,16,402,14,"push"],[289,20,402,18],[289,21,403,8,"createConfigItem"],[289,37,403,24],[289,38,404,10,"screen"],[289,44,404,16],[289,46,405,10,"routeNames"],[289,56,405,20],[289,58,406,10,"pattern"],[289,66,406,17],[289,68,407,10,"config"],[289,74,407,16],[289,75,407,17,"path"],[289,79,407,21],[289,81,408,10,"config"],[289,87,408,16],[289,88,408,17,"parse"],[289,93,409,8],[289,94,410,6],[289,95,410,7],[290,6,411,4],[291,6,413,4],[291,10,413,8,"config"],[291,16,413,14],[291,17,413,15,"screens"],[291,24,413,22],[291,26,413,24],[292,8,414,6],[293,8,415,6],[293,12,415,10,"config"],[293,18,415,16],[293,19,415,17,"initialRouteName"],[293,35,415,33],[293,37,415,35],[294,10,416,8,"initials"],[294,18,416,16],[294,19,416,17,"push"],[294,23,416,21],[294,24,416,22],[295,12,417,10,"initialRouteName"],[295,28,417,26],[295,30,417,28,"config"],[295,36,417,34],[295,37,417,35,"initialRouteName"],[295,53,417,51],[296,12,418,10,"parentScreens"],[297,10,419,8],[297,11,419,9],[297,12,419,10],[298,8,420,6],[299,8,422,6,"Object"],[299,14,422,12],[299,15,422,13,"keys"],[299,19,422,17],[299,20,422,18,"config"],[299,26,422,24],[299,27,422,25,"screens"],[299,34,422,32],[299,35,422,33],[299,36,422,34,"forEach"],[299,43,422,41],[299,44,422,43,"nestedConfig"],[299,56,422,55],[299,60,422,60],[300,10,423,8],[300,14,423,14,"result"],[300,20,423,20],[300,23,423,23,"createNormalizedConfigs"],[300,46,423,46],[300,47,424,10,"nestedConfig"],[300,59,424,22],[300,61,425,10,"config"],[300,67,425,16],[300,68,425,17,"screens"],[300,75,425,24],[300,77,426,10,"routeNames"],[300,87,426,20],[300,89,427,10,"initials"],[300,97,427,18],[300,99,428,10],[300,100,428,11],[300,103,428,14,"parentScreens"],[300,116,428,27],[300,117,428,28],[300,119,429,10,"pattern"],[300,127,429,17],[300,131,429,21,"parentPattern"],[300,144,430,8],[300,145,430,9],[301,10,432,8,"configs"],[301,17,432,15],[301,18,432,16,"push"],[301,22,432,20],[301,23,432,21],[301,26,432,24,"result"],[301,32,432,30],[301,33,432,31],[302,8,433,6],[302,9,433,7],[302,10,433,8],[303,6,434,4],[304,4,435,2],[305,4,437,2,"routeNames"],[305,14,437,12],[305,15,437,13,"pop"],[305,18,437,16],[305,19,437,17],[305,20,437,18],[306,4,439,2],[306,11,439,9,"configs"],[306,18,439,16],[307,2,440,0],[307,3,440,1],[308,2,442,0],[308,6,442,6,"createConfigItem"],[308,22,442,22],[308,25,442,25,"createConfigItem"],[308,26,443,2,"screen"],[308,32,443,16],[308,34,444,2,"routeNames"],[308,44,444,22],[308,46,445,2,"pattern"],[308,53,445,17],[308,55,446,2,"path"],[308,59,446,14],[308,61,447,2,"parse"],[308,66,447,21],[308,71,448,18],[309,4,449,2],[310,4,450,2,"pattern"],[310,11,450,9],[310,14,450,12,"pattern"],[310,21,450,19],[310,22,450,20,"split"],[310,27,450,25],[310,28,450,26],[310,31,450,29],[310,32,450,30],[310,33,450,31,"filter"],[310,39,450,37],[310,40,450,38,"Boolean"],[310,47,450,45],[310,48,450,46],[310,49,450,47,"join"],[310,53,450,51],[310,54,450,52],[310,57,450,55],[310,58,450,56],[311,4,452,2],[311,8,452,8,"regex"],[311,13,452,13],[311,16,452,16,"pattern"],[311,23,452,23],[311,26,453,6],[311,30,453,10,"RegExp"],[311,36,453,16],[311,37,454,8],[311,42,454,13,"pattern"],[311,49,454,20],[311,50,455,11,"split"],[311,55,455,16],[311,56,455,17],[311,59,455,20],[311,60,455,21],[311,61,456,11,"map"],[311,64,456,14],[311,65,456,16,"it"],[311,67,456,18],[311,71,456,23],[312,6,457,12],[312,10,457,16,"it"],[312,12,457,18],[312,13,457,19,"startsWith"],[312,23,457,29],[312,24,457,30],[312,27,457,33],[312,28,457,34],[312,30,457,36],[313,8,458,14],[313,15,458,21],[313,29,458,35,"it"],[313,31,458,37],[313,32,458,38,"endsWith"],[313,40,458,46],[313,41,458,47],[313,44,458,50],[313,45,458,51],[313,48,458,54],[313,51,458,57],[313,54,458,60],[313,56,458,62],[313,59,458,65],[314,6,459,12],[315,6,461,12],[315,13,461,19],[315,16,461,22,"it"],[315,18,461,24],[315,23,461,29],[315,26,461,32],[315,29,461,35],[315,33,461,39],[315,36,461,42],[315,40,461,42,"escape"],[315,67,461,48],[315,69,461,49,"it"],[315,71,461,51],[315,72,461,52],[315,77,461,57],[316,4,462,10],[316,5,462,11],[316,6,462,12],[316,7,463,11,"join"],[316,11,463,15],[316,12,463,16],[316,14,463,18],[316,15,463,19],[316,18,464,6],[316,19,464,7],[316,22,465,6,"undefined"],[316,31,465,15],[317,4,467,2],[317,11,467,9],[318,6,468,4,"screen"],[318,12,468,10],[319,6,469,4,"regex"],[319,11,469,9],[320,6,470,4,"pattern"],[320,13,470,11],[321,6,471,4,"path"],[321,10,471,8],[322,6,472,4],[323,6,473,4,"routeNames"],[323,16,473,14],[323,18,473,16],[323,19,473,17],[323,22,473,20,"routeNames"],[323,32,473,30],[323,33,473,31],[324,6,474,4,"parse"],[325,4,475,2],[325,5,475,3],[326,2,476,0],[326,3,476,1],[327,2,478,0],[327,6,478,6,"findParseConfigForRoute"],[327,29,478,29],[327,32,478,32,"findParseConfigForRoute"],[327,33,479,2,"routeName"],[327,42,479,19],[327,44,480,2,"flatConfig"],[327,54,480,27],[327,59,481,30],[328,4,482,2],[328,9,482,7],[328,13,482,13,"config"],[328,19,482,19],[328,23,482,23,"flatConfig"],[328,33,482,33],[328,35,482,35],[329,6,483,4],[329,10,483,8,"routeName"],[329,19,483,17],[329,24,483,22,"config"],[329,30,483,28],[329,31,483,29,"routeNames"],[329,41,483,39],[329,42,483,40,"config"],[329,48,483,46],[329,49,483,47,"routeNames"],[329,59,483,57],[329,60,483,58,"length"],[329,66,483,64],[329,69,483,67],[329,70,483,68],[329,71,483,69],[329,73,483,71],[330,8,484,6],[330,15,484,13,"config"],[330,21,484,19],[330,22,484,20,"parse"],[330,27,484,25],[331,6,485,4],[332,4,486,2],[333,4,488,2],[333,11,488,9,"undefined"],[333,20,488,18],[334,2,489,0],[334,3,489,1],[336,2,491,0],[337,2,492,0],[337,6,492,6,"findInitialRoute"],[337,22,492,22],[337,25,492,25,"findInitialRoute"],[337,26,493,2,"routeName"],[337,35,493,19],[337,37,494,2,"parentScreens"],[337,50,494,25],[337,52,495,2,"initialRoutes"],[337,65,495,37],[337,70,496,25],[338,4,497,2],[338,9,497,7],[338,13,497,13,"config"],[338,19,497,19],[338,23,497,23,"initialRoutes"],[338,36,497,36],[338,38,497,38],[339,6,498,4],[339,10,498,8,"parentScreens"],[339,23,498,21],[339,24,498,22,"length"],[339,30,498,28],[339,35,498,33,"config"],[339,41,498,39],[339,42,498,40,"parentScreens"],[339,55,498,53],[339,56,498,54,"length"],[339,62,498,60],[339,64,498,62],[340,8,499,6],[340,12,499,10,"sameParents"],[340,23,499,21],[340,26,499,24],[340,30,499,28],[341,8,500,6],[341,13,500,11],[341,17,500,15,"i"],[341,18,500,16],[341,21,500,19],[341,22,500,20],[341,24,500,22,"i"],[341,25,500,23],[341,28,500,26,"parentScreens"],[341,41,500,39],[341,42,500,40,"length"],[341,48,500,46],[341,50,500,48,"i"],[341,51,500,49],[341,53,500,51],[341,55,500,53],[342,10,501,8],[342,14,501,12,"parentScreens"],[342,27,501,25],[342,28,501,26,"i"],[342,29,501,27],[342,30,501,28],[342,31,501,29,"localeCompare"],[342,44,501,42],[342,45,501,43,"config"],[342,51,501,49],[342,52,501,50,"parentScreens"],[342,65,501,63],[342,66,501,64,"i"],[342,67,501,65],[342,68,501,66],[342,69,501,67],[342,74,501,72],[342,75,501,73],[342,77,501,75],[343,12,502,10,"sameParents"],[343,23,502,21],[343,26,502,24],[343,31,502,29],[344,12,503,10],[345,10,504,8],[346,8,505,6],[347,8,506,6],[347,12,506,10,"sameParents"],[347,23,506,21],[347,25,506,23],[348,10,507,8],[348,17,507,15,"routeName"],[348,26,507,24],[348,31,507,29,"config"],[348,37,507,35],[348,38,507,36,"initialRouteName"],[348,54,507,52],[348,57,508,12,"config"],[348,63,508,18],[348,64,508,19,"initialRouteName"],[348,80,508,35],[348,83,509,12,"undefined"],[348,92,509,21],[349,8,510,6],[350,6,511,4],[351,4,512,2],[352,4,513,2],[352,11,513,9,"undefined"],[352,20,513,18],[353,2,514,0],[353,3,514,1],[355,2,516,0],[356,2,517,0],[357,2,518,0],[357,6,518,6,"createStateObject"],[357,23,518,23],[357,26,518,26,"createStateObject"],[357,27,519,2,"initialRoute"],[357,39,519,34],[357,41,520,2,"route"],[357,46,520,20],[357,48,521,2,"isEmpty"],[357,55,521,18],[357,60,522,19],[358,4,523,2],[358,8,523,6,"isEmpty"],[358,15,523,13],[358,17,523,15],[359,6,524,4],[359,10,524,8,"initialRoute"],[359,22,524,20],[359,24,524,22],[360,8,525,6],[360,15,525,13],[361,10,526,8,"index"],[361,15,526,13],[361,17,526,15],[361,18,526,16],[362,10,527,8,"routes"],[362,16,527,14],[362,18,527,16],[362,19,527,17],[363,12,527,19,"name"],[363,16,527,23],[363,18,527,25,"initialRoute"],[364,10,527,38],[364,11,527,39],[364,13,527,41,"route"],[364,18,527,46],[365,8,528,6],[365,9,528,7],[366,6,529,4],[366,7,529,5],[366,13,529,11],[367,8,530,6],[367,15,530,13],[368,10,531,8,"routes"],[368,16,531,14],[368,18,531,16],[368,19,531,17,"route"],[368,24,531,22],[369,8,532,6],[369,9,532,7],[370,6,533,4],[371,4,534,2],[371,5,534,3],[371,11,534,9],[372,6,535,4],[372,10,535,8,"initialRoute"],[372,22,535,20],[372,24,535,22],[373,8,536,6],[373,15,536,13],[374,10,537,8,"index"],[374,15,537,13],[374,17,537,15],[374,18,537,16],[375,10,538,8,"routes"],[375,16,538,14],[375,18,538,16],[375,19,538,17],[376,12,538,19,"name"],[376,16,538,23],[376,18,538,25,"initialRoute"],[377,10,538,38],[377,11,538,39],[377,13,538,41],[378,12,538,43],[378,15,538,46,"route"],[378,20,538,51],[379,12,538,53,"state"],[379,17,538,58],[379,19,538,60],[380,14,538,62,"routes"],[380,20,538,68],[380,22,538,70],[381,12,538,73],[382,10,538,75],[382,11,538,76],[383,8,539,6],[383,9,539,7],[384,6,540,4],[384,7,540,5],[384,13,540,11],[385,8,541,6],[385,15,541,13],[386,10,542,8,"routes"],[386,16,542,14],[386,18,542,16],[386,19,542,17],[387,12,542,19],[387,15,542,22,"route"],[387,20,542,27],[388,12,542,29,"state"],[388,17,542,34],[388,19,542,36],[389,14,542,38,"routes"],[389,20,542,44],[389,22,542,46],[390,12,542,49],[391,10,542,51],[391,11,542,52],[392,8,543,6],[392,9,543,7],[393,6,544,4],[394,4,545,2],[395,2,546,0],[395,3,546,1],[396,2,548,0],[396,6,548,6,"createNestedStateObject"],[396,29,548,29],[396,32,548,32,"createNestedStateObject"],[396,33,549,2,"path"],[396,37,549,14],[396,39,550,2,"routes"],[396,45,550,23],[396,47,551,2,"initialRoutes"],[396,60,551,37],[396,62,552,2,"flatConfig"],[396,72,552,28],[396,77,553,5],[397,4,554,2],[397,8,554,6,"state"],[397,13,554,25],[398,4,555,2],[398,8,555,6,"route"],[398,13,555,11],[398,16,555,14,"routes"],[398,22,555,20],[398,23,555,21,"shift"],[398,28,555,26],[398,29,555,27],[398,30,555,43],[399,4,556,2],[399,8,556,8,"parentScreens"],[399,21,556,31],[399,24,556,34],[399,26,556,36],[400,4,558,2],[400,8,558,6,"initialRoute"],[400,20,558,18],[400,23,558,21,"findInitialRoute"],[400,39,558,37],[400,40,558,38,"route"],[400,45,558,43],[400,46,558,44,"name"],[400,50,558,48],[400,52,558,50,"parentScreens"],[400,65,558,63],[400,67,558,65,"initialRoutes"],[400,80,558,78],[400,81,558,79],[401,4,560,2,"parentScreens"],[401,17,560,15],[401,18,560,16,"push"],[401,22,560,20],[401,23,560,21,"route"],[401,28,560,26],[401,29,560,27,"name"],[401,33,560,31],[401,34,560,32],[402,4,562,2,"state"],[402,9,562,7],[402,12,562,10,"createStateObject"],[402,29,562,27],[402,30,562,28,"initialRoute"],[402,42,562,40],[402,44,562,42,"route"],[402,49,562,47],[402,51,562,49,"routes"],[402,57,562,55],[402,58,562,56,"length"],[402,64,562,62],[402,69,562,67],[402,70,562,68],[402,71,562,69],[403,4,564,2],[403,8,564,6,"routes"],[403,14,564,12],[403,15,564,13,"length"],[403,21,564,19],[403,24,564,22],[403,25,564,23],[403,27,564,25],[404,6,565,4],[404,10,565,8,"nestedState"],[404,21,565,19],[404,24,565,22,"state"],[404,29,565,27],[405,6,567,4],[405,13,567,12,"route"],[405,18,567,17],[405,21,567,20,"routes"],[405,27,567,26],[405,28,567,27,"shift"],[405,33,567,32],[405,34,567,33],[405,35,567,49],[405,37,567,52],[406,8,568,6,"initialRoute"],[406,20,568,18],[406,23,568,21,"findInitialRoute"],[406,39,568,37],[406,40,568,38,"route"],[406,45,568,43],[406,46,568,44,"name"],[406,50,568,48],[406,52,568,50,"parentScreens"],[406,65,568,63],[406,67,568,65,"initialRoutes"],[406,80,568,78],[406,81,568,79],[407,8,570,6],[407,12,570,12,"nestedStateIndex"],[407,28,570,28],[407,31,571,8,"nestedState"],[407,42,571,19],[407,43,571,20,"index"],[407,48,571,25],[407,52,571,29,"nestedState"],[407,63,571,40],[407,64,571,41,"routes"],[407,70,571,47],[407,71,571,48,"length"],[407,77,571,54],[407,80,571,57],[407,81,571,58],[408,8,573,6,"nestedState"],[408,19,573,17],[408,20,573,18,"routes"],[408,26,573,24],[408,27,573,25,"nestedStateIndex"],[408,43,573,41],[408,44,573,42],[408,45,573,43,"state"],[408,50,573,48],[408,53,573,51,"createStateObject"],[408,70,573,68],[408,71,574,8,"initialRoute"],[408,83,574,20],[408,85,575,8,"route"],[408,90,575,13],[408,92,576,8,"routes"],[408,98,576,14],[408,99,576,15,"length"],[408,105,576,21],[408,110,576,26],[408,111,577,6],[408,112,577,7],[409,8,579,6],[409,12,579,10,"routes"],[409,18,579,16],[409,19,579,17,"length"],[409,25,579,23],[409,28,579,26],[409,29,579,27],[409,31,579,29],[410,10,580,8,"nestedState"],[410,21,580,19],[410,24,580,22,"nestedState"],[410,35,580,33],[410,36,580,34,"routes"],[410,42,580,40],[410,43,580,41,"nestedStateIndex"],[410,59,580,57],[410,60,580,58],[410,61,581,11,"state"],[410,66,581,32],[411,8,582,6],[412,8,584,6,"parentScreens"],[412,21,584,19],[412,22,584,20,"push"],[412,26,584,24],[412,27,584,25,"route"],[412,32,584,30],[412,33,584,31,"name"],[412,37,584,35],[412,38,584,36],[413,6,585,4],[414,4,586,2],[415,4,588,2,"route"],[415,9,588,7],[415,12,588,10],[415,16,588,10,"findFocusedRoute"],[415,41,588,26],[415,43,588,27,"state"],[415,48,588,32],[415,49,588,48],[416,4,589,2,"route"],[416,9,589,7],[416,10,589,8,"path"],[416,14,589,12],[416,17,589,15,"path"],[416,21,589,19],[417,4,591,2],[417,8,591,8,"params"],[417,14,591,14],[417,17,591,17,"parseQueryParams"],[417,33,591,33],[417,34,592,4,"path"],[417,38,592,8],[417,40,593,4,"flatConfig"],[417,50,593,14],[417,53,593,17,"findParseConfigForRoute"],[417,76,593,40],[417,77,593,41,"route"],[417,82,593,46],[417,83,593,47,"name"],[417,87,593,51],[417,89,593,53,"flatConfig"],[417,99,593,63],[417,100,593,64],[417,103,593,67,"undefined"],[417,112,594,2],[417,113,594,3],[418,4,596,2],[418,8,596,6,"params"],[418,14,596,12],[418,16,596,14],[419,6,597,4,"route"],[419,11,597,9],[419,12,597,10,"params"],[419,18,597,16],[419,21,597,19],[420,8,597,21],[420,11,597,24,"route"],[420,16,597,29],[420,17,597,30,"params"],[420,23,597,36],[421,8,597,38],[421,11,597,41,"params"],[422,6,597,48],[422,7,597,49],[423,4,598,2],[424,4,600,2],[424,11,600,9,"state"],[424,16,600,14],[425,2,601,0],[425,3,601,1],[426,2,603,0],[426,6,603,6,"parseQueryParams"],[426,22,603,22],[426,25,603,25,"parseQueryParams"],[426,26,604,2,"path"],[426,30,604,14],[426,32,605,2,"parseConfig"],[426,43,605,54],[426,48,606,5],[427,4,607,2],[427,8,607,8,"query"],[427,13,607,13],[427,16,607,16,"path"],[427,20,607,20],[427,21,607,21,"split"],[427,26,607,26],[427,27,607,27],[427,30,607,30],[427,31,607,31],[427,32,607,32],[427,33,607,33],[427,34,607,34],[428,4,608,2],[428,8,608,8,"params"],[428,14,608,14],[428,17,608,17,"queryString"],[428,28,608,28],[428,29,608,29,"parse"],[428,34,608,34],[428,35,608,35,"query"],[428,40,608,40],[428,41,608,41],[429,4,610,2],[429,8,610,6,"parseConfig"],[429,19,610,17],[429,21,610,19],[430,6,611,4,"Object"],[430,12,611,10],[430,13,611,11,"keys"],[430,17,611,15],[430,18,611,16,"params"],[430,24,611,22],[430,25,611,23],[430,26,611,24,"forEach"],[430,33,611,31],[430,34,611,33,"name"],[430,38,611,37],[430,42,611,42],[431,8,612,6],[431,12,613,8,"Object"],[431,18,613,14],[431,19,613,15,"hasOwnProperty"],[431,33,613,29],[431,34,613,30,"call"],[431,38,613,34],[431,39,613,35,"parseConfig"],[431,50,613,46],[431,52,613,48,"name"],[431,56,613,52],[431,57,613,53],[431,61,614,8],[431,68,614,15,"params"],[431,74,614,21],[431,75,614,22,"name"],[431,79,614,26],[431,80,614,27],[431,85,614,32],[431,93,614,40],[431,95,615,8],[432,10,616,8,"params"],[432,16,616,14],[432,17,616,15,"name"],[432,21,616,19],[432,22,616,20],[432,25,616,23,"parseConfig"],[432,36,616,34],[432,37,616,35,"name"],[432,41,616,39],[432,42,616,40],[432,43,616,41,"params"],[432,49,616,47],[432,50,616,48,"name"],[432,54,616,52],[432,55,616,63],[432,56,616,64],[433,8,617,6],[434,6,618,4],[434,7,618,5],[434,8,618,6],[435,4,619,2],[436,4,621,2],[436,11,621,9,"Object"],[436,17,621,15],[436,18,621,16,"keys"],[436,22,621,20],[436,23,621,21,"params"],[436,29,621,27],[436,30,621,28],[436,31,621,29,"length"],[436,37,621,35],[436,40,621,38,"params"],[436,46,621,44],[436,49,621,47,"undefined"],[436,58,621,56],[437,2,622,0],[437,3,622,1],[438,0,622,2],[438,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","Object.keys.map$argument_0","concat.sort$argument_0","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","configs.find$argument_0","config.routeNames.every$argument_0","match.routeNames.map$argument_0","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;eCgE;WCgC;ODG;kCEY;SFO;UGG;KHiD;8CIG;oBCS,sBD;oBEC,sBF;GJgB;MOM;UCI,wBD,wBC,OD;SPC;6BSM,oBT;gBUgB;MVI;CDe;kBYE;yBCE,mBD;cZE;4BcE;QCkB;SDsB;qCEM;yCRC;SQG;2CCgB;WDkB;OFO;CdS;gCkBE;0CC4D;ODW;ClBO;yBoBE;eCc;WDM;CpBc;gCsBE;CtBW;yBuBG;CvBsB;0BwBI;CxB4B;gCyBE;CzBqD;yB0BE;gCPQ;KOO;C1BI"}},"type":"js/module"}]}