{"dependencies":[{"name":"invariant","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":13,"column":18,"index":261},"end":{"line":13,"column":38,"index":281}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var invariant = _$$_REQUIRE(_dependencyMap[0], \"invariant\");\n  function processAspectRatio(aspectRatio) {\n    if (typeof aspectRatio === 'number') {\n      return aspectRatio;\n    }\n    if (typeof aspectRatio !== 'string') {\n      if (__DEV__) {\n        invariant(!aspectRatio, 'aspectRatio must either be a number, a ratio string or `auto`. You passed: %s', aspectRatio);\n      }\n      return;\n    }\n    var matches = aspectRatio.split('/').map(s => s.trim());\n    if (matches.includes('auto')) {\n      if (__DEV__) {\n        invariant(matches.length, 'aspectRatio does not support `auto <ratio>`. You passed: %s', aspectRatio);\n      }\n      return;\n    }\n    var hasNonNumericValues = matches.some(n => Number.isNaN(Number(n)));\n    if (__DEV__) {\n      invariant(!hasNonNumericValues && (matches.length === 1 || matches.length === 2), 'aspectRatio must either be a number, a ratio string or `auto`. You passed: %s', aspectRatio);\n    }\n    if (hasNonNumericValues) {\n      return;\n    }\n    if (matches.length === 2) {\n      return Number(matches[0]) / Number(matches[1]);\n    }\n    return Number(matches[0]);\n  }\n  module.exports = processAspectRatio;\n});","lineCount":45,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,13,0],[14,6,13,6,"invariant"],[14,15,13,15],[14,18,13,18,"require"],[14,29,13,25],[14,30,13,25,"_dependencyMap"],[14,44,13,25],[14,60,13,37],[14,61,13,38],[15,2,15,0],[15,11,15,9,"processAspectRatio"],[15,29,15,27,"processAspectRatio"],[15,30,15,28,"aspectRatio"],[15,41,15,57],[15,43,15,68],[16,4,16,2],[16,8,16,6],[16,15,16,13,"aspectRatio"],[16,26,16,24],[16,31,16,29],[16,39,16,37],[16,41,16,39],[17,6,17,4],[17,13,17,11,"aspectRatio"],[17,24,17,22],[18,4,18,2],[19,4,19,2],[19,8,19,6],[19,15,19,13,"aspectRatio"],[19,26,19,24],[19,31,19,29],[19,39,19,37],[19,41,19,39],[20,6,20,4],[20,10,20,8,"__DEV__"],[20,17,20,15],[20,19,20,17],[21,8,21,6,"invariant"],[21,17,21,15],[21,18,22,8],[21,19,22,9,"aspectRatio"],[21,30,22,20],[21,32,23,8],[21,111,23,87],[21,113,24,8,"aspectRatio"],[21,124,25,6],[21,125,25,7],[22,6,26,4],[23,6,27,4],[24,4,28,2],[25,4,30,2],[25,8,30,8,"matches"],[25,15,30,15],[25,18,30,18,"aspectRatio"],[25,29,30,29],[25,30,30,30,"split"],[25,35,30,35],[25,36,30,36],[25,39,30,39],[25,40,30,40],[25,41,30,41,"map"],[25,44,30,44],[25,45,30,45,"s"],[25,46,30,46],[25,50,30,50,"s"],[25,51,30,51],[25,52,30,52,"trim"],[25,56,30,56],[25,57,30,57],[25,58,30,58],[25,59,30,59],[26,4,32,2],[26,8,32,6,"matches"],[26,15,32,13],[26,16,32,14,"includes"],[26,24,32,22],[26,25,32,23],[26,31,32,29],[26,32,32,30],[26,34,32,32],[27,6,33,4],[27,10,33,8,"__DEV__"],[27,17,33,15],[27,19,33,17],[28,8,34,6,"invariant"],[28,17,34,15],[28,18,35,8,"matches"],[28,25,35,15],[28,26,35,16,"length"],[28,32,35,22],[28,34,36,8],[28,95,36,69],[28,97,37,8,"aspectRatio"],[28,108,38,6],[28,109,38,7],[29,6,39,4],[30,6,40,4],[31,4,41,2],[32,4,43,2],[32,8,43,8,"hasNonNumericValues"],[32,27,43,27],[32,30,43,30,"matches"],[32,37,43,37],[32,38,43,38,"some"],[32,42,43,42],[32,43,43,43,"n"],[32,44,43,44],[32,48,43,48,"Number"],[32,54,43,54],[32,55,43,55,"isNaN"],[32,60,43,60],[32,61,43,61,"Number"],[32,67,43,67],[32,68,43,68,"n"],[32,69,43,69],[32,70,43,70],[32,71,43,71],[32,72,43,72],[33,4,44,2],[33,8,44,6,"__DEV__"],[33,15,44,13],[33,17,44,15],[34,6,45,4,"invariant"],[34,15,45,13],[34,16,46,6],[34,17,46,7,"hasNonNumericValues"],[34,36,46,26],[34,41,46,31,"matches"],[34,48,46,38],[34,49,46,39,"length"],[34,55,46,45],[34,60,46,50],[34,61,46,51],[34,65,46,55,"matches"],[34,72,46,62],[34,73,46,63,"length"],[34,79,46,69],[34,84,46,74],[34,85,46,75],[34,86,46,76],[34,88,47,6],[34,167,47,85],[34,169,48,6,"aspectRatio"],[34,180,49,4],[34,181,49,5],[35,4,50,2],[36,4,52,2],[36,8,52,6,"hasNonNumericValues"],[36,27,52,25],[36,29,52,27],[37,6,53,4],[38,4,54,2],[39,4,56,2],[39,8,56,6,"matches"],[39,15,56,13],[39,16,56,14,"length"],[39,22,56,20],[39,27,56,25],[39,28,56,26],[39,30,56,28],[40,6,57,4],[40,13,57,11,"Number"],[40,19,57,17],[40,20,57,18,"matches"],[40,27,57,25],[40,28,57,26],[40,29,57,27],[40,30,57,28],[40,31,57,29],[40,34,57,32,"Number"],[40,40,57,38],[40,41,57,39,"matches"],[40,48,57,46],[40,49,57,47],[40,50,57,48],[40,51,57,49],[40,52,57,50],[41,4,58,2],[42,4,60,2],[42,11,60,9,"Number"],[42,17,60,15],[42,18,60,16,"matches"],[42,25,60,23],[42,26,60,24],[42,27,60,25],[42,28,60,26],[42,29,60,27],[43,2,61,0],[44,2,63,0,"module"],[44,8,63,6],[44,9,63,7,"exports"],[44,16,63,14],[44,19,63,17,"processAspectRatio"],[44,37,63,35],[45,0,63,36],[45,3]],"functionMap":{"names":["<global>","processAspectRatio","aspectRatio.split.map$argument_0","matches.some$argument_0"],"mappings":"AAA;ACc;6CCe,aD;2CEa,4BF;CDkB"}},"type":"js/module"}]}