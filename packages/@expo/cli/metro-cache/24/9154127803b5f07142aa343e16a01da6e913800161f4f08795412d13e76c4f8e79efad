{"dependencies":[{"name":"invariant","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":13,"column":18,"index":255},"end":{"line":13,"column":38,"index":275}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var invariant = _$$_REQUIRE(_dependencyMap[0], \"invariant\");\n  var levelsMap = {\n    log: 'log',\n    info: 'info',\n    warn: 'warn',\n    error: 'error',\n    fatal: 'error'\n  };\n  var warningHandler = null;\n  var RCTLog = {\n    // level one of log, info, warn, error, mustfix\n    logIfNoNativeHook(level) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      // We already printed in the native console, so only log here if using a js debugger\n      if (typeof global.nativeLoggingHook === 'undefined') {\n        RCTLog.logToConsole(level, ...args);\n      } else {\n        // Report native warnings to LogBox\n        if (warningHandler && level === 'warn') {\n          warningHandler(...args);\n        }\n      }\n    },\n    // Log to console regardless of nativeLoggingHook\n    logToConsole(level) {\n      // $FlowFixMe[invalid-computed-prop]\n      var logFn = levelsMap[level];\n      invariant(logFn, 'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString());\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      console[logFn](...args);\n    },\n    setWarningHandler(handler) {\n      warningHandler = handler;\n    }\n  };\n  module.exports = RCTLog;\n});","lineCount":54,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,13,0],[14,6,13,6,"invariant"],[14,15,13,15],[14,18,13,18,"require"],[14,29,13,25],[14,30,13,25,"_dependencyMap"],[14,44,13,25],[14,60,13,37],[14,61,13,38],[15,2,15,0],[15,6,15,6,"levelsMap"],[15,15,15,15],[15,18,15,18],[16,4,16,2,"log"],[16,7,16,5],[16,9,16,7],[16,14,16,12],[17,4,17,2,"info"],[17,8,17,6],[17,10,17,8],[17,16,17,14],[18,4,18,2,"warn"],[18,8,18,6],[18,10,18,8],[18,16,18,14],[19,4,19,2,"error"],[19,9,19,7],[19,11,19,9],[19,18,19,16],[20,4,20,2,"fatal"],[20,9,20,7],[20,11,20,9],[21,2,21,0],[21,3,21,1],[22,2,23,0],[22,6,23,4,"warningHandler"],[22,20,23,46],[22,23,23,49],[22,27,23,53],[23,2,25,0],[23,6,25,6,"RCTLog"],[23,12,25,12],[23,15,25,15],[24,4,26,2],[25,4,27,2,"logIfNoNativeHook"],[25,21,27,19,"logIfNoNativeHook"],[25,22,27,20,"level"],[25,27,27,33],[25,29,27,64],[26,6,27,64],[26,15,27,64,"_len"],[26,19,27,64],[26,22,27,64,"arguments"],[26,31,27,64],[26,32,27,64,"length"],[26,38,27,64],[26,40,27,38,"args"],[26,44,27,42],[26,51,27,42,"Array"],[26,56,27,42],[26,57,27,42,"_len"],[26,61,27,42],[26,68,27,42,"_len"],[26,72,27,42],[26,83,27,42,"_key"],[26,87,27,42],[26,93,27,42,"_key"],[26,97,27,42],[26,100,27,42,"_len"],[26,104,27,42],[26,106,27,42,"_key"],[26,110,27,42],[27,8,27,38,"args"],[27,12,27,42],[27,13,27,42,"_key"],[27,17,27,42],[27,25,27,42,"arguments"],[27,34,27,42],[27,35,27,42,"_key"],[27,39,27,42],[28,6,27,42],[29,6,28,4],[30,6,29,4],[30,10,29,8],[30,17,29,15,"global"],[30,23,29,21],[30,24,29,22,"nativeLoggingHook"],[30,41,29,39],[30,46,29,44],[30,57,29,55],[30,59,29,57],[31,8,30,6,"RCTLog"],[31,14,30,12],[31,15,30,13,"logToConsole"],[31,27,30,25],[31,28,30,26,"level"],[31,33,30,31],[31,35,30,33],[31,38,30,36,"args"],[31,42,30,40],[31,43,30,41],[32,6,31,4],[32,7,31,5],[32,13,31,11],[33,8,32,6],[34,8,33,6],[34,12,33,10,"warningHandler"],[34,26,33,24],[34,30,33,28,"level"],[34,35,33,33],[34,40,33,38],[34,46,33,44],[34,48,33,46],[35,10,34,8,"warningHandler"],[35,24,34,22],[35,25,34,23],[35,28,34,26,"args"],[35,32,34,30],[35,33,34,31],[36,8,35,6],[37,6,36,4],[38,4,37,2],[38,5,37,3],[39,4,39,2],[40,4,40,2,"logToConsole"],[40,16,40,14,"logToConsole"],[40,17,40,15,"level"],[40,22,40,28],[40,24,40,59],[41,6,41,4],[42,6,42,4],[42,10,42,10,"logFn"],[42,15,42,15],[42,18,42,18,"levelsMap"],[42,27,42,27],[42,28,42,28,"level"],[42,33,42,33],[42,34,42,34],[43,6,43,4,"invariant"],[43,15,43,13],[43,16,44,6,"logFn"],[43,21,44,11],[43,23,45,6],[43,32,45,15],[43,35,45,18,"level"],[43,40,45,23],[43,43,45,26],[43,58,45,41],[43,61,45,44,"Object"],[43,67,45,50],[43,68,45,51,"keys"],[43,72,45,55],[43,73,45,56,"levelsMap"],[43,82,45,65],[43,83,45,66],[43,84,45,67,"toString"],[43,92,45,75],[43,93,45,76],[43,94,46,4],[43,95,46,5],[44,6,46,6],[44,15,46,6,"_len2"],[44,20,46,6],[44,23,46,6,"arguments"],[44,32,46,6],[44,33,46,6,"length"],[44,39,46,6],[44,41,40,33,"args"],[44,45,40,37],[44,52,40,37,"Array"],[44,57,40,37],[44,58,40,37,"_len2"],[44,63,40,37],[44,70,40,37,"_len2"],[44,75,40,37],[44,86,40,37,"_key2"],[44,91,40,37],[44,97,40,37,"_key2"],[44,102,40,37],[44,105,40,37,"_len2"],[44,110,40,37],[44,112,40,37,"_key2"],[44,117,40,37],[45,8,40,33,"args"],[45,12,40,37],[45,13,40,37,"_key2"],[45,18,40,37],[45,26,40,37,"arguments"],[45,35,40,37],[45,36,40,37,"_key2"],[45,41,40,37],[46,6,40,37],[47,6,48,4,"console"],[47,13,48,11],[47,14,48,12,"logFn"],[47,19,48,17],[47,20,48,18],[47,21,48,19],[47,24,48,22,"args"],[47,28,48,26],[47,29,48,27],[48,4,49,2],[48,5,49,3],[49,4,51,2,"setWarningHandler"],[49,21,51,19,"setWarningHandler"],[49,22,51,20,"handler"],[49,29,51,50],[49,31,51,58],[50,6,52,4,"warningHandler"],[50,20,52,18],[50,23,52,21,"handler"],[50,30,52,28],[51,4,53,2],[52,2,54,0],[52,3,54,1],[53,2,56,0,"module"],[53,8,56,6],[53,9,56,7,"exports"],[53,16,56,14],[53,19,56,17,"RCTLog"],[53,25,56,23],[54,0,56,24],[54,3]],"functionMap":{"names":["<global>","logIfNoNativeHook","logToConsole","setWarningHandler"],"mappings":"AAA;EC0B;GDU;EEG;GFS;EGE;GHE"}},"type":"js/module"}]}