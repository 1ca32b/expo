{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":49,"column":44,"index":2382}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./fork/getPathFromState","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":27,"index":177},"end":{"line":4,"column":61,"index":211}}],"key":"cWUNdDdPh9uB2D4/6cLRNMomiqg="}},{"name":"./fork/getStateFromPath","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":27,"index":240},"end":{"line":5,"column":61,"index":274}}],"key":"M+bvYask+xc50IathpbkVJRQuyg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getNormalizedStatePath = exports.getRouteInfoFromState = void 0;\n  var getPathFromState_1 = _$$_REQUIRE(_dependencyMap[1], \"./fork/getPathFromState\");\n  var getStateFromPath_1 = _$$_REQUIRE(_dependencyMap[2], \"./fork/getStateFromPath\");\n  function getRouteInfoFromState(getPathFromState, state, baseUrl) {\n    var _getPathFromState = getPathFromState(state, false),\n      path = _getPathFromState.path;\n    var qualified = getPathFromState(state, true);\n    return {\n      // TODO: This may have a predefined origin attached in the future.\n      unstable_globalHref: path,\n      pathname: (0, getStateFromPath_1.stripBaseUrl)(path, baseUrl).split('?')['0'],\n      isIndex: isIndexPath(state),\n      ...getNormalizedStatePath(qualified, baseUrl)\n    };\n  }\n  exports.getRouteInfoFromState = getRouteInfoFromState;\n  function isIndexPath(state) {\n    var route = state.routes[state.index ?? state.routes.length - 1];\n    if (route.state) {\n      return isIndexPath(route.state);\n    }\n    // Index routes on the same level as a layout do not have `index` in their name\n    if (route.params && 'screen' in route.params) {\n      return route.params.screen === 'index';\n    }\n    // The `params` key will not exist if there are no params\n    // So we need to do a positive lookahead to check if the route ends with /index\n    // Nested routes that are hoisted will have a name ending with /index\n    // e.g name could be /user/[id]/index\n    if (route.name.match(/.+\\/index$/)) return true;\n    // The state will either have params (because there are multiple _layout) or it will be hoisted with a name\n    // If we don't match the above cases, then it's not an index route\n    return false;\n  }\n  // TODO: Split up getPathFromState to return all this info at once.\n  function getNormalizedStatePath(_ref, baseUrl) {\n    var statePath = _ref.path,\n      params = _ref.params;\n    var _statePath$split = statePath.split('?'),\n      _statePath$split2 = _slicedToArray(_statePath$split, 1),\n      pathname = _statePath$split2[0];\n    return {\n      // Strip empty path at the start\n      segments: (0, getStateFromPath_1.stripBaseUrl)(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n      // TODO: This is not efficient, we should generate based on the state instead\n      // of converting to string then back to object\n      params: (0, getPathFromState_1.decodeParams)(params)\n    };\n  }\n  exports.getNormalizedStatePath = getNormalizedStatePath;\n});","lineCount":58,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"_$$_REQUIRE"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"getNormalizedStatePath"],[8,32,3,30],[8,35,3,33,"exports"],[8,42,3,40],[8,43,3,41,"getRouteInfoFromState"],[8,64,3,62],[8,67,3,65],[8,72,3,70],[8,73,3,71],[9,2,4,0],[9,6,4,6,"getPathFromState_1"],[9,24,4,24],[9,27,4,27,"require"],[9,38,4,34],[9,39,4,34,"_dependencyMap"],[9,53,4,34],[9,83,4,60],[9,84,4,61],[10,2,5,0],[10,6,5,6,"getStateFromPath_1"],[10,24,5,24],[10,27,5,27,"require"],[10,38,5,34],[10,39,5,34,"_dependencyMap"],[10,53,5,34],[10,83,5,60],[10,84,5,61],[11,2,6,0],[11,11,6,9,"getRouteInfoFromState"],[11,32,6,30,"getRouteInfoFromState"],[11,33,6,31,"getPathFromState"],[11,49,6,47],[11,51,6,49,"state"],[11,56,6,54],[11,58,6,56,"baseUrl"],[11,65,6,63],[11,67,6,65],[12,4,7,4],[12,8,7,4,"_getPathFromState"],[12,25,7,4],[12,28,7,21,"getPathFromState"],[12,44,7,37],[12,45,7,38,"state"],[12,50,7,43],[12,52,7,45],[12,57,7,50],[12,58,7,51],[13,6,7,12,"path"],[13,10,7,16],[13,13,7,16,"_getPathFromState"],[13,30,7,16],[13,31,7,12,"path"],[13,35,7,16],[14,4,8,4],[14,8,8,10,"qualified"],[14,17,8,19],[14,20,8,22,"getPathFromState"],[14,36,8,38],[14,37,8,39,"state"],[14,42,8,44],[14,44,8,46],[14,48,8,50],[14,49,8,51],[15,4,9,4],[15,11,9,11],[16,6,10,8],[17,6,11,8,"unstable_globalHref"],[17,25,11,27],[17,27,11,29,"path"],[17,31,11,33],[18,6,12,8,"pathname"],[18,14,12,16],[18,16,12,18],[18,17,12,19],[18,18,12,20],[18,20,12,22,"getStateFromPath_1"],[18,38,12,40],[18,39,12,41,"stripBaseUrl"],[18,51,12,53],[18,53,12,55,"path"],[18,57,12,59],[18,59,12,61,"baseUrl"],[18,66,12,68],[18,67,12,69],[18,68,12,70,"split"],[18,73,12,75],[18,74,12,76],[18,77,12,79],[18,78,12,80],[18,79,12,81],[18,82,12,84],[18,83,12,85],[19,6,13,8,"isIndex"],[19,13,13,15],[19,15,13,17,"isIndexPath"],[19,26,13,28],[19,27,13,29,"state"],[19,32,13,34],[19,33,13,35],[20,6,14,8],[20,9,14,11,"getNormalizedStatePath"],[20,31,14,33],[20,32,14,34,"qualified"],[20,41,14,43],[20,43,14,45,"baseUrl"],[20,50,14,52],[21,4,15,4],[21,5,15,5],[22,2,16,0],[23,2,17,0,"exports"],[23,9,17,7],[23,10,17,8,"getRouteInfoFromState"],[23,31,17,29],[23,34,17,32,"getRouteInfoFromState"],[23,55,17,53],[24,2,18,0],[24,11,18,9,"isIndexPath"],[24,22,18,20,"isIndexPath"],[24,23,18,21,"state"],[24,28,18,26],[24,30,18,28],[25,4,19,4],[25,8,19,10,"route"],[25,13,19,15],[25,16,19,18,"state"],[25,21,19,23],[25,22,19,24,"routes"],[25,28,19,30],[25,29,19,31,"state"],[25,34,19,36],[25,35,19,37,"index"],[25,40,19,42],[25,44,19,46,"state"],[25,49,19,51],[25,50,19,52,"routes"],[25,56,19,58],[25,57,19,59,"length"],[25,63,19,65],[25,66,19,68],[25,67,19,69],[25,68,19,70],[26,4,20,4],[26,8,20,8,"route"],[26,13,20,13],[26,14,20,14,"state"],[26,19,20,19],[26,21,20,21],[27,6,21,8],[27,13,21,15,"isIndexPath"],[27,24,21,26],[27,25,21,27,"route"],[27,30,21,32],[27,31,21,33,"state"],[27,36,21,38],[27,37,21,39],[28,4,22,4],[29,4,23,4],[30,4,24,4],[30,8,24,8,"route"],[30,13,24,13],[30,14,24,14,"params"],[30,20,24,20],[30,24,24,24],[30,32,24,32],[30,36,24,36,"route"],[30,41,24,41],[30,42,24,42,"params"],[30,48,24,48],[30,50,24,50],[31,6,25,8],[31,13,25,15,"route"],[31,18,25,20],[31,19,25,21,"params"],[31,25,25,27],[31,26,25,28,"screen"],[31,32,25,34],[31,37,25,39],[31,44,25,46],[32,4,26,4],[33,4,27,4],[34,4,28,4],[35,4,29,4],[36,4,30,4],[37,4,31,4],[37,8,31,8,"route"],[37,13,31,13],[37,14,31,14,"name"],[37,18,31,18],[37,19,31,19,"match"],[37,24,31,24],[37,25,31,25],[37,37,31,37],[37,38,31,38],[37,40,32,8],[37,47,32,15],[37,51,32,19],[38,4,33,4],[39,4,34,4],[40,4,35,4],[40,11,35,11],[40,16,35,16],[41,2,36,0],[42,2,37,0],[43,2,38,0],[43,11,38,9,"getNormalizedStatePath"],[43,33,38,31,"getNormalizedStatePath"],[43,34,38,31,"_ref"],[43,38,38,31],[43,40,38,62,"baseUrl"],[43,47,38,69],[43,49,38,71],[44,4,38,71],[44,8,38,40,"statePath"],[44,17,38,49],[44,20,38,49,"_ref"],[44,24,38,49],[44,25,38,34,"path"],[44,29,38,38],[45,6,38,51,"params"],[45,12,38,57],[45,15,38,57,"_ref"],[45,19,38,57],[45,20,38,51,"params"],[45,26,38,57],[46,4,39,4],[46,8,39,4,"_statePath$split"],[46,24,39,4],[46,27,39,23,"statePath"],[46,36,39,32],[46,37,39,33,"split"],[46,42,39,38],[46,43,39,39],[46,46,39,42],[46,47,39,43],[47,6,39,43,"_statePath$split2"],[47,23,39,43],[47,26,39,43,"_slicedToArray"],[47,40,39,43],[47,41,39,43,"_statePath$split"],[47,57,39,43],[48,6,39,11,"pathname"],[48,14,39,19],[48,17,39,19,"_statePath$split2"],[48,34,39,19],[49,4,40,4],[49,11,40,11],[50,6,41,8],[51,6,42,8,"segments"],[51,14,42,16],[51,16,42,18],[51,17,42,19],[51,18,42,20],[51,20,42,22,"getStateFromPath_1"],[51,38,42,40],[51,39,42,41,"stripBaseUrl"],[51,51,42,53],[51,53,42,55,"pathname"],[51,61,42,63],[51,63,42,65,"baseUrl"],[51,70,42,72],[51,71,42,73],[51,72,42,74,"split"],[51,77,42,79],[51,78,42,80],[51,81,42,83],[51,82,42,84],[51,83,42,85,"filter"],[51,89,42,91],[51,90,42,92,"Boolean"],[51,97,42,99],[51,98,42,100],[51,99,42,101,"map"],[51,102,42,104],[51,103,42,105,"decodeURIComponent"],[51,121,42,123],[51,122,42,124],[52,6,43,8],[53,6,44,8],[54,6,45,8,"params"],[54,12,45,14],[54,14,45,16],[54,15,45,17],[54,16,45,18],[54,18,45,20,"getPathFromState_1"],[54,36,45,38],[54,37,45,39,"decodeParams"],[54,49,45,51],[54,51,45,53,"params"],[54,57,45,59],[55,4,46,4],[55,5,46,5],[56,2,47,0],[57,2,48,0,"exports"],[57,9,48,7],[57,10,48,8,"getNormalizedStatePath"],[57,32,48,30],[57,35,48,33,"getNormalizedStatePath"],[57,57,48,55],[58,0,48,56],[58,3]],"functionMap":{"names":["<global>","getRouteInfoFromState","isIndexPath","getNormalizedStatePath"],"mappings":"AAA;ACK;CDU;AEE;CFkB;AGE;CHS"}},"type":"js/module"}]}