{"dependencies":[],"output":[{"data":{"code":"(function (global) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   * @polyfill\n   */\n\n  var _inGuard = 0;\n  /**\n   * This is the error handler that is called when we encounter an exception\n   * when loading a module. This will report any errors encountered before\n   * ExceptionsManager is configured.\n   */\n  var _globalHandler = function onError(e, isFatal) {\n    throw e;\n  };\n\n  /**\n   * The particular require runtime that we are using looks for a global\n   * `ErrorUtils` object and if it exists, then it requires modules with the\n   * error handler specified via ErrorUtils.setGlobalHandler by calling the\n   * require function with applyWithGuard. Since the require module is loaded\n   * before any of the modules, this ErrorUtils must be defined (and the handler\n   * set) globally before requiring anything.\n   */\n  var ErrorUtils = {\n    setGlobalHandler(fun) {\n      _globalHandler = fun;\n    },\n    getGlobalHandler() {\n      return _globalHandler;\n    },\n    reportError(error) {\n      _globalHandler && _globalHandler(error, false);\n    },\n    reportFatalError(error) {\n      // NOTE: This has an untyped call site in Metro.\n      _globalHandler && _globalHandler(error, true);\n    },\n    applyWithGuard(fun, context, args,\n    // Unused, but some code synced from www sets it to null.\n    unused_onError,\n    // Some callers pass a name here, which we ignore.\n    unused_name) {\n      try {\n        _inGuard++;\n        /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,\n         * null) is fine. (2) array -> rest array should work */\n        /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,\n         * null) is fine. (2) array -> rest array should work */\n        return fun.apply(context, args);\n      } catch (e) {\n        ErrorUtils.reportError(e);\n      } finally {\n        _inGuard--;\n      }\n      return null;\n    },\n    applyWithGuardIfNeeded(fun, context, args) {\n      if (ErrorUtils.inGuard()) {\n        /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,\n         * null) is fine. (2) array -> rest array should work */\n        /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,\n         * null) is fine. (2) array -> rest array should work */\n        return fun.apply(context, args);\n      } else {\n        ErrorUtils.applyWithGuard(fun, context, args);\n      }\n      return null;\n    },\n    inGuard() {\n      return !!_inGuard;\n    },\n    guard(fun, name, context) {\n      // TODO: (moti) T48204753 Make sure this warning is never hit and remove it - types\n      // should be sufficient.\n      if (typeof fun !== 'function') {\n        console.warn('A function must be passed to ErrorUtils.guard, got ', fun);\n        return null;\n      }\n      var guardName = name ?? fun.name ?? '<generated guard>';\n      /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      function guarded() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return ErrorUtils.applyWithGuard(fun, context ?? this, args, null, guardName);\n      }\n      return guarded;\n    }\n  };\n  global.ErrorUtils = ErrorUtils;\n})(typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this);","lineCount":99,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[13,2,12,0],[13,6,12,4,"_inGuard"],[13,14,12,12],[13,17,12,15],[13,18,12,16],[14,2,17,0],[15,0,18,0],[16,0,19,0],[17,0,20,0],[18,0,21,0],[19,2,22,0],[19,6,22,4,"_globalHandler"],[19,20,22,32],[19,23,22,35],[19,32,22,44,"onError"],[19,39,22,51,"onError"],[19,40,23,2,"e"],[19,41,23,10],[19,43,24,2,"isFatal"],[19,50,24,18],[19,52,25,2],[20,4,26,2],[20,10,26,8,"e"],[20,11,26,9],[21,2,27,0],[21,3,27,1],[23,2,29,0],[24,0,30,0],[25,0,31,0],[26,0,32,0],[27,0,33,0],[28,0,34,0],[29,0,35,0],[30,0,36,0],[31,2,37,0],[31,6,37,6,"ErrorUtils"],[31,16,37,16],[31,19,37,19],[32,4,38,2,"setGlobalHandler"],[32,20,38,18,"setGlobalHandler"],[32,21,38,19,"fun"],[32,24,38,36],[32,26,38,44],[33,6,39,4,"_globalHandler"],[33,20,39,18],[33,23,39,21,"fun"],[33,26,39,24],[34,4,40,2],[34,5,40,3],[35,4,41,2,"getGlobalHandler"],[35,20,41,18,"getGlobalHandler"],[35,21,41,18],[35,23,41,35],[36,6,42,4],[36,13,42,11,"_globalHandler"],[36,27,42,25],[37,4,43,2],[37,5,43,3],[38,4,44,2,"reportError"],[38,15,44,13,"reportError"],[38,16,44,14,"error"],[38,21,44,26],[38,23,44,34],[39,6,45,4,"_globalHandler"],[39,20,45,18],[39,24,45,22,"_globalHandler"],[39,38,45,36],[39,39,45,37,"error"],[39,44,45,42],[39,46,45,44],[39,51,45,49],[39,52,45,50],[40,4,46,2],[40,5,46,3],[41,4,47,2,"reportFatalError"],[41,20,47,18,"reportFatalError"],[41,21,47,19,"error"],[41,26,47,31],[41,28,47,39],[42,6,48,4],[43,6,49,4,"_globalHandler"],[43,20,49,18],[43,24,49,22,"_globalHandler"],[43,38,49,36],[43,39,49,37,"error"],[43,44,49,42],[43,46,49,44],[43,50,49,48],[43,51,49,49],[44,4,50,2],[44,5,50,3],[45,4,51,2,"applyWithGuard"],[45,18,51,16,"applyWithGuard"],[45,19,52,4,"fun"],[45,22,52,24],[45,24,53,4,"context"],[45,31,53,20],[45,33,54,4,"args"],[45,37,54,17],[46,4,55,4],[47,4,56,4,"unused_onError"],[47,18,56,25],[48,4,57,4],[49,4,58,4,"unused_name"],[49,15,58,25],[49,17,59,11],[50,6,60,4],[50,10,60,8],[51,8,61,6,"_inGuard"],[51,16,61,14],[51,18,61,16],[52,8,62,6],[53,0,63,0],[54,8,64,6],[55,0,65,0],[56,8,66,6],[56,15,66,13,"fun"],[56,18,66,16],[56,19,66,17,"apply"],[56,24,66,22],[56,25,66,23,"context"],[56,32,66,30],[56,34,66,32,"args"],[56,38,66,36],[56,39,66,37],[57,6,67,4],[57,7,67,5],[57,8,67,6],[57,15,67,13,"e"],[57,16,67,14],[57,18,67,16],[58,8,68,6,"ErrorUtils"],[58,18,68,16],[58,19,68,17,"reportError"],[58,30,68,28],[58,31,68,29,"e"],[58,32,68,30],[58,33,68,31],[59,6,69,4],[59,7,69,5],[59,16,69,14],[60,8,70,6,"_inGuard"],[60,16,70,14],[60,18,70,16],[61,6,71,4],[62,6,72,4],[62,13,72,11],[62,17,72,15],[63,4,73,2],[63,5,73,3],[64,4,74,2,"applyWithGuardIfNeeded"],[64,26,74,24,"applyWithGuardIfNeeded"],[64,27,75,4,"fun"],[64,30,75,24],[64,32,76,4,"context"],[64,39,76,20],[64,41,77,4,"args"],[64,45,77,17],[64,47,78,11],[65,6,79,4],[65,10,79,8,"ErrorUtils"],[65,20,79,18],[65,21,79,19,"inGuard"],[65,28,79,26],[65,29,79,27],[65,30,79,28],[65,32,79,30],[66,8,80,6],[67,0,81,0],[68,8,82,6],[69,0,83,0],[70,8,84,6],[70,15,84,13,"fun"],[70,18,84,16],[70,19,84,17,"apply"],[70,24,84,22],[70,25,84,23,"context"],[70,32,84,30],[70,34,84,32,"args"],[70,38,84,36],[70,39,84,37],[71,6,85,4],[71,7,85,5],[71,13,85,11],[72,8,86,6,"ErrorUtils"],[72,18,86,16],[72,19,86,17,"applyWithGuard"],[72,33,86,31],[72,34,86,32,"fun"],[72,37,86,35],[72,39,86,37,"context"],[72,46,86,44],[72,48,86,46,"args"],[72,52,86,50],[72,53,86,51],[73,6,87,4],[74,6,88,4],[74,13,88,11],[74,17,88,15],[75,4,89,2],[75,5,89,3],[76,4,90,2,"inGuard"],[76,11,90,9,"inGuard"],[76,12,90,9],[76,14,90,21],[77,6,91,4],[77,13,91,11],[77,14,91,12],[77,15,91,13,"_inGuard"],[77,23,91,21],[78,4,92,2],[78,5,92,3],[79,4,93,2,"guard"],[79,9,93,7,"guard"],[79,10,94,4,"fun"],[79,13,94,24],[79,15,95,4,"name"],[79,19,95,18],[79,21,96,4,"context"],[79,28,96,20],[79,30,97,26],[80,6,98,4],[81,6,99,4],[82,6,100,4],[82,10,100,8],[82,17,100,15,"fun"],[82,20,100,18],[82,25,100,23],[82,35,100,33],[82,37,100,35],[83,8,101,6,"console"],[83,15,101,13],[83,16,101,14,"warn"],[83,20,101,18],[83,21,101,19],[83,74,101,72],[83,76,101,74,"fun"],[83,79,101,77],[83,80,101,78],[84,8,102,6],[84,15,102,13],[84,19,102,17],[85,6,103,4],[86,6,104,4],[86,10,104,10,"guardName"],[86,19,104,19],[86,22,104,22,"name"],[86,26,104,26],[86,30,104,30,"fun"],[86,33,104,33],[86,34,104,34,"name"],[86,38,104,38],[86,42,104,42],[86,61,104,61],[87,6,105,4],[88,0,106,0],[89,6,107,4],[89,15,107,13,"guarded"],[89,22,107,20,"guarded"],[89,23,107,20],[89,25,107,44],[90,8,107,44],[90,17,107,44,"_len"],[90,21,107,44],[90,24,107,44,"arguments"],[90,33,107,44],[90,34,107,44,"length"],[90,40,107,44],[90,42,107,24,"args"],[90,46,107,28],[90,53,107,28,"Array"],[90,58,107,28],[90,59,107,28,"_len"],[90,63,107,28],[90,66,107,28,"_key"],[90,70,107,28],[90,76,107,28,"_key"],[90,80,107,28],[90,83,107,28,"_len"],[90,87,107,28],[90,89,107,28,"_key"],[90,93,107,28],[91,10,107,24,"args"],[91,14,107,28],[91,15,107,28,"_key"],[91,19,107,28],[91,23,107,28,"arguments"],[91,32,107,28],[91,33,107,28,"_key"],[91,37,107,28],[92,8,107,28],[93,8,108,6],[93,15,108,13,"ErrorUtils"],[93,25,108,23],[93,26,108,24,"applyWithGuard"],[93,40,108,38],[93,41,109,8,"fun"],[93,44,109,11],[93,46,110,8,"context"],[93,53,110,15],[93,57,110,19],[93,61,110,23],[93,63,111,8,"args"],[93,67,111,12],[93,69,112,8],[93,73,112,12],[93,75,113,8,"guardName"],[93,84,114,6],[93,85,114,7],[94,6,115,4],[95,6,117,4],[95,13,117,11,"guarded"],[95,20,117,18],[96,4,118,2],[97,2,119,0],[97,3,119,1],[98,2,121,0,"global"],[98,8,121,6],[98,9,121,7,"ErrorUtils"],[98,19,121,17],[98,22,121,20,"ErrorUtils"],[98,32,121,30],[99,0,121,31],[99,10,121,31,"globalThis"],[99,20,121,31],[99,39,121,31,"globalThis"],[99,49,121,31],[99,59,121,31,"global"],[99,65,121,31],[99,84,121,31,"global"],[99,90,121,31],[99,100,121,31,"window"],[99,106,121,31],[99,125,121,31,"window"],[99,131,121,31],[99,140]],"functionMap":{"names":["<global>","onError","ErrorUtils.setGlobalHandler","ErrorUtils.getGlobalHandler","ErrorUtils.reportError","ErrorUtils.reportFatalError","ErrorUtils.applyWithGuard","ErrorUtils.applyWithGuardIfNeeded","ErrorUtils.inGuard","ErrorUtils.guard","guarded"],"mappings":"AAA;mCCqB;CDK;EEW;GFE;EGC;GHE;EIC;GJE;EKC;GLG;EMC;GNsB;EOC;GPe;EQC;GRE;ESC;ICc;KDQ;GTG"}},"type":"js/script"}]}