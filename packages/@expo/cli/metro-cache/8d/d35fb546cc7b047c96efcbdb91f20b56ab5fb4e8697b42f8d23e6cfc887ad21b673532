{"dependencies":[{"name":"./parseHermesStack","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":16,"column":25,"index":382},"end":{"line":16,"column":54,"index":411}}],"key":"+0TK05UiAfoSFoPMCSY1aPHKwYE="}},{"name":"stacktrace-parser","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":46,"column":27,"index":1193},"end":{"line":46,"column":55,"index":1221}}],"key":"/USIDQIXWvbDieir50qMEeMzgbw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var parseHermesStack = _$$_REQUIRE(_dependencyMap[0], \"./parseHermesStack\");\n  function convertHermesStack(stack) {\n    var frames = [];\n    for (var entry of stack.entries) {\n      if (entry.type !== 'FRAME') {\n        continue;\n      }\n      var location = entry.location,\n        functionName = entry.functionName;\n      if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {\n        continue;\n      }\n      frames.push({\n        methodName: functionName,\n        file: location.sourceUrl,\n        lineNumber: location.line1Based,\n        column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based\n      });\n    }\n    return frames;\n  }\n  function parseErrorStack(errorStack) {\n    if (errorStack == null) {\n      return [];\n    }\n    var stacktraceParser = _$$_REQUIRE(_dependencyMap[1], \"stacktrace-parser\");\n    var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map(frame => ({\n      ...frame,\n      column: frame.column != null ? frame.column - 1 : null\n    }));\n    return parsedStack;\n  }\n  module.exports = parseErrorStack;\n});","lineCount":47,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,16,0],[14,6,16,6,"parseHermesStack"],[14,22,16,22],[14,25,16,25,"require"],[14,36,16,32],[14,37,16,32,"_dependencyMap"],[14,51,16,32],[14,76,16,53],[14,77,16,54],[15,2,18,0],[15,11,18,9,"convertHermesStack"],[15,29,18,27,"convertHermesStack"],[15,30,18,28,"stack"],[15,35,18,52],[15,37,18,73],[16,4,19,2],[16,8,19,8,"frames"],[16,14,19,33],[16,17,19,36],[16,19,19,38],[17,4,20,2],[17,9,20,7],[17,13,20,13,"entry"],[17,18,20,18],[17,22,20,22,"stack"],[17,27,20,27],[17,28,20,28,"entries"],[17,35,20,35],[17,37,20,37],[18,6,21,4],[18,10,21,8,"entry"],[18,15,21,13],[18,16,21,14,"type"],[18,20,21,18],[18,25,21,23],[18,32,21,30],[18,34,21,32],[19,8,22,6],[20,6,23,4],[21,6,24,4],[21,10,24,11,"location"],[21,18,24,19],[21,21,24,37,"entry"],[21,26,24,42],[21,27,24,11,"location"],[21,35,24,19],[22,8,24,21,"functionName"],[22,20,24,33],[22,23,24,37,"entry"],[22,28,24,42],[22,29,24,21,"functionName"],[22,41,24,33],[23,6,25,4],[23,10,25,8,"location"],[23,18,25,16],[23,19,25,17,"type"],[23,23,25,21],[23,28,25,26],[23,36,25,34],[23,40,25,38,"location"],[23,48,25,46],[23,49,25,47,"type"],[23,53,25,51],[23,58,25,56],[23,77,25,75],[23,79,25,77],[24,8,26,6],[25,6,27,4],[26,6,28,4,"frames"],[26,12,28,10],[26,13,28,11,"push"],[26,17,28,15],[26,18,28,16],[27,8,29,6,"methodName"],[27,18,29,16],[27,20,29,18,"functionName"],[27,32,29,30],[28,8,30,6,"file"],[28,12,30,10],[28,14,30,12,"location"],[28,22,30,20],[28,23,30,21,"sourceUrl"],[28,32,30,30],[29,8,31,6,"lineNumber"],[29,18,31,16],[29,20,31,18,"location"],[29,28,31,26],[29,29,31,27,"line1Based"],[29,39,31,37],[30,8,32,6,"column"],[30,14,32,12],[30,16,33,8,"location"],[30,24,33,16],[30,25,33,17,"type"],[30,29,33,21],[30,34,33,26],[30,42,33,34],[30,45,34,12,"location"],[30,53,34,20],[30,54,34,21,"column1Based"],[30,66,34,33],[30,69,34,36],[30,70,34,37],[30,73,35,12,"location"],[30,81,35,20],[30,82,35,21,"virtualOffset0Based"],[31,6,36,4],[31,7,36,5],[31,8,36,6],[32,4,37,2],[33,4,38,2],[33,11,38,9,"frames"],[33,17,38,15],[34,2,39,0],[35,2,41,0],[35,11,41,9,"parseErrorStack"],[35,26,41,24,"parseErrorStack"],[35,27,41,25,"errorStack"],[35,37,41,44],[35,39,41,65],[36,4,42,2],[36,8,42,6,"errorStack"],[36,18,42,16],[36,22,42,20],[36,26,42,24],[36,28,42,26],[37,6,43,4],[37,13,43,11],[37,15,43,13],[38,4,44,2],[39,4,46,2],[39,8,46,8,"stacktraceParser"],[39,24,46,24],[39,27,46,27,"require"],[39,38,46,34],[39,39,46,34,"_dependencyMap"],[39,53,46,34],[39,77,46,54],[39,78,46,55],[40,4,47,2],[40,8,47,8,"parsedStack"],[40,19,47,19],[40,22,47,22,"Array"],[40,27,47,27],[40,28,47,28,"isArray"],[40,35,47,35],[40,36,47,36,"errorStack"],[40,46,47,46],[40,47,47,47],[40,50,48,6,"errorStack"],[40,60,48,16],[40,63,49,6,"global"],[40,69,49,12],[40,70,49,13,"HermesInternal"],[40,84,49,27],[40,87,50,8,"convertHermesStack"],[40,105,50,26],[40,106,50,27,"parseHermesStack"],[40,122,50,43],[40,123,50,44,"errorStack"],[40,133,50,54],[40,134,50,55],[40,135,50,56],[40,138,51,8,"stacktraceParser"],[40,154,51,24],[40,155,51,25,"parse"],[40,160,51,30],[40,161,51,31,"errorStack"],[40,171,51,41],[40,172,51,42],[40,173,51,43,"map"],[40,176,51,46],[40,177,51,48,"frame"],[40,182,51,53],[40,187,51,71],[41,6,52,10],[41,9,52,13,"frame"],[41,14,52,18],[42,6,53,10,"column"],[42,12,53,16],[42,14,53,18,"frame"],[42,19,53,23],[42,20,53,24,"column"],[42,26,53,30],[42,30,53,34],[42,34,53,38],[42,37,53,41,"frame"],[42,42,53,46],[42,43,53,47,"column"],[42,49,53,53],[42,52,53,56],[42,53,53,57],[42,56,53,60],[43,4,54,8],[43,5,54,9],[43,6,54,10],[43,7,54,11],[44,4,56,2],[44,11,56,9,"parsedStack"],[44,22,56,20],[45,2,57,0],[46,2,59,0,"module"],[46,8,59,6],[46,9,59,7,"exports"],[46,16,59,14],[46,19,59,17,"parseErrorStack"],[46,34,59,32],[47,0,59,33],[47,3]],"functionMap":{"names":["<global>","convertHermesStack","parseErrorStack","stacktraceParser.parse.map$argument_0"],"mappings":"AAA;ACiB;CDqB;AEE;+CCU;UDG;CFG"}},"type":"js/module"}]}