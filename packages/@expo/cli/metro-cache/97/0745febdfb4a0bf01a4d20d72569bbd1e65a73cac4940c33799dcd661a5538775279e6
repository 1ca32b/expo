{"dependencies":[{"name":"./ExceptionsManager","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":15,"column":0,"index":290},"end":{"line":15,"column":68,"index":358}}],"key":"dSfct/lO94rdoUbWE4YwKKwr2E8="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.onCaughtError = onCaughtError;\n  exports.onRecoverableError = onRecoverableError;\n  exports.onUncaughtError = onUncaughtError;\n  var _ExceptionsManager = _$$_REQUIRE(_dependencyMap[0], \"./ExceptionsManager\");\n  function onUncaughtError(errorValue, errorInfo) {\n    var error;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = errorValue;\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = new _ExceptionsManager.SyntheticError(errorValue);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = new _ExceptionsManager.SyntheticError('Unspecified error');\n    }\n    try {\n      // $FlowFixMe[incompatible-use] this is in try/catch.\n      error.componentStack = errorInfo.componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    // Uncaught errors are fatal.\n    (0, _ExceptionsManager.handleException)(error, true);\n  }\n  function onCaughtError(errorValue, errorInfo) {\n    var error;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = errorValue;\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = new _ExceptionsManager.SyntheticError(errorValue);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = new _ExceptionsManager.SyntheticError('Unspecified error');\n    }\n    try {\n      // $FlowFixMe[incompatible-use] this is in try/catch.\n      error.componentStack = errorInfo.componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    // Caught errors are not fatal.\n    (0, _ExceptionsManager.handleException)(error, false);\n  }\n  function onRecoverableError(errorValue, errorInfo) {\n    var error;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = errorValue;\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = new _ExceptionsManager.SyntheticError(errorValue);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = new _ExceptionsManager.SyntheticError('Unspecified error');\n    }\n    try {\n      // $FlowFixMe[incompatible-use] this is in try/catch.\n      error.componentStack = errorInfo.componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    // Recoverable errors should only be warnings.\n    // This will make it a soft error in LogBox.\n    // TODO: improve the logging for recoverable errors in prod.\n    console.warn(error);\n  }\n});","lineCount":110,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13,"Object"],[14,8,11,13],[14,9,11,13,"defineProperty"],[14,23,11,13],[14,24,11,13,"exports"],[14,31,11,13],[15,4,11,13,"value"],[15,9,11,13],[16,2,11,13],[17,2,11,13,"exports"],[17,9,11,13],[17,10,11,13,"onCaughtError"],[17,23,11,13],[17,26,11,13,"onCaughtError"],[17,39,11,13],[18,2,11,13,"exports"],[18,9,11,13],[18,10,11,13,"onRecoverableError"],[18,28,11,13],[18,31,11,13,"onRecoverableError"],[18,49,11,13],[19,2,11,13,"exports"],[19,9,11,13],[19,10,11,13,"onUncaughtError"],[19,25,11,13],[19,28,11,13,"onUncaughtError"],[19,43,11,13],[20,2,15,0],[20,6,15,0,"_ExceptionsManager"],[20,24,15,0],[20,27,15,0,"_$$_REQUIRE"],[20,38,15,0],[20,39,15,0,"_dependencyMap"],[20,53,15,0],[21,2,23,7],[21,11,23,16,"onUncaughtError"],[21,26,23,31,"onUncaughtError"],[21,27,23,32,"errorValue"],[21,37,23,49],[21,39,23,51,"errorInfo"],[21,48,23,71],[21,50,23,79],[22,4,24,2],[22,8,24,6,"error"],[22,13,24,11],[24,4,26,2],[25,4,27,2],[26,4,28,2],[26,8,28,6,"errorValue"],[26,18,28,16],[26,30,28,28,"Error"],[26,35,28,33],[26,37,28,35],[27,6,29,4],[28,0,30,0],[29,6,31,4,"error"],[29,11,31,9],[29,14,31,13,"errorValue"],[29,24,31,39],[30,4,32,2],[30,5,32,3],[30,11,32,9],[30,15,32,13],[30,22,32,20,"errorValue"],[30,32,32,30],[30,37,32,35],[30,45,32,43],[30,47,32,45],[31,6,33,4],[32,0,34,0],[33,6,35,4,"error"],[33,11,35,9],[33,14,35,13],[33,18,35,17,"SyntheticError"],[33,51,35,31],[33,52,35,32,"errorValue"],[33,62,35,42],[33,63,35,59],[34,4,36,2],[34,5,36,3],[34,11,36,9],[35,6,37,4],[36,0,38,0],[37,6,39,4,"error"],[37,11,39,9],[37,14,39,13],[37,18,39,17,"SyntheticError"],[37,51,39,31],[37,52,39,32],[37,71,39,51],[37,72,39,68],[38,4,40,2],[39,4,41,2],[39,8,41,6],[40,6,42,4],[41,6,43,4,"error"],[41,11,43,9],[41,12,43,10,"componentStack"],[41,26,43,24],[41,29,43,27,"errorInfo"],[41,38,43,36],[41,39,43,37,"componentStack"],[41,53,43,51],[42,6,44,4,"error"],[42,11,44,9],[42,12,44,10,"isComponentError"],[42,28,44,26],[42,31,44,29],[42,35,44,33],[43,4,45,2],[43,5,45,3],[43,6,45,4],[43,12,45,10],[44,6,46,4],[45,4,46,4],[47,4,49,2],[48,4,50,2],[48,8,50,2,"handleException"],[48,42,50,17],[48,44,50,18,"error"],[48,49,50,23],[48,51,50,25],[48,55,50,29],[48,56,50,30],[49,2,51,0],[50,2,53,7],[50,11,53,16,"onCaughtError"],[50,24,53,29,"onCaughtError"],[50,25,53,30,"errorValue"],[50,35,53,47],[50,37,53,49,"errorInfo"],[50,46,53,69],[50,48,53,77],[51,4,54,2],[51,8,54,6,"error"],[51,13,54,11],[53,4,56,2],[54,4,57,2],[55,4,58,2],[55,8,58,6,"errorValue"],[55,18,58,16],[55,30,58,28,"Error"],[55,35,58,33],[55,37,58,35],[56,6,59,4],[57,0,60,0],[58,6,61,4,"error"],[58,11,61,9],[58,14,61,13,"errorValue"],[58,24,61,39],[59,4,62,2],[59,5,62,3],[59,11,62,9],[59,15,62,13],[59,22,62,20,"errorValue"],[59,32,62,30],[59,37,62,35],[59,45,62,43],[59,47,62,45],[60,6,63,4],[61,0,64,0],[62,6,65,4,"error"],[62,11,65,9],[62,14,65,13],[62,18,65,17,"SyntheticError"],[62,51,65,31],[62,52,65,32,"errorValue"],[62,62,65,42],[62,63,65,59],[63,4,66,2],[63,5,66,3],[63,11,66,9],[64,6,67,4],[65,0,68,0],[66,6,69,4,"error"],[66,11,69,9],[66,14,69,13],[66,18,69,17,"SyntheticError"],[66,51,69,31],[66,52,69,32],[66,71,69,51],[66,72,69,68],[67,4,70,2],[68,4,71,2],[68,8,71,6],[69,6,72,4],[70,6,73,4,"error"],[70,11,73,9],[70,12,73,10,"componentStack"],[70,26,73,24],[70,29,73,27,"errorInfo"],[70,38,73,36],[70,39,73,37,"componentStack"],[70,53,73,51],[71,6,74,4,"error"],[71,11,74,9],[71,12,74,10,"isComponentError"],[71,28,74,26],[71,31,74,29],[71,35,74,33],[72,4,75,2],[72,5,75,3],[72,6,75,4],[72,12,75,10],[73,6,76,4],[74,4,76,4],[76,4,79,2],[77,4,80,2],[77,8,80,2,"handleException"],[77,42,80,17],[77,44,80,18,"error"],[77,49,80,23],[77,51,80,25],[77,56,80,30],[77,57,80,31],[78,2,81,0],[79,2,83,7],[79,11,83,16,"onRecoverableError"],[79,29,83,34,"onRecoverableError"],[79,30,84,2,"errorValue"],[79,40,84,19],[79,42,85,2,"errorInfo"],[79,51,85,22],[79,53,86,8],[80,4,87,2],[80,8,87,6,"error"],[80,13,87,11],[82,4,89,2],[83,4,90,2],[84,4,91,2],[84,8,91,6,"errorValue"],[84,18,91,16],[84,30,91,28,"Error"],[84,35,91,33],[84,37,91,35],[85,6,92,4],[86,0,93,0],[87,6,94,4,"error"],[87,11,94,9],[87,14,94,13,"errorValue"],[87,24,94,39],[88,4,95,2],[88,5,95,3],[88,11,95,9],[88,15,95,13],[88,22,95,20,"errorValue"],[88,32,95,30],[88,37,95,35],[88,45,95,43],[88,47,95,45],[89,6,96,4],[90,0,97,0],[91,6,98,4,"error"],[91,11,98,9],[91,14,98,13],[91,18,98,17,"SyntheticError"],[91,51,98,31],[91,52,98,32,"errorValue"],[91,62,98,42],[91,63,98,59],[92,4,99,2],[92,5,99,3],[92,11,99,9],[93,6,100,4],[94,0,101,0],[95,6,102,4,"error"],[95,11,102,9],[95,14,102,13],[95,18,102,17,"SyntheticError"],[95,51,102,31],[95,52,102,32],[95,71,102,51],[95,72,102,68],[96,4,103,2],[97,4,104,2],[97,8,104,6],[98,6,105,4],[99,6,106,4,"error"],[99,11,106,9],[99,12,106,10,"componentStack"],[99,26,106,24],[99,29,106,27,"errorInfo"],[99,38,106,36],[99,39,106,37,"componentStack"],[99,53,106,51],[100,6,107,4,"error"],[100,11,107,9],[100,12,107,10,"isComponentError"],[100,28,107,26],[100,31,107,29],[100,35,107,33],[101,4,108,2],[101,5,108,3],[101,6,108,4],[101,12,108,10],[102,6,109,4],[103,4,109,4],[105,4,112,2],[106,4,113,2],[107,4,114,2],[108,4,115,2,"console"],[108,11,115,9],[108,12,115,10,"warn"],[108,16,115,14],[108,17,115,15,"error"],[108,22,115,20],[108,23,115,21],[109,2,116,0],[110,0,116,1],[110,3]],"functionMap":{"names":["<global>","onUncaughtError","onCaughtError","onRecoverableError"],"mappings":"AAA;OCsB;CD4B;OEE;CF4B;OGE;CHiC"}},"type":"js/module"}]}