{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/classPrivateFieldLooseBase","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"jMONaMrLKWyW98OXtOcLrGqurmM="}},{"name":"@babel/runtime/helpers/classPrivateFieldLooseKey","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"qTmzI90+V4e5n8oYrMtPGytmrV0="}},{"name":"../../../../Libraries/Utilities/warnOnce","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":13,"column":0,"index":303},"end":{"line":13,"column":64,"index":367}}],"key":"Ghh5qlfuZKYys9QXlkSDlK8AUjk="}},{"name":"./PerformanceEntry","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":14,"column":0,"index":368},"end":{"line":14,"column":52,"index":420}}],"key":"limm2T+T1Tv0g3goGjXkwAZT0/A="}},{"name":"./PerformanceEventTiming","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":15,"column":0,"index":421},"end":{"line":15,"column":62,"index":483}}],"key":"JgH87HqTtba/7D9cnIh1vqbgoIs="}},{"name":"./RawPerformanceEntry","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":16,"column":0,"index":484},"end":{"line":20,"column":31,"index":607}}],"key":"zrkCAbiGCMzHpBgnI/Ykq8YEer4="}},{"name":"./specs/NativePerformanceObserver","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":21,"column":0,"index":608},"end":{"line":21,"column":74,"index":682}}],"key":"e5cFiNYK24FFj+OBvYsOcKKfpSs="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"PerformanceEntry\", {\n    enumerable: true,\n    get: function () {\n      return _PerformanceEntry.PerformanceEntry;\n    }\n  });\n  Object.defineProperty(exports, \"PerformanceEventTiming\", {\n    enumerable: true,\n    get: function () {\n      return _PerformanceEventTiming.default;\n    }\n  });\n  exports.default = exports.PerformanceObserverEntryList = void 0;\n  exports.warnNoNativePerformanceObserver = warnNoNativePerformanceObserver;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _classPrivateFieldLooseBase2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n  var _classPrivateFieldLooseKey2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n  var _warnOnce = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"../../../../Libraries/Utilities/warnOnce\"));\n  var _PerformanceEntry = _$$_REQUIRE(_dependencyMap[7], \"./PerformanceEntry\");\n  var _PerformanceEventTiming = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"./PerformanceEventTiming\"));\n  var _RawPerformanceEntry = _$$_REQUIRE(_dependencyMap[9], \"./RawPerformanceEntry\");\n  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"./specs/NativePerformanceObserver\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n  var _entries = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"entries\");\n  var PerformanceObserverEntryList = exports.PerformanceObserverEntryList = /*#__PURE__*/function () {\n    function PerformanceObserverEntryList(entries) {\n      (0, _classCallCheck2.default)(this, PerformanceObserverEntryList);\n      Object.defineProperty(this, _entries, {\n        writable: true,\n        value: void 0\n      });\n      (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries] = entries;\n    }\n    return (0, _createClass2.default)(PerformanceObserverEntryList, [{\n      key: \"getEntries\",\n      value: function getEntries() {\n        return (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries];\n      }\n    }, {\n      key: \"getEntriesByType\",\n      value: function getEntriesByType(type) {\n        return (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries].filter(entry => entry.entryType === type);\n      }\n    }, {\n      key: \"getEntriesByName\",\n      value: function getEntriesByName(name, type) {\n        if (type === undefined) {\n          return (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries].filter(entry => entry.name === name);\n        } else {\n          return (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries].filter(entry => entry.name === name && entry.entryType === type);\n        }\n      }\n    }]);\n  }();\n  var observerCountPerEntryType = new Map();\n  var registeredObservers = new Map();\n  var isOnPerformanceEntryCallbackSet = false;\n\n  // This is a callback that gets scheduled and periodically called from the native side\n  var onPerformanceEntry = () => {\n    if (!_NativePerformanceObserver.default) {\n      return;\n    }\n    var entryResult = _NativePerformanceObserver.default.popPendingEntries();\n    var rawEntries = entryResult?.entries ?? [];\n    var droppedEntriesCount = entryResult?.droppedEntriesCount;\n    if (rawEntries.length === 0) {\n      return;\n    }\n    var entries = rawEntries.map(_RawPerformanceEntry.rawToPerformanceEntry);\n    var _loop = function (observerConfig) {\n      var entriesForObserver = entries.filter(entry => {\n        if (!observerConfig.entryTypes.has(entry.entryType)) {\n          return false;\n        }\n        var durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n        return entry.duration >= (durationThreshold ?? 0);\n      });\n      if (entriesForObserver.length !== 0) {\n        try {\n          observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), _observer, droppedEntriesCount);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    };\n    for (var _ref of registeredObservers.entries()) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n      var _observer = _ref2[0];\n      var observerConfig = _ref2[1];\n      _loop(observerConfig);\n    }\n  };\n  function warnNoNativePerformanceObserver() {\n    (0, _warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');\n  }\n  function applyDurationThresholds() {\n    var durationThresholds = Array.from(registeredObservers.values()).map(config => config.entryTypes).reduce((accumulator, currentValue) => union(accumulator, currentValue), new Map());\n    for (var _ref3 of durationThresholds) {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);\n      var entryType = _ref4[0];\n      var durationThreshold = _ref4[1];\n      _NativePerformanceObserver.default?.setDurationThreshold((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType), durationThreshold ?? 0);\n    }\n  }\n  function getSupportedPerformanceEntryTypes() {\n    if (!_NativePerformanceObserver.default) {\n      return Object.freeze([]);\n    }\n    if (!_NativePerformanceObserver.default.getSupportedPerformanceEntryTypes) {\n      // fallback if getSupportedPerformanceEntryTypes is not defined on native side\n      return Object.freeze(['mark', 'measure', 'event']);\n    }\n    return Object.freeze(_NativePerformanceObserver.default.getSupportedPerformanceEntryTypes().map(_RawPerformanceEntry.rawToPerformanceEntryType));\n  }\n\n  /**\n   * Implementation of the PerformanceObserver interface for RN,\n   * corresponding to the standard in https://www.w3.org/TR/performance-timeline/\n   *\n   * @example\n   * const observer = new PerformanceObserver((list, _observer) => {\n   *   const entries = list.getEntries();\n   *   entries.forEach(entry => {\n   *     reportEvent({\n   *       eventName: entry.name,\n   *       startTime: entry.startTime,\n   *       endTime: entry.startTime + entry.duration,\n   *       processingStart: entry.processingStart,\n   *       processingEnd: entry.processingEnd,\n   *       interactionId: entry.interactionId,\n   *     });\n   *   });\n   * });\n   * observer.observe({ type: \"event\" });\n   */\n  var _callback = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"callback\");\n  var _type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"type\");\n  var _validateObserveOptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"validateObserveOptions\");\n  var PerformanceObserver = exports.default = /*#__PURE__*/function () {\n    function PerformanceObserver(callback) {\n      (0, _classCallCheck2.default)(this, PerformanceObserver);\n      Object.defineProperty(this, _validateObserveOptions, {\n        value: _validateObserveOptions2\n      });\n      Object.defineProperty(this, _callback, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _type, {\n        writable: true,\n        value: void 0\n      });\n      (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback] = callback;\n    }\n    return (0, _createClass2.default)(PerformanceObserver, [{\n      key: \"observe\",\n      value: function observe(options) {\n        if (!_NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        (0, _classPrivateFieldLooseBase2.default)(this, _validateObserveOptions)[_validateObserveOptions](options);\n        var requestedEntryTypes;\n        if (options.entryTypes) {\n          (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = 'multiple';\n          requestedEntryTypes = new Map(options.entryTypes.map(t => [t, undefined]));\n        } else {\n          (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = 'single';\n          requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);\n        }\n\n        // The same observer may receive multiple calls to \"observe\", so we need\n        // to check what is new on this call vs. previous ones.\n        var currentEntryTypes = registeredObservers.get(this)?.entryTypes;\n        var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;\n\n        // This `observe` call is a no-op because there are no new things to observe.\n        if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n          return;\n        }\n        registeredObservers.set(this, {\n          callback: (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback],\n          entryTypes: nextEntryTypes\n        });\n        if (!isOnPerformanceEntryCallbackSet) {\n          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);\n          isOnPerformanceEntryCallbackSet = true;\n        }\n\n        // We only need to start listenening to new entry types being observed in\n        // this observer.\n        var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());\n        for (var type of newEntryTypes) {\n          if (!observerCountPerEntryType.has(type)) {\n            var rawType = (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type);\n            _NativePerformanceObserver.default.startReporting(rawType);\n          }\n          observerCountPerEntryType.set(type, (observerCountPerEntryType.get(type) ?? 0) + 1);\n        }\n        applyDurationThresholds();\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        if (!_NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        var observerConfig = registeredObservers.get(this);\n        if (!observerConfig) {\n          return;\n        }\n\n        // Disconnect this observer\n        for (var type of observerConfig.entryTypes.keys()) {\n          var numberOfObserversForThisType = observerCountPerEntryType.get(type) ?? 0;\n          if (numberOfObserversForThisType === 1) {\n            observerCountPerEntryType.delete(type);\n            _NativePerformanceObserver.default.stopReporting((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(type));\n          } else if (numberOfObserversForThisType !== 0) {\n            observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n          }\n        }\n\n        // Disconnect all observers if this was the last one\n        registeredObservers.delete(this);\n        if (registeredObservers.size === 0) {\n          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);\n          isOnPerformanceEntryCallbackSet = false;\n        }\n        applyDurationThresholds();\n      }\n    }]);\n  }(); // As a Set union, except if value exists in both, we take minimum\n  function _validateObserveOptions2(options) {\n    var type = options.type,\n      entryTypes = options.entryTypes,\n      durationThreshold = options.durationThreshold;\n    if (!type && !entryTypes) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\");\n    }\n    if (entryTypes && type) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\");\n    }\n    if ((0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] === 'multiple' && type) {\n      throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\");\n    }\n    if ((0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] === 'single' && entryTypes) {\n      throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\");\n    }\n    if (entryTypes && durationThreshold !== undefined) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\");\n    }\n  }\n  PerformanceObserver.supportedEntryTypes = getSupportedPerformanceEntryTypes();\n  function union(a, b) {\n    var res = new Map();\n    for (var _ref5 of a) {\n      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);\n      var k = _ref6[0];\n      var v = _ref6[1];\n      if (!b.has(k)) {\n        res.set(k, v);\n      } else {\n        res.set(k, Math.min(v ?? 0, b.get(k) ?? 0));\n      }\n    }\n    return res;\n  }\n  function difference(a, b) {\n    return new Set([...a].filter(x => !b.has(x)));\n  }\n});","lineCount":289,"map":[[25,2,13,0],[25,6,13,0,"_warnOnce"],[25,15,13,0],[25,18,13,0,"_interopRequireDefault"],[25,40,13,0],[25,41,13,0,"_$$_REQUIRE"],[25,52,13,0],[25,53,13,0,"_dependencyMap"],[25,67,13,0],[26,2,14,0],[26,6,14,0,"_PerformanceEntry"],[26,23,14,0],[26,26,14,0,"_$$_REQUIRE"],[26,37,14,0],[26,38,14,0,"_dependencyMap"],[26,52,14,0],[27,2,15,0],[27,6,15,0,"_PerformanceEventTiming"],[27,29,15,0],[27,32,15,0,"_interopRequireDefault"],[27,54,15,0],[27,55,15,0,"_$$_REQUIRE"],[27,66,15,0],[27,67,15,0,"_dependencyMap"],[27,81,15,0],[28,2,16,0],[28,6,16,0,"_RawPerformanceEntry"],[28,26,16,0],[28,29,16,0,"_$$_REQUIRE"],[28,40,16,0],[28,41,16,0,"_dependencyMap"],[28,55,16,0],[29,2,21,0],[29,6,21,0,"_NativePerformanceObserver"],[29,32,21,0],[29,35,21,0,"_interopRequireDefault"],[29,57,21,0],[29,58,21,0,"_$$_REQUIRE"],[29,69,21,0],[29,70,21,0,"_dependencyMap"],[29,84,21,0],[30,2,1,0],[31,0,2,0],[32,0,3,0],[33,0,4,0],[34,0,5,0],[35,0,6,0],[36,0,7,0],[37,0,8,0],[38,0,9,0],[39,2,1,0],[39,6,1,0,"_entries"],[39,14,1,0],[39,34,1,0,"_classPrivateFieldLooseKey2"],[39,61,1,0],[39,62,1,0,"default"],[39,69,1,0],[40,2,1,0],[40,6,27,13,"PerformanceObserverEntryList"],[40,34,27,41],[40,37,27,41,"exports"],[40,44,27,41],[40,45,27,41,"PerformanceObserverEntryList"],[40,73,27,41],[41,4,30,2],[41,13,30,2,"PerformanceObserverEntryList"],[41,42,30,14,"entries"],[41,49,30,43],[41,51,30,45],[42,6,30,45],[42,10,30,45,"_classCallCheck2"],[42,26,30,45],[42,27,30,45,"default"],[42,34,30,45],[42,42,30,45,"PerformanceObserverEntryList"],[42,70,30,45],[43,6,30,45,"Object"],[43,12,30,45],[43,13,30,45,"defineProperty"],[43,27,30,45],[43,34,30,45,"_entries"],[43,42,30,45],[44,8,30,45,"writable"],[44,16,30,45],[45,8,30,45,"value"],[45,13,30,45],[46,6,30,45],[47,6,31,4],[47,10,31,4,"_classPrivateFieldLooseBase2"],[47,38,31,4],[47,39,31,4,"default"],[47,46,31,4],[47,52,31,8],[47,54,31,8,"_entries"],[47,62,31,8],[47,64,31,8,"_entries"],[47,72,31,8],[47,76,31,20,"entries"],[47,83,31,27],[48,4,32,2],[49,4,32,3],[49,15,32,3,"_createClass2"],[49,28,32,3],[49,29,32,3,"default"],[49,36,32,3],[49,38,32,3,"PerformanceObserverEntryList"],[49,66,32,3],[50,6,32,3,"key"],[50,9,32,3],[51,6,32,3,"value"],[51,11,32,3],[51,13,34,2],[51,22,34,2,"getEntries"],[51,32,34,12,"getEntries"],[51,33,34,12],[51,35,34,37],[52,8,35,4],[52,19,35,4,"_classPrivateFieldLooseBase2"],[52,47,35,4],[52,48,35,4,"default"],[52,55,35,4],[52,57,35,11],[52,61,35,15],[52,63,35,15,"_entries"],[52,71,35,15],[52,73,35,15,"_entries"],[52,81,35,15],[53,6,36,2],[54,4,36,3],[55,6,36,3,"key"],[55,9,36,3],[56,6,36,3,"value"],[56,11,36,3],[56,13,38,2],[56,22,38,2,"getEntriesByType"],[56,38,38,18,"getEntriesByType"],[56,39,38,19,"type"],[56,43,38,45],[56,45,38,69],[57,8,39,4],[57,15,39,11],[57,19,39,11,"_classPrivateFieldLooseBase2"],[57,47,39,11],[57,48,39,11,"default"],[57,55,39,11],[57,61,39,15],[57,63,39,15,"_entries"],[57,71,39,15],[57,73,39,15,"_entries"],[57,81,39,15],[57,83,39,25,"filter"],[57,89,39,31],[57,90,39,32,"entry"],[57,95,39,37],[57,99,39,41,"entry"],[57,104,39,46],[57,105,39,47,"entryType"],[57,114,39,56],[57,119,39,61,"type"],[57,123,39,65],[57,124,39,66],[58,6,40,2],[59,4,40,3],[60,6,40,3,"key"],[60,9,40,3],[61,6,40,3,"value"],[61,11,40,3],[61,13,42,2],[61,22,42,2,"getEntriesByName"],[61,38,42,18,"getEntriesByName"],[61,39,43,4,"name"],[61,43,43,16],[61,45,44,4,"type"],[61,49,44,31],[61,51,45,26],[62,8,46,4],[62,12,46,8,"type"],[62,16,46,12],[62,21,46,17,"undefined"],[62,30,46,26],[62,32,46,28],[63,10,47,6],[63,17,47,13],[63,21,47,13,"_classPrivateFieldLooseBase2"],[63,49,47,13],[63,50,47,13,"default"],[63,57,47,13],[63,63,47,17],[63,65,47,17,"_entries"],[63,73,47,17],[63,75,47,17,"_entries"],[63,83,47,17],[63,85,47,27,"filter"],[63,91,47,33],[63,92,47,34,"entry"],[63,97,47,39],[63,101,47,43,"entry"],[63,106,47,48],[63,107,47,49,"name"],[63,111,47,53],[63,116,47,58,"name"],[63,120,47,62],[63,121,47,63],[64,8,48,4],[64,9,48,5],[64,15,48,11],[65,10,49,6],[65,17,49,13],[65,21,49,13,"_classPrivateFieldLooseBase2"],[65,49,49,13],[65,50,49,13,"default"],[65,57,49,13],[65,63,49,17],[65,65,49,17,"_entries"],[65,73,49,17],[65,75,49,17,"_entries"],[65,83,49,17],[65,85,49,27,"filter"],[65,91,49,33],[65,92,50,8,"entry"],[65,97,50,13],[65,101,50,17,"entry"],[65,106,50,22],[65,107,50,23,"name"],[65,111,50,27],[65,116,50,32,"name"],[65,120,50,36],[65,124,50,40,"entry"],[65,129,50,45],[65,130,50,46,"entryType"],[65,139,50,55],[65,144,50,60,"type"],[65,148,51,6],[65,149,51,7],[66,8,52,4],[67,6,53,2],[68,4,53,3],[69,2,53,3],[70,2,78,0],[70,6,78,6,"observerCountPerEntryType"],[70,31,78,66],[70,34,78,69],[70,38,78,73,"Map"],[70,41,78,76],[70,42,78,77],[70,43,78,78],[71,2,79,0],[71,6,79,6,"registeredObservers"],[71,25,79,78],[71,28,80,2],[71,32,80,6,"Map"],[71,35,80,9],[71,36,80,10],[71,37,80,11],[72,2,81,0],[72,6,81,4,"isOnPerformanceEntryCallbackSet"],[72,37,81,44],[72,40,81,47],[72,45,81,52],[74,2,83,0],[75,2,84,0],[75,6,84,6,"onPerformanceEntry"],[75,24,84,24],[75,27,84,27,"onPerformanceEntry"],[75,28,84,27],[75,33,84,33],[76,4,85,2],[76,8,85,6],[76,9,85,7,"NativePerformanceObserver"],[76,43,85,32],[76,45,85,34],[77,6,86,4],[78,4,87,2],[79,4,88,2],[79,8,88,8,"entryResult"],[79,19,88,19],[79,22,88,22,"NativePerformanceObserver"],[79,56,88,47],[79,57,88,48,"popPendingEntries"],[79,74,88,65],[79,75,88,66],[79,76,88,67],[80,4,89,2],[80,8,89,8,"rawEntries"],[80,18,89,18],[80,21,89,21,"entryResult"],[80,32,89,32],[80,34,89,34,"entries"],[80,41,89,41],[80,45,89,45],[80,47,89,47],[81,4,90,2],[81,8,90,8,"droppedEntriesCount"],[81,27,90,27],[81,30,90,30,"entryResult"],[81,41,90,41],[81,43,90,43,"droppedEntriesCount"],[81,62,90,62],[82,4,91,2],[82,8,91,6,"rawEntries"],[82,18,91,16],[82,19,91,17,"length"],[82,25,91,23],[82,30,91,28],[82,31,91,29],[82,33,91,31],[83,6,92,4],[84,4,93,2],[85,4,94,2],[85,8,94,8,"entries"],[85,15,94,15],[85,18,94,18,"rawEntries"],[85,28,94,28],[85,29,94,29,"map"],[85,32,94,32],[85,33,94,33,"rawToPerformanceEntry"],[85,75,94,54],[85,76,94,55],[86,4,94,56],[86,8,94,56,"_loop"],[86,13,94,56],[86,25,94,56,"_loop"],[86,26,94,56,"observerConfig"],[86,40,94,56],[86,42,95,74],[87,6,96,4],[87,10,96,10,"entriesForObserver"],[87,28,96,50],[87,31,96,53,"entries"],[87,38,96,60],[87,39,96,61,"filter"],[87,45,96,67],[87,46,96,68,"entry"],[87,51,96,73],[87,55,96,77],[88,8,97,6],[88,12,97,10],[88,13,97,11,"observerConfig"],[88,27,97,25],[88,28,97,26,"entryTypes"],[88,38,97,36],[88,39,97,37,"has"],[88,42,97,40],[88,43,97,41,"entry"],[88,48,97,46],[88,49,97,47,"entryType"],[88,58,97,56],[88,59,97,57],[88,61,97,59],[89,10,98,8],[89,17,98,15],[89,22,98,20],[90,8,99,6],[91,8,100,6],[91,12,100,12,"durationThreshold"],[91,29,100,29],[91,32,100,32,"observerConfig"],[91,46,100,46],[91,47,100,47,"entryTypes"],[91,57,100,57],[91,58,100,58,"get"],[91,61,100,61],[91,62,100,62,"entry"],[91,67,100,67],[91,68,100,68,"entryType"],[91,77,100,77],[91,78,100,78],[92,8,101,6],[92,15,101,13,"entry"],[92,20,101,18],[92,21,101,19,"duration"],[92,29,101,27],[92,34,101,32,"durationThreshold"],[92,51,101,49],[92,55,101,53],[92,56,101,54],[92,57,101,55],[93,6,102,4],[93,7,102,5],[93,8,102,6],[94,6,103,4],[94,10,103,8,"entriesForObserver"],[94,28,103,26],[94,29,103,27,"length"],[94,35,103,33],[94,40,103,38],[94,41,103,39],[94,43,103,41],[95,8,104,6],[95,12,104,10],[96,10,105,8,"observerConfig"],[96,24,105,22],[96,25,105,23,"callback"],[96,33,105,31],[96,34,106,10],[96,38,106,14,"PerformanceObserverEntryList"],[96,66,106,42],[96,67,106,43,"entriesForObserver"],[96,85,106,61],[96,86,106,62],[96,88,107,10,"observer"],[96,97,107,18],[96,99,108,10,"droppedEntriesCount"],[96,118,109,8],[96,119,109,9],[97,8,110,6],[97,9,110,7],[97,10,110,8],[97,17,110,15,"error"],[97,22,110,20],[97,24,110,22],[98,10,111,8,"console"],[98,17,111,15],[98,18,111,16,"error"],[98,23,111,21],[98,24,111,22,"error"],[98,29,111,27],[98,30,111,28],[99,8,112,6],[100,6,113,4],[101,4,114,2],[101,5,114,3],[102,4,95,2],[102,13,95,2,"_ref"],[102,17,95,2],[102,21,95,43,"registeredObservers"],[102,40,95,62],[102,41,95,63,"entries"],[102,48,95,70],[102,49,95,71],[102,50,95,72],[103,6,95,72],[103,10,95,72,"_ref2"],[103,15,95,72],[103,22,95,72,"_slicedToArray2"],[103,37,95,72],[103,38,95,72,"default"],[103,45,95,72],[103,47,95,72,"_ref"],[103,51,95,72],[104,6,95,72],[104,10,95,14,"observer"],[104,19,95,22],[104,22,95,22,"_ref2"],[104,27,95,22],[105,6,95,22],[105,10,95,24,"observerConfig"],[105,24,95,38],[105,27,95,38,"_ref2"],[105,32,95,38],[106,6,95,38,"_loop"],[106,11,95,38],[106,12,95,38,"observerConfig"],[106,26,95,38],[107,4,95,38],[108,2,115,0],[108,3,115,1],[109,2,117,7],[109,11,117,16,"warnNoNativePerformanceObserver"],[109,42,117,47,"warnNoNativePerformanceObserver"],[109,43,117,47],[109,45,117,50],[110,4,118,2],[110,8,118,2,"warnOnce"],[110,25,118,10],[110,27,119,4],[110,64,119,41],[110,66,120,4],[110,120,121,2],[110,121,121,3],[111,2,122,0],[112,2,124,0],[112,11,124,9,"applyDurationThresholds"],[112,34,124,32,"applyDurationThresholds"],[112,35,124,32],[112,37,124,35],[113,4,125,2],[113,8,125,8,"durationThresholds"],[113,26,125,62],[113,29,125,65,"Array"],[113,34,125,70],[113,35,125,71,"from"],[113,39,125,75],[113,40,126,4,"registeredObservers"],[113,59,126,23],[113,60,126,24,"values"],[113,66,126,30],[113,67,126,31],[113,68,127,2],[113,69,127,3],[113,70,128,5,"map"],[113,73,128,8],[113,74,128,9,"config"],[113,80,128,15],[113,84,128,19,"config"],[113,90,128,25],[113,91,128,26,"entryTypes"],[113,101,128,36],[113,102,128,37],[113,103,129,5,"reduce"],[113,109,129,11],[113,110,130,6],[113,111,130,7,"accumulator"],[113,122,130,18],[113,124,130,20,"currentValue"],[113,136,130,32],[113,141,130,37,"union"],[113,146,130,42],[113,147,130,43,"accumulator"],[113,158,130,54],[113,160,130,56,"currentValue"],[113,172,130,68],[113,173,130,69],[113,175,131,6],[113,179,131,10,"Map"],[113,182,131,13],[113,183,131,14],[113,184,132,4],[113,185,132,5],[114,4,134,2],[114,13,134,2,"_ref3"],[114,18,134,2],[114,22,134,47,"durationThresholds"],[114,40,134,65],[114,42,134,67],[115,6,134,67],[115,10,134,67,"_ref4"],[115,15,134,67],[115,22,134,67,"_slicedToArray2"],[115,37,134,67],[115,38,134,67,"default"],[115,45,134,67],[115,47,134,67,"_ref3"],[115,52,134,67],[116,6,134,67],[116,10,134,14,"entryType"],[116,19,134,23],[116,22,134,23,"_ref4"],[116,27,134,23],[117,6,134,23],[117,10,134,25,"durationThreshold"],[117,27,134,42],[117,30,134,42,"_ref4"],[117,35,134,42],[118,6,135,4,"NativePerformanceObserver"],[118,40,135,29],[118,42,135,31,"setDurationThreshold"],[118,62,135,51],[118,63,136,6],[118,67,136,6,"performanceEntryTypeToRaw"],[118,113,136,31],[118,115,136,32,"entryType"],[118,124,136,41],[118,125,136,42],[118,127,137,6,"durationThreshold"],[118,144,137,23],[118,148,137,27],[118,149,138,4],[118,150,138,5],[119,4,139,2],[120,2,140,0],[121,2,142,0],[121,11,142,9,"getSupportedPerformanceEntryTypes"],[121,44,142,42,"getSupportedPerformanceEntryTypes"],[121,45,142,42],[121,47,142,83],[122,4,143,2],[122,8,143,6],[122,9,143,7,"NativePerformanceObserver"],[122,43,143,32],[122,45,143,34],[123,6,144,4],[123,13,144,11,"Object"],[123,19,144,17],[123,20,144,18,"freeze"],[123,26,144,24],[123,27,144,25],[123,29,144,27],[123,30,144,28],[124,4,145,2],[125,4,146,2],[125,8,146,6],[125,9,146,7,"NativePerformanceObserver"],[125,43,146,32],[125,44,146,33,"getSupportedPerformanceEntryTypes"],[125,77,146,66],[125,79,146,68],[126,6,147,4],[127,6,148,4],[127,13,148,11,"Object"],[127,19,148,17],[127,20,148,18,"freeze"],[127,26,148,24],[127,27,148,25],[127,28,148,26],[127,34,148,32],[127,36,148,34],[127,45,148,43],[127,47,148,45],[127,54,148,52],[127,55,148,53],[127,56,148,54],[128,4,149,2],[129,4,150,2],[129,11,150,9,"Object"],[129,17,150,15],[129,18,150,16,"freeze"],[129,24,150,22],[129,25,151,4,"NativePerformanceObserver"],[129,59,151,29],[129,60,151,30,"getSupportedPerformanceEntryTypes"],[129,93,151,63],[129,94,151,64],[129,95,151,65],[129,96,151,66,"map"],[129,99,151,69],[129,100,152,6,"rawToPerformanceEntryType"],[129,146,153,4],[129,147,154,2],[129,148,154,3],[130,2,155,0],[132,2,157,0],[133,0,158,0],[134,0,159,0],[135,0,160,0],[136,0,161,0],[137,0,162,0],[138,0,163,0],[139,0,164,0],[140,0,165,0],[141,0,166,0],[142,0,167,0],[143,0,168,0],[144,0,169,0],[145,0,170,0],[146,0,171,0],[147,0,172,0],[148,0,173,0],[149,0,174,0],[150,0,175,0],[151,0,176,0],[152,2,157,0],[152,6,157,0,"_callback"],[152,15,157,0],[152,35,157,0,"_classPrivateFieldLooseKey2"],[152,62,157,0],[152,63,157,0,"default"],[152,70,157,0],[153,2,157,0],[153,6,157,0,"_type"],[153,11,157,0],[153,31,157,0,"_classPrivateFieldLooseKey2"],[153,58,157,0],[153,59,157,0,"default"],[153,66,157,0],[154,2,157,0],[154,6,157,0,"_validateObserveOptions"],[154,29,157,0],[154,49,157,0,"_classPrivateFieldLooseKey2"],[154,76,157,0],[154,77,157,0,"default"],[154,84,157,0],[155,2,157,0],[155,6,177,21,"PerformanceObserver"],[155,25,177,40],[155,28,177,40,"exports"],[155,35,177,40],[155,36,177,40,"default"],[155,43,177,40],[156,4,181,2],[156,13,181,2,"PerformanceObserver"],[156,33,181,14,"callback"],[156,41,181,51],[156,43,181,53],[157,6,181,53],[157,10,181,53,"_classCallCheck2"],[157,26,181,53],[157,27,181,53,"default"],[157,34,181,53],[157,42,181,53,"PerformanceObserver"],[157,61,181,53],[158,6,181,53,"Object"],[158,12,181,53],[158,13,181,53,"defineProperty"],[158,27,181,53],[158,34,181,53,"_validateObserveOptions"],[158,57,181,53],[159,8,181,53,"value"],[159,13,181,53],[159,15,181,53,"_validateObserveOptions2"],[160,6,181,53],[161,6,181,53,"Object"],[161,12,181,53],[161,13,181,53,"defineProperty"],[161,27,181,53],[161,34,181,53,"_callback"],[161,43,181,53],[162,8,181,53,"writable"],[162,16,181,53],[163,8,181,53,"value"],[163,13,181,53],[164,6,181,53],[165,6,181,53,"Object"],[165,12,181,53],[165,13,181,53,"defineProperty"],[165,27,181,53],[165,34,181,53,"_type"],[165,39,181,53],[166,8,181,53,"writable"],[166,16,181,53],[167,8,181,53,"value"],[167,13,181,53],[168,6,181,53],[169,6,182,4],[169,10,182,4,"_classPrivateFieldLooseBase2"],[169,38,182,4],[169,39,182,4,"default"],[169,46,182,4],[169,52,182,8],[169,54,182,8,"_callback"],[169,63,182,8],[169,65,182,8,"_callback"],[169,74,182,8],[169,78,182,21,"callback"],[169,86,182,29],[170,4,183,2],[171,4,183,3],[171,15,183,3,"_createClass2"],[171,28,183,3],[171,29,183,3,"default"],[171,36,183,3],[171,38,183,3,"PerformanceObserver"],[171,57,183,3],[172,6,183,3,"key"],[172,9,183,3],[173,6,183,3,"value"],[173,11,183,3],[173,13,185,2],[173,22,185,2,"observe"],[173,29,185,9,"observe"],[173,30,185,10,"options"],[173,37,185,42],[173,39,185,50],[174,8,186,4],[174,12,186,8],[174,13,186,9,"NativePerformanceObserver"],[174,47,186,34],[174,49,186,36],[175,10,187,6,"warnNoNativePerformanceObserver"],[175,41,187,37],[175,42,187,38],[175,43,187,39],[176,10,188,6],[177,8,189,4],[178,8,191,4],[178,12,191,4,"_classPrivateFieldLooseBase2"],[178,40,191,4],[178,41,191,4,"default"],[178,48,191,4],[178,54,191,8],[178,56,191,8,"_validateObserveOptions"],[178,79,191,8],[178,81,191,8,"_validateObserveOptions"],[178,104,191,8],[178,106,191,33,"options"],[178,113,191,40],[179,8,193,4],[179,12,193,8,"requestedEntryTypes"],[179,31,193,27],[180,8,195,4],[180,12,195,8,"options"],[180,19,195,15],[180,20,195,16,"entryTypes"],[180,30,195,26],[180,32,195,28],[181,10,196,6],[181,14,196,6,"_classPrivateFieldLooseBase2"],[181,42,196,6],[181,43,196,6,"default"],[181,50,196,6],[181,56,196,10],[181,58,196,10,"_type"],[181,63,196,10],[181,65,196,10,"_type"],[181,70,196,10],[181,74,196,19],[181,84,196,29],[182,10,197,6,"requestedEntryTypes"],[182,29,197,25],[182,32,197,28],[182,36,197,32,"Map"],[182,39,197,35],[182,40,198,8,"options"],[182,47,198,15],[182,48,198,16,"entryTypes"],[182,58,198,26],[182,59,198,27,"map"],[182,62,198,30],[182,63,198,31,"t"],[182,64,198,32],[182,68,198,36],[182,69,198,37,"t"],[182,70,198,38],[182,72,198,40,"undefined"],[182,81,198,49],[182,82,198,50],[182,83,199,6],[182,84,199,7],[183,8,200,4],[183,9,200,5],[183,15,200,11],[184,10,201,6],[184,14,201,6,"_classPrivateFieldLooseBase2"],[184,42,201,6],[184,43,201,6,"default"],[184,50,201,6],[184,56,201,10],[184,58,201,10,"_type"],[184,63,201,10],[184,65,201,10,"_type"],[184,70,201,10],[184,74,201,19],[184,82,201,27],[185,10,202,6,"requestedEntryTypes"],[185,29,202,25],[185,32,202,28],[185,36,202,32,"Map"],[185,39,202,35],[185,40,202,36],[185,41,203,8],[185,42,203,9,"options"],[185,49,203,16],[185,50,203,17,"type"],[185,54,203,21],[185,56,203,23,"options"],[185,63,203,30],[185,64,203,31,"durationThreshold"],[185,81,203,48],[185,82,203,49],[185,83,204,7],[185,84,204,8],[186,8,205,4],[188,8,207,4],[189,8,208,4],[190,8,209,4],[190,12,209,10,"currentEntryTypes"],[190,29,209,27],[190,32,209,30,"registeredObservers"],[190,51,209,49],[190,52,209,50,"get"],[190,55,209,53],[190,56,209,54],[190,60,209,58],[190,61,209,59],[190,63,209,61,"entryTypes"],[190,73,209,71],[191,8,210,4],[191,12,210,10,"nextEntryTypes"],[191,26,210,24],[191,29,210,27,"currentEntryTypes"],[191,46,210,44],[191,49,211,8,"union"],[191,54,211,13],[191,55,211,14,"requestedEntryTypes"],[191,74,211,33],[191,76,211,35,"currentEntryTypes"],[191,93,211,52],[191,94,211,53],[191,97,212,8,"requestedEntryTypes"],[191,116,212,27],[193,8,214,4],[194,8,215,4],[194,12,215,8,"currentEntryTypes"],[194,29,215,25],[194,33,215,29,"currentEntryTypes"],[194,50,215,46],[194,51,215,47,"size"],[194,55,215,51],[194,60,215,56,"nextEntryTypes"],[194,74,215,70],[194,75,215,71,"size"],[194,79,215,75],[194,81,215,77],[195,10,216,6],[196,8,217,4],[197,8,219,4,"registeredObservers"],[197,27,219,23],[197,28,219,24,"set"],[197,31,219,27],[197,32,219,28],[197,36,219,32],[197,38,219,34],[198,10,220,6,"callback"],[198,18,220,14],[198,24,220,14,"_classPrivateFieldLooseBase2"],[198,52,220,14],[198,53,220,14,"default"],[198,60,220,14],[198,62,220,16],[198,66,220,20],[198,68,220,20,"_callback"],[198,77,220,20],[198,79,220,20,"_callback"],[198,88,220,20],[198,89,220,30],[199,10,221,6,"entryTypes"],[199,20,221,16],[199,22,221,18,"nextEntryTypes"],[200,8,222,4],[200,9,222,5],[200,10,222,6],[201,8,224,4],[201,12,224,8],[201,13,224,9,"isOnPerformanceEntryCallbackSet"],[201,44,224,40],[201,46,224,42],[202,10,225,6,"NativePerformanceObserver"],[202,44,225,31],[202,45,225,32,"setOnPerformanceEntryCallback"],[202,74,225,61],[202,75,226,8,"onPerformanceEntry"],[202,93,227,6],[202,94,227,7],[203,10,228,6,"isOnPerformanceEntryCallbackSet"],[203,41,228,37],[203,44,228,40],[203,48,228,44],[204,8,229,4],[206,8,231,4],[207,8,232,4],[208,8,233,4],[208,12,233,10,"newEntryTypes"],[208,25,233,23],[208,28,233,26,"currentEntryTypes"],[208,45,233,43],[208,48,234,8,"difference"],[208,58,234,18],[208,59,235,10],[208,63,235,14,"Set"],[208,66,235,17],[208,67,235,18,"requestedEntryTypes"],[208,86,235,37],[208,87,235,38,"keys"],[208,91,235,42],[208,92,235,43],[208,93,235,44],[208,94,235,45],[208,96,236,10],[208,100,236,14,"Set"],[208,103,236,17],[208,104,236,18,"currentEntryTypes"],[208,121,236,35],[208,122,236,36,"keys"],[208,126,236,40],[208,127,236,41],[208,128,236,42],[208,129,237,8],[208,130,237,9],[208,133,238,8],[208,137,238,12,"Set"],[208,140,238,15],[208,141,238,16,"requestedEntryTypes"],[208,160,238,35],[208,161,238,36,"keys"],[208,165,238,40],[208,166,238,41],[208,167,238,42],[208,168,238,43],[209,8,239,4],[209,13,239,9],[209,17,239,15,"type"],[209,21,239,19],[209,25,239,23,"newEntryTypes"],[209,38,239,36],[209,40,239,38],[210,10,240,6],[210,14,240,10],[210,15,240,11,"observerCountPerEntryType"],[210,40,240,36],[210,41,240,37,"has"],[210,44,240,40],[210,45,240,41,"type"],[210,49,240,45],[210,50,240,46],[210,52,240,48],[211,12,241,8],[211,16,241,14,"rawType"],[211,23,241,21],[211,26,241,24],[211,30,241,24,"performanceEntryTypeToRaw"],[211,76,241,49],[211,78,241,50,"type"],[211,82,241,54],[211,83,241,55],[212,12,242,8,"NativePerformanceObserver"],[212,46,242,33],[212,47,242,34,"startReporting"],[212,61,242,48],[212,62,242,49,"rawType"],[212,69,242,56],[212,70,242,57],[213,10,243,6],[214,10,244,6,"observerCountPerEntryType"],[214,35,244,31],[214,36,244,32,"set"],[214,39,244,35],[214,40,245,8,"type"],[214,44,245,12],[214,46,246,8],[214,47,246,9,"observerCountPerEntryType"],[214,72,246,34],[214,73,246,35,"get"],[214,76,246,38],[214,77,246,39,"type"],[214,81,246,43],[214,82,246,44],[214,86,246,48],[214,87,246,49],[214,91,246,53],[214,92,247,6],[214,93,247,7],[215,8,248,4],[216,8,249,4,"applyDurationThresholds"],[216,31,249,27],[216,32,249,28],[216,33,249,29],[217,6,250,2],[218,4,250,3],[219,6,250,3,"key"],[219,9,250,3],[220,6,250,3,"value"],[220,11,250,3],[220,13,252,2],[220,22,252,2,"disconnect"],[220,32,252,12,"disconnect"],[220,33,252,12],[220,35,252,21],[221,8,253,4],[221,12,253,8],[221,13,253,9,"NativePerformanceObserver"],[221,47,253,34],[221,49,253,36],[222,10,254,6,"warnNoNativePerformanceObserver"],[222,41,254,37],[222,42,254,38],[222,43,254,39],[223,10,255,6],[224,8,256,4],[225,8,258,4],[225,12,258,10,"observerConfig"],[225,26,258,24],[225,29,258,27,"registeredObservers"],[225,48,258,46],[225,49,258,47,"get"],[225,52,258,50],[225,53,258,51],[225,57,258,55],[225,58,258,56],[226,8,259,4],[226,12,259,8],[226,13,259,9,"observerConfig"],[226,27,259,23],[226,29,259,25],[227,10,260,6],[228,8,261,4],[230,8,263,4],[231,8,264,4],[231,13,264,9],[231,17,264,15,"type"],[231,21,264,19],[231,25,264,23,"observerConfig"],[231,39,264,37],[231,40,264,38,"entryTypes"],[231,50,264,48],[231,51,264,49,"keys"],[231,55,264,53],[231,56,264,54],[231,57,264,55],[231,59,264,57],[232,10,265,6],[232,14,265,12,"numberOfObserversForThisType"],[232,42,265,40],[232,45,266,8,"observerCountPerEntryType"],[232,70,266,33],[232,71,266,34,"get"],[232,74,266,37],[232,75,266,38,"type"],[232,79,266,42],[232,80,266,43],[232,84,266,47],[232,85,266,48],[233,10,267,6],[233,14,267,10,"numberOfObserversForThisType"],[233,42,267,38],[233,47,267,43],[233,48,267,44],[233,50,267,46],[234,12,268,8,"observerCountPerEntryType"],[234,37,268,33],[234,38,268,34,"delete"],[234,44,268,40],[234,45,268,41,"type"],[234,49,268,45],[234,50,268,46],[235,12,269,8,"NativePerformanceObserver"],[235,46,269,33],[235,47,269,34,"stopReporting"],[235,60,269,47],[235,61,270,10],[235,65,270,10,"performanceEntryTypeToRaw"],[235,111,270,35],[235,113,270,36,"type"],[235,117,270,40],[235,118,271,8],[235,119,271,9],[236,10,272,6],[236,11,272,7],[236,17,272,13],[236,21,272,17,"numberOfObserversForThisType"],[236,49,272,45],[236,54,272,50],[236,55,272,51],[236,57,272,53],[237,12,273,8,"observerCountPerEntryType"],[237,37,273,33],[237,38,273,34,"set"],[237,41,273,37],[237,42,273,38,"type"],[237,46,273,42],[237,48,273,44,"numberOfObserversForThisType"],[237,76,273,72],[237,79,273,75],[237,80,273,76],[237,81,273,77],[238,10,274,6],[239,8,275,4],[241,8,277,4],[242,8,278,4,"registeredObservers"],[242,27,278,23],[242,28,278,24,"delete"],[242,34,278,30],[242,35,278,31],[242,39,278,35],[242,40,278,36],[243,8,279,4],[243,12,279,8,"registeredObservers"],[243,31,279,27],[243,32,279,28,"size"],[243,36,279,32],[243,41,279,37],[243,42,279,38],[243,44,279,40],[244,10,280,6,"NativePerformanceObserver"],[244,44,280,31],[244,45,280,32,"setOnPerformanceEntryCallback"],[244,74,280,61],[244,75,280,62,"undefined"],[244,84,280,71],[244,85,280,72],[245,10,281,6,"isOnPerformanceEntryCallbackSet"],[245,41,281,37],[245,44,281,40],[245,49,281,45],[246,8,282,4],[247,8,284,4,"applyDurationThresholds"],[247,31,284,27],[247,32,284,28],[247,33,284,29],[248,6,285,2],[249,4,285,3],[250,2,285,3],[250,7,325,0],[251,2,325,0],[251,11,325,0,"_validateObserveOptions2"],[251,36,287,26,"options"],[251,43,287,58],[251,45,287,66],[252,4,288,4],[252,8,288,11,"type"],[252,12,288,15],[252,15,288,50,"options"],[252,22,288,57],[252,23,288,11,"type"],[252,27,288,15],[253,6,288,17,"entryTypes"],[253,16,288,27],[253,19,288,50,"options"],[253,26,288,57],[253,27,288,17,"entryTypes"],[253,37,288,27],[254,6,288,29,"durationThreshold"],[254,23,288,46],[254,26,288,50,"options"],[254,33,288,57],[254,34,288,29,"durationThreshold"],[254,51,288,46],[255,4,290,4],[255,8,290,8],[255,9,290,9,"type"],[255,13,290,13],[255,17,290,17],[255,18,290,18,"entryTypes"],[255,28,290,28],[255,30,290,30],[256,6,291,6],[256,12,291,12],[256,16,291,16,"TypeError"],[256,25,291,25],[256,26,292,8],[256,152,293,6],[256,153,293,7],[257,4,294,4],[258,4,296,4],[258,8,296,8,"entryTypes"],[258,18,296,18],[258,22,296,22,"type"],[258,26,296,26],[258,28,296,28],[259,6,297,6],[259,12,297,12],[259,16,297,16,"TypeError"],[259,25,297,25],[259,26,298,8],[259,149,299,6],[259,150,299,7],[260,4,300,4],[261,4,302,4],[261,8,302,8],[261,12,302,8,"_classPrivateFieldLooseBase2"],[261,40,302,8],[261,41,302,8,"default"],[261,48,302,8],[261,54,302,12],[261,56,302,12,"_type"],[261,61,302,12],[261,63,302,12,"_type"],[261,68,302,12],[261,74,302,23],[261,84,302,33],[261,88,302,37,"type"],[261,92,302,41],[261,94,302,43],[262,6,303,6],[262,12,303,12],[262,16,303,16,"Error"],[262,21,303,21],[262,22,304,8],[262,179,305,6],[262,180,305,7],[263,4,306,4],[264,4,308,4],[264,8,308,8],[264,12,308,8,"_classPrivateFieldLooseBase2"],[264,40,308,8],[264,41,308,8,"default"],[264,48,308,8],[264,54,308,12],[264,56,308,12,"_type"],[264,61,308,12],[264,63,308,12,"_type"],[264,68,308,12],[264,74,308,23],[264,82,308,31],[264,86,308,35,"entryTypes"],[264,96,308,45],[264,98,308,47],[265,6,309,6],[265,12,309,12],[265,16,309,16,"Error"],[265,21,309,21],[265,22,310,8],[265,190,311,6],[265,191,311,7],[266,4,312,4],[267,4,314,4],[267,8,314,8,"entryTypes"],[267,18,314,18],[267,22,314,22,"durationThreshold"],[267,39,314,39],[267,44,314,44,"undefined"],[267,53,314,53],[267,55,314,55],[268,6,315,6],[268,12,315,12],[268,16,315,16,"TypeError"],[268,25,315,25],[268,26,316,8],[268,165,317,6],[268,166,317,7],[269,4,318,4],[270,2,319,2],[271,2,177,21,"PerformanceObserver"],[271,21,177,40],[271,22,321,9,"supportedEntryTypes"],[271,41,321,28],[271,44,322,4,"getSupportedPerformanceEntryTypes"],[271,77,322,37],[271,78,322,38],[271,79,322,39],[272,2,326,0],[272,11,326,9,"union"],[272,16,326,14,"union"],[272,17,327,2,"a"],[272,18,327,29],[272,20,328,2,"b"],[272,21,328,29],[272,23,329,19],[273,4,330,2],[273,8,330,8,"res"],[273,11,330,11],[273,14,330,14],[273,18,330,18,"Map"],[273,21,330,21],[273,22,330,34],[273,23,330,35],[274,4,331,2],[274,13,331,2,"_ref5"],[274,18,331,2],[274,22,331,23,"a"],[274,23,331,24],[274,25,331,26],[275,6,331,26],[275,10,331,26,"_ref6"],[275,15,331,26],[275,22,331,26,"_slicedToArray2"],[275,37,331,26],[275,38,331,26,"default"],[275,45,331,26],[275,47,331,26,"_ref5"],[275,52,331,26],[276,6,331,26],[276,10,331,14,"k"],[276,11,331,15],[276,14,331,15,"_ref6"],[276,19,331,15],[277,6,331,15],[277,10,331,17,"v"],[277,11,331,18],[277,14,331,18,"_ref6"],[277,19,331,18],[278,6,332,4],[278,10,332,8],[278,11,332,9,"b"],[278,12,332,10],[278,13,332,11,"has"],[278,16,332,14],[278,17,332,15,"k"],[278,18,332,16],[278,19,332,17],[278,21,332,19],[279,8,333,6,"res"],[279,11,333,9],[279,12,333,10,"set"],[279,15,333,13],[279,16,333,14,"k"],[279,17,333,15],[279,19,333,17,"v"],[279,20,333,18],[279,21,333,19],[280,6,334,4],[280,7,334,5],[280,13,334,11],[281,8,335,6,"res"],[281,11,335,9],[281,12,335,10,"set"],[281,15,335,13],[281,16,335,14,"k"],[281,17,335,15],[281,19,335,17,"Math"],[281,23,335,21],[281,24,335,22,"min"],[281,27,335,25],[281,28,335,26,"v"],[281,29,335,27],[281,33,335,31],[281,34,335,32],[281,36,335,34,"b"],[281,37,335,35],[281,38,335,36,"get"],[281,41,335,39],[281,42,335,40,"k"],[281,43,335,41],[281,44,335,42],[281,48,335,46],[281,49,335,47],[281,50,335,48],[281,51,335,49],[282,6,336,4],[283,4,337,2],[284,4,338,2],[284,11,338,9,"res"],[284,14,338,12],[285,2,339,0],[286,2,341,0],[286,11,341,9,"difference"],[286,21,341,19,"difference"],[286,22,341,23,"a"],[286,23,341,41],[286,25,341,43,"b"],[286,26,341,61],[286,28,341,71],[287,4,342,2],[287,11,342,9],[287,15,342,13,"Set"],[287,18,342,16],[287,19,342,17],[287,20,342,18],[287,23,342,21,"a"],[287,24,342,22],[287,25,342,23],[287,26,342,24,"filter"],[287,32,342,30],[287,33,342,31,"x"],[287,34,342,32],[287,38,342,36],[287,39,342,37,"b"],[287,40,342,38],[287,41,342,39,"has"],[287,44,342,42],[287,45,342,43,"x"],[287,46,342,44],[287,47,342,45],[287,48,342,46],[287,49,342,47],[288,2,343,0],[289,0,343,1],[289,3]],"functionMap":{"names":["<global>","PerformanceObserverEntryList","PerformanceObserverEntryList#constructor","PerformanceObserverEntryList#getEntries","PerformanceObserverEntryList#getEntriesByType","filter$argument_0","PerformanceObserverEntryList#getEntriesByName","onPerformanceEntry","entries.filter$argument_0","warnNoNativePerformanceObserver","applyDurationThresholds","Array.from.map$argument_0","Array.from.map.reduce$argument_0","getSupportedPerformanceEntryTypes","PerformanceObserver","constructor","observe","options.entryTypes.map$argument_0","disconnect","<anonymous>","union","difference"],"mappings":"AAA;OC0B;ECG;GDE;EEE;GFE;EGE;gCCC,iCD;GHC;EKE;kCDK,4BC;QDG,wDC;GLG;CDC;2BO8B;oECY;KDM;CPa;OSE;CTK;AUE;SCI,2BD;MEE,+DF;CVU;AaE;Cba;ecsB;ECI;GDE;EEE;+BCa,mBD;GFoD;EIE;GJiC;EKE;GLgC;CdI;AoBG;CpBa;AqBE;+BhBC,cgB;CrBC"}},"type":"js/module"}]}