{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"invariant","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":34,"index":256}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CellRenderMask = void 0;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/createClass\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  var CellRenderMask = exports.CellRenderMask = /*#__PURE__*/function () {\n    function CellRenderMask(numCells) {\n      (0, _classCallCheck2.default)(this, CellRenderMask);\n      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    return (0, _createClass2.default)(CellRenderMask, [{\n      key: \"enumerateRegions\",\n      value: function enumerateRegions() {\n        return this._regions;\n      }\n    }, {\n      key: \"addCells\",\n      value: function addCells(cells) {\n        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n        // VirtualizedList uses inclusive ranges, where zero-count states are\n        // possible. E.g. [0, -1] for no cells, starting at 0.\n        if (cells.last < cells.first) {\n          return;\n        }\n        var _this$_findRegion = this._findRegion(cells.first),\n          _this$_findRegion2 = (0, _slicedToArray2.default)(_this$_findRegion, 2),\n          firstIntersect = _this$_findRegion2[0],\n          firstIntersectIdx = _this$_findRegion2[1];\n        var _this$_findRegion3 = this._findRegion(cells.last),\n          _this$_findRegion4 = (0, _slicedToArray2.default)(_this$_findRegion3, 2),\n          lastIntersect = _this$_findRegion4[0],\n          lastIntersectIdx = _this$_findRegion4[1];\n\n        // Fast-path if the cells to add are already all present in the mask. We\n        // will otherwise need to do some mutation.\n        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n          return;\n        }\n\n        // We need to replace the existing covered regions with 1-3 new regions\n        // depending whether we need to split spacers out of overlapping regions.\n        var newLeadRegion = [];\n        var newTailRegion = [];\n        var newMainRegion = {\n          ...cells,\n          isSpacer: false\n        };\n        if (firstIntersect.first < newMainRegion.first) {\n          if (firstIntersect.isSpacer) {\n            newLeadRegion.push({\n              first: firstIntersect.first,\n              last: newMainRegion.first - 1,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.first = firstIntersect.first;\n          }\n        }\n        if (lastIntersect.last > newMainRegion.last) {\n          if (lastIntersect.isSpacer) {\n            newTailRegion.push({\n              first: newMainRegion.last + 1,\n              last: lastIntersect.last,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.last = lastIntersect.last;\n          }\n        }\n        var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];\n        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n        this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);\n      }\n    }, {\n      key: \"numCells\",\n      value: function numCells() {\n        return this._numCells;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i) => region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);\n      }\n    }, {\n      key: \"_findRegion\",\n      value: function _findRegion(cellIdx) {\n        var firstIdx = 0;\n        var lastIdx = this._regions.length - 1;\n        while (firstIdx <= lastIdx) {\n          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n          var middleRegion = this._regions[middleIdx];\n          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n            return [middleRegion, middleIdx];\n          } else if (cellIdx < middleRegion.first) {\n            lastIdx = middleIdx - 1;\n          } else if (cellIdx > middleRegion.last) {\n            firstIdx = middleIdx + 1;\n          }\n        }\n        (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);\n      }\n    }]);\n  }();\n});","lineCount":129,"map":[[10,2,11,0],[10,6,11,0,"_invariant"],[10,16,11,0],[10,19,11,0,"_interopRequireDefault"],[10,41,11,0],[10,42,11,0,"_$$_REQUIRE"],[10,53,11,0],[10,54,11,0,"_dependencyMap"],[10,68,11,0],[11,2,1,0],[12,0,2,0],[13,0,3,0],[14,0,4,0],[15,0,5,0],[16,0,6,0],[17,0,7,0],[18,0,8,0],[19,0,9,0],[20,2,1,0],[20,6,19,13,"CellRenderMask"],[20,20,19,27],[20,23,19,27,"exports"],[20,30,19,27],[20,31,19,27,"CellRenderMask"],[20,45,19,27],[21,4,23,2],[21,13,23,2,"CellRenderMask"],[21,28,23,14,"numCells"],[21,36,23,30],[21,38,23,32],[22,6,23,32],[22,10,23,32,"_classCallCheck2"],[22,26,23,32],[22,27,23,32,"default"],[22,34,23,32],[22,42,23,32,"CellRenderMask"],[22,56,23,32],[23,6,24,4],[23,10,24,4,"invariant"],[23,28,24,13],[23,30,25,6,"numCells"],[23,38,25,14],[23,42,25,18],[23,43,25,19],[23,45,26,6],[23,105,27,4],[23,106,27,5],[24,6,29,4],[24,10,29,8],[24,11,29,9,"_numCells"],[24,20,29,18],[24,23,29,21,"numCells"],[24,31,29,29],[25,6,31,4],[25,10,31,8,"numCells"],[25,18,31,16],[25,23,31,21],[25,24,31,22],[25,26,31,24],[26,8,32,6],[26,12,32,10],[26,13,32,11,"_regions"],[26,21,32,19],[26,24,32,22],[26,26,32,24],[27,6,33,4],[27,7,33,5],[27,13,33,11],[28,8,34,6],[28,12,34,10],[28,13,34,11,"_regions"],[28,21,34,19],[28,24,34,22],[28,25,35,8],[29,10,36,10,"first"],[29,15,36,15],[29,17,36,17],[29,18,36,18],[30,10,37,10,"last"],[30,14,37,14],[30,16,37,16,"numCells"],[30,24,37,24],[30,27,37,27],[30,28,37,28],[31,10,38,10,"isSpacer"],[31,18,38,18],[31,20,38,20],[32,8,39,8],[32,9,39,9],[32,10,40,7],[33,6,41,4],[34,4,42,2],[35,4,42,3],[35,15,42,3,"_createClass2"],[35,28,42,3],[35,29,42,3,"default"],[35,36,42,3],[35,38,42,3,"CellRenderMask"],[35,52,42,3],[36,6,42,3,"key"],[36,9,42,3],[37,6,42,3,"value"],[37,11,42,3],[37,13,44,2],[37,22,44,2,"enumerateRegions"],[37,38,44,18,"enumerateRegions"],[37,39,44,18],[37,41,44,49],[38,8,45,4],[38,15,45,11],[38,19,45,15],[38,20,45,16,"_regions"],[38,28,45,24],[39,6,46,2],[40,4,46,3],[41,6,46,3,"key"],[41,9,46,3],[42,6,46,3,"value"],[42,11,46,3],[42,13,48,2],[42,22,48,2,"addCells"],[42,30,48,10,"addCells"],[42,31,48,11,"cells"],[42,36,48,47],[42,38,48,55],[43,8,49,4],[43,12,49,4,"invariant"],[43,30,49,13],[43,32,50,6,"cells"],[43,37,50,11],[43,38,50,12,"first"],[43,43,50,17],[43,47,50,21],[43,48,50,22],[43,52,51,8,"cells"],[43,57,51,13],[43,58,51,14,"first"],[43,63,51,19],[43,66,51,22],[43,70,51,26],[43,71,51,27,"_numCells"],[43,80,51,36],[43,84,52,8,"cells"],[43,89,52,13],[43,90,52,14,"last"],[43,94,52,18],[43,98,52,22],[43,99,52,23],[43,100,52,24],[43,104,53,8,"cells"],[43,109,53,13],[43,110,53,14,"last"],[43,114,53,18],[43,117,53,21],[43,121,53,25],[43,122,53,26,"_numCells"],[43,131,53,35],[43,135,54,8,"cells"],[43,140,54,13],[43,141,54,14,"last"],[43,145,54,18],[43,149,54,22,"cells"],[43,154,54,27],[43,155,54,28,"first"],[43,160,54,33],[43,163,54,36],[43,164,54,37],[43,166,55,6],[43,222,56,4],[43,223,56,5],[45,8,58,4],[46,8,59,4],[47,8,60,4],[47,12,60,8,"cells"],[47,17,60,13],[47,18,60,14,"last"],[47,22,60,18],[47,25,60,21,"cells"],[47,30,60,26],[47,31,60,27,"first"],[47,36,60,32],[47,38,60,34],[48,10,61,6],[49,8,62,4],[50,8,64,4],[50,12,64,4,"_this$_findRegion"],[50,29,64,4],[50,32,64,48],[50,36,64,52],[50,37,64,53,"_findRegion"],[50,48,64,64],[50,49,64,65,"cells"],[50,54,64,70],[50,55,64,71,"first"],[50,60,64,76],[50,61,64,77],[51,10,64,77,"_this$_findRegion2"],[51,28,64,77],[51,35,64,77,"_slicedToArray2"],[51,50,64,77],[51,51,64,77,"default"],[51,58,64,77],[51,60,64,77,"_this$_findRegion"],[51,77,64,77],[52,10,64,11,"firstIntersect"],[52,24,64,25],[52,27,64,25,"_this$_findRegion2"],[52,45,64,25],[53,10,64,27,"firstIntersectIdx"],[53,27,64,44],[53,30,64,44,"_this$_findRegion2"],[53,48,64,44],[54,8,65,4],[54,12,65,4,"_this$_findRegion3"],[54,30,65,4],[54,33,65,46],[54,37,65,50],[54,38,65,51,"_findRegion"],[54,49,65,62],[54,50,65,63,"cells"],[54,55,65,68],[54,56,65,69,"last"],[54,60,65,73],[54,61,65,74],[55,10,65,74,"_this$_findRegion4"],[55,28,65,74],[55,35,65,74,"_slicedToArray2"],[55,50,65,74],[55,51,65,74,"default"],[55,58,65,74],[55,60,65,74,"_this$_findRegion3"],[55,78,65,74],[56,10,65,11,"lastIntersect"],[56,23,65,24],[56,26,65,24,"_this$_findRegion4"],[56,44,65,24],[57,10,65,26,"lastIntersectIdx"],[57,26,65,42],[57,29,65,42,"_this$_findRegion4"],[57,47,65,42],[59,8,67,4],[60,8,68,4],[61,8,69,4],[61,12,69,8,"firstIntersectIdx"],[61,29,69,25],[61,34,69,30,"lastIntersectIdx"],[61,50,69,46],[61,54,69,50],[61,55,69,51,"firstIntersect"],[61,69,69,65],[61,70,69,66,"isSpacer"],[61,78,69,74],[61,80,69,76],[62,10,70,6],[63,8,71,4],[65,8,73,4],[66,8,74,4],[67,8,75,4],[67,12,75,10,"newLeadRegion"],[67,25,75,42],[67,28,75,45],[67,30,75,47],[68,8,76,4],[68,12,76,10,"newTailRegion"],[68,25,76,42],[68,28,76,45],[68,30,76,47],[69,8,77,4],[69,12,77,10,"newMainRegion"],[69,25,77,35],[69,28,77,38],[70,10,78,6],[70,13,78,9,"cells"],[70,18,78,14],[71,10,79,6,"isSpacer"],[71,18,79,14],[71,20,79,16],[72,8,80,4],[72,9,80,5],[73,8,82,4],[73,12,82,8,"firstIntersect"],[73,26,82,22],[73,27,82,23,"first"],[73,32,82,28],[73,35,82,31,"newMainRegion"],[73,48,82,44],[73,49,82,45,"first"],[73,54,82,50],[73,56,82,52],[74,10,83,6],[74,14,83,10,"firstIntersect"],[74,28,83,24],[74,29,83,25,"isSpacer"],[74,37,83,33],[74,39,83,35],[75,12,84,8,"newLeadRegion"],[75,25,84,21],[75,26,84,22,"push"],[75,30,84,26],[75,31,84,27],[76,14,85,10,"first"],[76,19,85,15],[76,21,85,17,"firstIntersect"],[76,35,85,31],[76,36,85,32,"first"],[76,41,85,37],[77,14,86,10,"last"],[77,18,86,14],[77,20,86,16,"newMainRegion"],[77,33,86,29],[77,34,86,30,"first"],[77,39,86,35],[77,42,86,38],[77,43,86,39],[78,14,87,10,"isSpacer"],[78,22,87,18],[78,24,87,20],[79,12,88,8],[79,13,88,9],[79,14,88,10],[80,10,89,6],[80,11,89,7],[80,17,89,13],[81,12,90,8,"newMainRegion"],[81,25,90,21],[81,26,90,22,"first"],[81,31,90,27],[81,34,90,30,"firstIntersect"],[81,48,90,44],[81,49,90,45,"first"],[81,54,90,50],[82,10,91,6],[83,8,92,4],[84,8,94,4],[84,12,94,8,"lastIntersect"],[84,25,94,21],[84,26,94,22,"last"],[84,30,94,26],[84,33,94,29,"newMainRegion"],[84,46,94,42],[84,47,94,43,"last"],[84,51,94,47],[84,53,94,49],[85,10,95,6],[85,14,95,10,"lastIntersect"],[85,27,95,23],[85,28,95,24,"isSpacer"],[85,36,95,32],[85,38,95,34],[86,12,96,8,"newTailRegion"],[86,25,96,21],[86,26,96,22,"push"],[86,30,96,26],[86,31,96,27],[87,14,97,10,"first"],[87,19,97,15],[87,21,97,17,"newMainRegion"],[87,34,97,30],[87,35,97,31,"last"],[87,39,97,35],[87,42,97,38],[87,43,97,39],[88,14,98,10,"last"],[88,18,98,14],[88,20,98,16,"lastIntersect"],[88,33,98,29],[88,34,98,30,"last"],[88,38,98,34],[89,14,99,10,"isSpacer"],[89,22,99,18],[89,24,99,20],[90,12,100,8],[90,13,100,9],[90,14,100,10],[91,10,101,6],[91,11,101,7],[91,17,101,13],[92,12,102,8,"newMainRegion"],[92,25,102,21],[92,26,102,22,"last"],[92,30,102,26],[92,33,102,29,"lastIntersect"],[92,46,102,42],[92,47,102,43,"last"],[92,51,102,47],[93,10,103,6],[94,8,104,4],[95,8,106,4],[95,12,106,10,"replacementRegions"],[95,30,106,47],[95,33,106,50],[95,34,107,6],[95,37,107,9,"newLeadRegion"],[95,50,107,22],[95,52,108,6,"newMainRegion"],[95,65,108,19],[95,67,109,6],[95,70,109,9,"newTailRegion"],[95,83,109,22],[95,84,110,5],[96,8,111,4],[96,12,111,10,"numRegionsToDelete"],[96,30,111,28],[96,33,111,31,"lastIntersectIdx"],[96,49,111,47],[96,52,111,50,"firstIntersectIdx"],[96,69,111,67],[96,72,111,70],[96,73,111,71],[97,8,112,4],[97,12,112,8],[97,13,112,9,"_regions"],[97,21,112,17],[97,22,112,18,"splice"],[97,28,112,24],[97,29,113,6,"firstIntersectIdx"],[97,46,113,23],[97,48,114,6,"numRegionsToDelete"],[97,66,114,24],[97,68,115,6],[97,71,115,9,"replacementRegions"],[97,89,116,4],[97,90,116,5],[98,6,117,2],[99,4,117,3],[100,6,117,3,"key"],[100,9,117,3],[101,6,117,3,"value"],[101,11,117,3],[101,13,119,2],[101,22,119,2,"numCells"],[101,30,119,10,"numCells"],[101,31,119,10],[101,33,119,21],[102,8,120,4],[102,15,120,11],[102,19,120,15],[102,20,120,16,"_numCells"],[102,29,120,25],[103,6,121,2],[104,4,121,3],[105,6,121,3,"key"],[105,9,121,3],[106,6,121,3,"value"],[106,11,121,3],[106,13,123,2],[106,22,123,2,"equals"],[106,28,123,8,"equals"],[106,29,123,9,"other"],[106,34,123,30],[106,36,123,41],[107,8,124,4],[107,15,125,6],[107,19,125,10],[107,20,125,11,"_numCells"],[107,29,125,20],[107,34,125,25,"other"],[107,39,125,30],[107,40,125,31,"_numCells"],[107,49,125,40],[107,53,126,6],[107,57,126,10],[107,58,126,11,"_regions"],[107,66,126,19],[107,67,126,20,"length"],[107,73,126,26],[107,78,126,31,"other"],[107,83,126,36],[107,84,126,37,"_regions"],[107,92,126,45],[107,93,126,46,"length"],[107,99,126,52],[107,103,127,6],[107,107,127,10],[107,108,127,11,"_regions"],[107,116,127,19],[107,117,127,20,"every"],[107,122,127,25],[107,123,128,8],[107,124,128,9,"region"],[107,130,128,15],[107,132,128,17,"i"],[107,133,128,18],[107,138,129,10,"region"],[107,144,129,16],[107,145,129,17,"first"],[107,150,129,22],[107,155,129,27,"other"],[107,160,129,32],[107,161,129,33,"_regions"],[107,169,129,41],[107,170,129,42,"i"],[107,171,129,43],[107,172,129,44],[107,173,129,45,"first"],[107,178,129,50],[107,182,130,10,"region"],[107,188,130,16],[107,189,130,17,"last"],[107,193,130,21],[107,198,130,26,"other"],[107,203,130,31],[107,204,130,32,"_regions"],[107,212,130,40],[107,213,130,41,"i"],[107,214,130,42],[107,215,130,43],[107,216,130,44,"last"],[107,220,130,48],[107,224,131,10,"region"],[107,230,131,16],[107,231,131,17,"isSpacer"],[107,239,131,25],[107,244,131,30,"other"],[107,249,131,35],[107,250,131,36,"_regions"],[107,258,131,44],[107,259,131,45,"i"],[107,260,131,46],[107,261,131,47],[107,262,131,48,"isSpacer"],[107,270,132,6],[107,271,132,7],[108,6,134,2],[109,4,134,3],[110,6,134,3,"key"],[110,9,134,3],[111,6,134,3,"value"],[111,11,134,3],[111,13,136,2],[111,22,136,2,"_findRegion"],[111,33,136,13,"_findRegion"],[111,34,136,14,"cellIdx"],[111,41,136,29],[111,43,136,53],[112,8,137,4],[112,12,137,8,"firstIdx"],[112,20,137,16],[112,23,137,19],[112,24,137,20],[113,8,138,4],[113,12,138,8,"lastIdx"],[113,19,138,15],[113,22,138,18],[113,26,138,22],[113,27,138,23,"_regions"],[113,35,138,31],[113,36,138,32,"length"],[113,42,138,38],[113,45,138,41],[113,46,138,42],[114,8,140,4],[114,15,140,11,"firstIdx"],[114,23,140,19],[114,27,140,23,"lastIdx"],[114,34,140,30],[114,36,140,32],[115,10,141,6],[115,14,141,12,"middleIdx"],[115,23,141,21],[115,26,141,24,"Math"],[115,30,141,28],[115,31,141,29,"floor"],[115,36,141,34],[115,37,141,35],[115,38,141,36,"firstIdx"],[115,46,141,44],[115,49,141,47,"lastIdx"],[115,56,141,54],[115,60,141,58],[115,61,141,59],[115,62,141,60],[116,10,142,6],[116,14,142,12,"middleRegion"],[116,26,142,24],[116,29,142,27],[116,33,142,31],[116,34,142,32,"_regions"],[116,42,142,40],[116,43,142,41,"middleIdx"],[116,52,142,50],[116,53,142,51],[117,10,144,6],[117,14,144,10,"cellIdx"],[117,21,144,17],[117,25,144,21,"middleRegion"],[117,37,144,33],[117,38,144,34,"first"],[117,43,144,39],[117,47,144,43,"cellIdx"],[117,54,144,50],[117,58,144,54,"middleRegion"],[117,70,144,66],[117,71,144,67,"last"],[117,75,144,71],[117,77,144,73],[118,12,145,8],[118,19,145,15],[118,20,145,16,"middleRegion"],[118,32,145,28],[118,34,145,30,"middleIdx"],[118,43,145,39],[118,44,145,40],[119,10,146,6],[119,11,146,7],[119,17,146,13],[119,21,146,17,"cellIdx"],[119,28,146,24],[119,31,146,27,"middleRegion"],[119,43,146,39],[119,44,146,40,"first"],[119,49,146,45],[119,51,146,47],[120,12,147,8,"lastIdx"],[120,19,147,15],[120,22,147,18,"middleIdx"],[120,31,147,27],[120,34,147,30],[120,35,147,31],[121,10,148,6],[121,11,148,7],[121,17,148,13],[121,21,148,17,"cellIdx"],[121,28,148,24],[121,31,148,27,"middleRegion"],[121,43,148,39],[121,44,148,40,"last"],[121,48,148,44],[121,50,148,46],[122,12,149,8,"firstIdx"],[122,20,149,16],[122,23,149,19,"middleIdx"],[122,32,149,28],[122,35,149,31],[122,36,149,32],[123,10,150,6],[124,8,151,4],[125,8,153,4],[125,12,153,4,"invariant"],[125,30,153,13],[125,32,153,14],[125,37,153,19],[125,39,153,21],[125,84,153,66,"cellIdx"],[125,91,153,73],[125,93,153,75],[125,94,153,76],[126,6,154,2],[127,4,154,3],[128,2,154,3],[129,0,154,3],[129,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;OCkB;ECI;GDmB;EEE;GFE;EGE;GHqE;EIE;GJE;EKE;QCK;wDDG;GLG;EOE;GPkB;CDC"}},"type":"js/module"}]}