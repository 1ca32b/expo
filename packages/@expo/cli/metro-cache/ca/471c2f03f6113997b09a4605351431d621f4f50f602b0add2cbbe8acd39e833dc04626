{"dependencies":[{"name":"./InteractionManager","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":15,"column":27,"index":315},"end":{"line":15,"column":58,"index":346}}],"key":"ILikFoiGRWiLD9DgAo/WvlXkjQY="}},{"name":"./TouchHistoryMath","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":16,"column":25,"index":373},"end":{"line":16,"column":54,"index":402}}],"key":"1H9zq4S4TT8Rx9bOAmqotJqqR5U="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var InteractionManager = _$$_REQUIRE(_dependencyMap[0], \"./InteractionManager\");\n  var TouchHistoryMath = _$$_REQUIRE(_dependencyMap[1], \"./TouchHistoryMath\");\n  var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\n  var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\n  var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\n  var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\n  var currentCentroidX = TouchHistoryMath.currentCentroidX;\n  var currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n  /**\n   * `PanResponder` reconciles several touches into a single gesture. It makes\n   * single-touch gestures resilient to extra touches, and can be used to\n   * recognize simple multi-touch gestures.\n   *\n   * By default, `PanResponder` holds an `InteractionManager` handle to block\n   * long-running JS events from interrupting active gestures.\n   *\n   * It provides a predictable wrapper of the responder handlers provided by the\n   * [gesture responder system](docs/gesture-responder-system.html).\n   * For each handler, it provides a new `gestureState` object alongside the\n   * native event object:\n   *\n   * ```\n   * onPanResponderMove: (event, gestureState) => {}\n   * ```\n   *\n   * A native event is a synthetic touch event with the following form:\n   *\n   *  - `nativeEvent`\n   *      + `changedTouches` - Array of all touch events that have changed since the last event\n   *      + `identifier` - The ID of the touch\n   *      + `locationX` - The X position of the touch, relative to the element\n   *      + `locationY` - The Y position of the touch, relative to the element\n   *      + `pageX` - The X position of the touch, relative to the root element\n   *      + `pageY` - The Y position of the touch, relative to the root element\n   *      + `target` - The node id of the element receiving the touch event\n   *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n   *      + `touches` - Array of all current touches on the screen\n   *\n   * A `gestureState` object has the following:\n   *\n   *  - `stateID` - ID of the gestureState- persisted as long as there at least\n   *     one touch on screen\n   *  - `moveX` - the latest screen coordinates of the recently-moved touch\n   *  - `moveY` - the latest screen coordinates of the recently-moved touch\n   *  - `x0` - the screen coordinates of the responder grant\n   *  - `y0` - the screen coordinates of the responder grant\n   *  - `dx` - accumulated distance of the gesture since the touch started\n   *  - `dy` - accumulated distance of the gesture since the touch started\n   *  - `vx` - current velocity of the gesture\n   *  - `vy` - current velocity of the gesture\n   *  - `numberActiveTouches` - Number of touches currently on screen\n   *\n   * ### Basic Usage\n   *\n   * ```\n   *   componentWillMount: function() {\n   *     this._panResponder = PanResponder.create({\n   *       // Ask to be the responder:\n   *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n   *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *\n   *       onPanResponderGrant: (evt, gestureState) => {\n   *         // The gesture has started. Show visual feedback so the user knows\n   *         // what is happening!\n   *\n   *         // gestureState.d{x,y} will be set to zero now\n   *       },\n   *       onPanResponderMove: (evt, gestureState) => {\n   *         // The most recent move distance is gestureState.move{X,Y}\n   *\n   *         // The accumulated gesture distance since becoming responder is\n   *         // gestureState.d{x,y}\n   *       },\n   *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n   *       onPanResponderRelease: (evt, gestureState) => {\n   *         // The user has released all touches while this view is the\n   *         // responder. This typically means a gesture has succeeded\n   *       },\n   *       onPanResponderTerminate: (evt, gestureState) => {\n   *         // Another component has become the responder, so this gesture\n   *         // should be cancelled\n   *       },\n   *       onShouldBlockNativeResponder: (evt, gestureState) => {\n   *         // Returns whether this component should block native components from becoming the JS\n   *         // responder. Returns true by default. Is currently only supported on android.\n   *         return true;\n   *       },\n   *     });\n   *   },\n   *\n   *   render: function() {\n   *     return (\n   *       <View {...this._panResponder.panHandlers} />\n   *     );\n   *   },\n   *\n   * ```\n   *\n   * ### Working Example\n   *\n   * To see it in action, try the\n   * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/HEAD/packages/rn-tester/js/examples/PanResponder/PanResponderExample.js)\n   */\n\n  var PanResponder = {\n    /**\n     *\n     * A graphical explanation of the touch data flow:\n     *\n     * +----------------------------+             +--------------------------------+\n     * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n     * +----------------------------+             +----------+---------------------+\n     * |Global store of touchHistory|             |Allocation-less math util       |\n     * |including activeness, start |             |on touch history (centroids     |\n     * |position, prev/cur position.|             |and multitouch movement etc)    |\n     * |                            |             |                                |\n     * +----^-----------------------+             +----^---------------------------+\n     *      |                                          |\n     *      | (records relevant history                |\n     *      |  of touches relevant for                 |\n     *      |  implementing higher level               |\n     *      |  gestures)                               |\n     *      |                                          |\n     * +----+-----------------------+             +----|---------------------------+\n     * | ResponderEventPlugin       |             |    |   Your App/Component      |\n     * +----------------------------+             +----|---------------------------+\n     * |Negotiates which view gets  | Low level   |    |             High level    |\n     * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n     * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n     * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n     * +----------------------------+ attached to |  |         |     distance and  |\n     *                                 each event |  +---------+     velocity.     |\n     *                                            |                                |\n     *                                            |                                |\n     *                                            +--------------------------------+\n     *\n     *\n     *\n     * Gesture that calculates cumulative movement over time in a way that just\n     * \"does the right thing\" for multiple touches. The \"right thing\" is very\n     * nuanced. When moving two touches in opposite directions, the cumulative\n     * distance is zero in each dimension. When two touches move in parallel five\n     * pixels in the same direction, the cumulative distance is five, not ten. If\n     * two touches start, one moves five in a direction, then stops and the other\n     * touch moves fives in the same direction, the cumulative distance is ten.\n     *\n     * This logic requires a kind of processing of time \"clusters\" of touch events\n     * so that two touch moves that essentially occur in parallel but move every\n     * other frame respectively, are considered part of the same movement.\n     *\n     * Explanation of some of the non-obvious fields:\n     *\n     * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n     *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n     *   centroid of the most recently moved \"cluster\" of active touches.\n     *   (Currently all move have the same timeStamp, but later we should add some\n     *   threshold for what is considered to be \"moving\"). If a palm is\n     *   accidentally counted as a touch, but a finger is moving greatly, the palm\n     *   will move slightly, but we only want to count the single moving touch.\n     * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n     *   responder.\n     * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n     *   distance. Accounts for touch moves that are clustered together in time,\n     *   moving the same direction. Only valid when currently responder (otherwise,\n     *   it only represents the drag distance below the threshold).\n     * - vx/vy: Velocity.\n     */\n\n    _initializeGestureState(gestureState) {\n      gestureState.moveX = 0;\n      gestureState.moveY = 0;\n      gestureState.x0 = 0;\n      gestureState.y0 = 0;\n      gestureState.dx = 0;\n      gestureState.dy = 0;\n      gestureState.vx = 0;\n      gestureState.vy = 0;\n      gestureState.numberActiveTouches = 0;\n      // All `gestureState` accounts for timeStamps up until:\n      gestureState._accountsForMovesUpTo = 0;\n    },\n    /**\n     * This is nuanced and is necessary. It is incorrect to continuously take all\n     * active *and* recently moved touches, find the centroid, and track how that\n     * result changes over time. Instead, we must take all recently moved\n     * touches, and calculate how the centroid has changed just for those\n     * recently moved touches, and append that change to an accumulator. This is\n     * to (at least) handle the case where the user is moving three fingers, and\n     * then one of the fingers stops but the other two continue.\n     *\n     * This is very different than taking all of the recently moved touches and\n     * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n     * changes* in the centroid of recently moved touches.\n     *\n     * There is also some nuance with how we handle multiple moved touches in a\n     * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n     * individual events, multiple touches generate two 'move' events, each of\n     * them triggering `onResponderMove`. But with the way `PanResponder` works,\n     * all of the gesture inference is performed on the first dispatch, since it\n     * looks at all of the touches (even the ones for which there hasn't been a\n     * native dispatch yet). Therefore, `PanResponder` does not call\n     * `onResponderMove` passed the first dispatch. This diverges from the\n     * typical responder callback pattern (without using `PanResponder`), but\n     * avoids more dispatches than necessary.\n     */\n    _updateGestureStateOnMove(gestureState, touchHistory) {\n      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      var movedAfter = gestureState._accountsForMovesUpTo;\n      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var nextDX = gestureState.dx + (x - prevX);\n      var nextDY = gestureState.dy + (y - prevY);\n\n      // TODO: This must be filtered intelligently.\n      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n      gestureState.vx = (nextDX - gestureState.dx) / dt;\n      gestureState.vy = (nextDY - gestureState.dy) / dt;\n      gestureState.dx = nextDX;\n      gestureState.dy = nextDY;\n      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n    },\n    /**\n     * @param {object} config Enhanced versions of all of the responder callbacks\n     * that provide not only the typical `ResponderSyntheticEvent`, but also the\n     * `PanResponder` gesture state.  Simply replace the word `Responder` with\n     * `PanResponder` in each of the typical `onResponder*` callbacks. For\n     * example, the `config` object would look like:\n     *\n     *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onPanResponderReject: (e, gestureState) => {...}`\n     *  - `onPanResponderGrant: (e, gestureState) => {...}`\n     *  - `onPanResponderStart: (e, gestureState) => {...}`\n     *  - `onPanResponderEnd: (e, gestureState) => {...}`\n     *  - `onPanResponderRelease: (e, gestureState) => {...}`\n     *  - `onPanResponderMove: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n     *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n     *\n     *  In general, for events that have capture equivalents, we update the\n     *  gestureState once in the capture phase and can use it in the bubble phase\n     *  as well.\n     *\n     *  Be careful with onStartShould* callbacks. They only reflect updated\n     *  `gestureState` for start/end events that bubble/capture to the Node.\n     *  Once the node is the responder, you can rely on every start/end event\n     *  being processed by the gesture and `gestureState` being updated\n     *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n     *  are the responder.\n     */\n    create(config) {\n      var interactionState = {\n        handle: null\n      };\n      var gestureState = {\n        // Useful for debugging\n        stateID: Math.random(),\n        moveX: 0,\n        moveY: 0,\n        x0: 0,\n        y0: 0,\n        dx: 0,\n        dy: 0,\n        vx: 0,\n        vy: 0,\n        numberActiveTouches: 0,\n        _accountsForMovesUpTo: 0\n      };\n      var panHandlers = {\n        onStartShouldSetResponder(event) {\n          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n        },\n        onMoveShouldSetResponder(event) {\n          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n        },\n        onStartShouldSetResponderCapture(event) {\n          // TODO: Actually, we should reinitialize the state any time\n          // touches.length increases from 0 active to > 0 active.\n          if (event.nativeEvent.touches.length === 1) {\n            PanResponder._initializeGestureState(gestureState);\n          }\n          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onMoveShouldSetResponderCapture(event) {\n          var touchHistory = event.touchHistory;\n          // Responder system incorrectly dispatches should* to current responder\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return false;\n          }\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onResponderGrant(event) {\n          if (!interactionState.handle) {\n            interactionState.handle = InteractionManager.createInteractionHandle();\n          }\n          gestureState.x0 = currentCentroidX(event.touchHistory);\n          gestureState.y0 = currentCentroidY(event.touchHistory);\n          gestureState.dx = 0;\n          gestureState.dy = 0;\n          if (config.onPanResponderGrant) {\n            config.onPanResponderGrant(event, gestureState);\n          }\n          // TODO: t7467124 investigate if this can be removed\n          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n        },\n        onResponderReject(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n        },\n        onResponderRelease(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderStart(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          if (config.onPanResponderStart) {\n            config.onPanResponderStart(event, gestureState);\n          }\n        },\n        onResponderMove(event) {\n          var touchHistory = event.touchHistory;\n          // Guard against the dispatch of two touch moves when there are two\n          // simultaneously changed touches.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return;\n          }\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          if (config.onPanResponderMove) {\n            config.onPanResponderMove(event, gestureState);\n          }\n        },\n        onResponderEnd(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n        },\n        onResponderTerminate(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderTerminationRequest(event) {\n          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n        }\n      };\n      return {\n        panHandlers,\n        getInteractionHandle() {\n          return interactionState.handle;\n        }\n      };\n    }\n  };\n  function clearInteractionHandle(interactionState, callback, event, gestureState) {\n    if (interactionState.handle) {\n      InteractionManager.clearInteractionHandle(interactionState.handle);\n      interactionState.handle = null;\n    }\n    if (callback) {\n      callback(event, gestureState);\n    }\n  }\n  var _default = exports.default = PanResponder;\n});","lineCount":396,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13,"Object"],[14,8,11,13],[14,9,11,13,"defineProperty"],[14,23,11,13],[14,24,11,13,"exports"],[14,31,11,13],[15,4,11,13,"value"],[15,9,11,13],[16,2,11,13],[17,2,11,13,"exports"],[17,9,11,13],[17,10,11,13,"default"],[17,17,11,13],[18,2,15,0],[18,6,15,6,"InteractionManager"],[18,24,15,24],[18,27,15,27,"require"],[18,38,15,34],[18,39,15,34,"_dependencyMap"],[18,53,15,34],[18,80,15,57],[18,81,15,58],[19,2,16,0],[19,6,16,6,"TouchHistoryMath"],[19,22,16,22],[19,25,16,25,"require"],[19,36,16,32],[19,37,16,32,"_dependencyMap"],[19,51,16,32],[19,76,16,53],[19,77,16,54],[20,2,18,0],[20,6,18,6,"currentCentroidXOfTouchesChangedAfter"],[20,43,18,43],[20,46,19,2,"TouchHistoryMath"],[20,62,19,18],[20,63,19,19,"currentCentroidXOfTouchesChangedAfter"],[20,100,19,56],[21,2,20,0],[21,6,20,6,"currentCentroidYOfTouchesChangedAfter"],[21,43,20,43],[21,46,21,2,"TouchHistoryMath"],[21,62,21,18],[21,63,21,19,"currentCentroidYOfTouchesChangedAfter"],[21,100,21,56],[22,2,22,0],[22,6,22,6,"previousCentroidXOfTouchesChangedAfter"],[22,44,22,44],[22,47,23,2,"TouchHistoryMath"],[22,63,23,18],[22,64,23,19,"previousCentroidXOfTouchesChangedAfter"],[22,102,23,57],[23,2,24,0],[23,6,24,6,"previousCentroidYOfTouchesChangedAfter"],[23,44,24,44],[23,47,25,2,"TouchHistoryMath"],[23,63,25,18],[23,64,25,19,"previousCentroidYOfTouchesChangedAfter"],[23,102,25,57],[24,2,26,0],[24,6,26,6,"currentCentroidX"],[24,22,26,22],[24,25,26,25,"TouchHistoryMath"],[24,41,26,41],[24,42,26,42,"currentCentroidX"],[24,58,26,58],[25,2,27,0],[25,6,27,6,"currentCentroidY"],[25,22,27,22],[25,25,27,25,"TouchHistoryMath"],[25,41,27,41],[25,42,27,42,"currentCentroidY"],[25,58,27,58],[27,2,29,0],[28,0,30,0],[29,0,31,0],[30,0,32,0],[31,0,33,0],[32,0,34,0],[33,0,35,0],[34,0,36,0],[35,0,37,0],[36,0,38,0],[37,0,39,0],[38,0,40,0],[39,0,41,0],[40,0,42,0],[41,0,43,0],[42,0,44,0],[43,0,45,0],[44,0,46,0],[45,0,47,0],[46,0,48,0],[47,0,49,0],[48,0,50,0],[49,0,51,0],[50,0,52,0],[51,0,53,0],[52,0,54,0],[53,0,55,0],[54,0,56,0],[55,0,57,0],[56,0,58,0],[57,0,59,0],[58,0,60,0],[59,0,61,0],[60,0,62,0],[61,0,63,0],[62,0,64,0],[63,0,65,0],[64,0,66,0],[65,0,67,0],[66,0,68,0],[67,0,69,0],[68,0,70,0],[69,0,71,0],[70,0,72,0],[71,0,73,0],[72,0,74,0],[73,0,75,0],[74,0,76,0],[75,0,77,0],[76,0,78,0],[77,0,79,0],[78,0,80,0],[79,0,81,0],[80,0,82,0],[81,0,83,0],[82,0,84,0],[83,0,85,0],[84,0,86,0],[85,0,87,0],[86,0,88,0],[87,0,89,0],[88,0,90,0],[89,0,91,0],[90,0,92,0],[91,0,93,0],[92,0,94,0],[93,0,95,0],[94,0,96,0],[95,0,97,0],[96,0,98,0],[97,0,99,0],[98,0,100,0],[99,0,101,0],[100,0,102,0],[101,0,103,0],[102,0,104,0],[103,0,105,0],[104,0,106,0],[105,0,107,0],[106,0,108,0],[107,0,109,0],[108,0,110,0],[109,0,111,0],[110,0,112,0],[111,0,113,0],[112,0,114,0],[113,0,115,0],[114,0,116,0],[115,0,117,0],[116,0,118,0],[117,0,119,0],[118,0,120,0],[119,0,121,0],[120,0,122,0],[121,0,123,0],[122,0,124,0],[123,0,125,0],[125,2,229,0],[125,6,229,6,"PanResponder"],[125,18,229,18],[125,21,229,21],[126,4,230,2],[127,0,231,0],[128,0,232,0],[129,0,233,0],[130,0,234,0],[131,0,235,0],[132,0,236,0],[133,0,237,0],[134,0,238,0],[135,0,239,0],[136,0,240,0],[137,0,241,0],[138,0,242,0],[139,0,243,0],[140,0,244,0],[141,0,245,0],[142,0,246,0],[143,0,247,0],[144,0,248,0],[145,0,249,0],[146,0,250,0],[147,0,251,0],[148,0,252,0],[149,0,253,0],[150,0,254,0],[151,0,255,0],[152,0,256,0],[153,0,257,0],[154,0,258,0],[155,0,259,0],[156,0,260,0],[157,0,261,0],[158,0,262,0],[159,0,263,0],[160,0,264,0],[161,0,265,0],[162,0,266,0],[163,0,267,0],[164,0,268,0],[165,0,269,0],[166,0,270,0],[167,0,271,0],[168,0,272,0],[169,0,273,0],[170,0,274,0],[171,0,275,0],[172,0,276,0],[173,0,277,0],[174,0,278,0],[175,0,279,0],[176,0,280,0],[177,0,281,0],[178,0,282,0],[179,0,283,0],[180,0,284,0],[181,0,285,0],[182,0,286,0],[183,0,287,0],[184,0,288,0],[185,0,289,0],[186,0,290,0],[187,0,291,0],[189,4,293,2,"_initializeGestureState"],[189,27,293,25,"_initializeGestureState"],[189,28,293,26,"gestureState"],[189,40,293,52],[189,42,293,54],[190,6,294,4,"gestureState"],[190,18,294,16],[190,19,294,17,"moveX"],[190,24,294,22],[190,27,294,25],[190,28,294,26],[191,6,295,4,"gestureState"],[191,18,295,16],[191,19,295,17,"moveY"],[191,24,295,22],[191,27,295,25],[191,28,295,26],[192,6,296,4,"gestureState"],[192,18,296,16],[192,19,296,17,"x0"],[192,21,296,19],[192,24,296,22],[192,25,296,23],[193,6,297,4,"gestureState"],[193,18,297,16],[193,19,297,17,"y0"],[193,21,297,19],[193,24,297,22],[193,25,297,23],[194,6,298,4,"gestureState"],[194,18,298,16],[194,19,298,17,"dx"],[194,21,298,19],[194,24,298,22],[194,25,298,23],[195,6,299,4,"gestureState"],[195,18,299,16],[195,19,299,17,"dy"],[195,21,299,19],[195,24,299,22],[195,25,299,23],[196,6,300,4,"gestureState"],[196,18,300,16],[196,19,300,17,"vx"],[196,21,300,19],[196,24,300,22],[196,25,300,23],[197,6,301,4,"gestureState"],[197,18,301,16],[197,19,301,17,"vy"],[197,21,301,19],[197,24,301,22],[197,25,301,23],[198,6,302,4,"gestureState"],[198,18,302,16],[198,19,302,17,"numberActiveTouches"],[198,38,302,36],[198,41,302,39],[198,42,302,40],[199,6,303,4],[200,6,304,4,"gestureState"],[200,18,304,16],[200,19,304,17,"_accountsForMovesUpTo"],[200,40,304,38],[200,43,304,41],[200,44,304,42],[201,4,305,2],[201,5,305,3],[202,4,307,2],[203,0,308,0],[204,0,309,0],[205,0,310,0],[206,0,311,0],[207,0,312,0],[208,0,313,0],[209,0,314,0],[210,0,315,0],[211,0,316,0],[212,0,317,0],[213,0,318,0],[214,0,319,0],[215,0,320,0],[216,0,321,0],[217,0,322,0],[218,0,323,0],[219,0,324,0],[220,0,325,0],[221,0,326,0],[222,0,327,0],[223,0,328,0],[224,0,329,0],[225,0,330,0],[226,4,331,2,"_updateGestureStateOnMove"],[226,29,331,27,"_updateGestureStateOnMove"],[226,30,332,4,"gestureState"],[226,42,332,30],[226,44,333,4,"touchHistory"],[226,56,333,59],[226,58,334,4],[227,6,335,4,"gestureState"],[227,18,335,16],[227,19,335,17,"numberActiveTouches"],[227,38,335,36],[227,41,335,39,"touchHistory"],[227,53,335,51],[227,54,335,52,"numberActiveTouches"],[227,73,335,71],[228,6,336,4,"gestureState"],[228,18,336,16],[228,19,336,17,"moveX"],[228,24,336,22],[228,27,336,25,"currentCentroidXOfTouchesChangedAfter"],[228,64,336,62],[228,65,337,6,"touchHistory"],[228,77,337,18],[228,79,338,6,"gestureState"],[228,91,338,18],[228,92,338,19,"_accountsForMovesUpTo"],[228,113,339,4],[228,114,339,5],[229,6,340,4,"gestureState"],[229,18,340,16],[229,19,340,17,"moveY"],[229,24,340,22],[229,27,340,25,"currentCentroidYOfTouchesChangedAfter"],[229,64,340,62],[229,65,341,6,"touchHistory"],[229,77,341,18],[229,79,342,6,"gestureState"],[229,91,342,18],[229,92,342,19,"_accountsForMovesUpTo"],[229,113,343,4],[229,114,343,5],[230,6,344,4],[230,10,344,10,"movedAfter"],[230,20,344,20],[230,23,344,23,"gestureState"],[230,35,344,35],[230,36,344,36,"_accountsForMovesUpTo"],[230,57,344,57],[231,6,345,4],[231,10,345,10,"prevX"],[231,15,345,15],[231,18,345,18,"previousCentroidXOfTouchesChangedAfter"],[231,56,345,56],[231,57,346,6,"touchHistory"],[231,69,346,18],[231,71,347,6,"movedAfter"],[231,81,348,4],[231,82,348,5],[232,6,349,4],[232,10,349,10,"x"],[232,11,349,11],[232,14,349,14,"currentCentroidXOfTouchesChangedAfter"],[232,51,349,51],[232,52,349,52,"touchHistory"],[232,64,349,64],[232,66,349,66,"movedAfter"],[232,76,349,76],[232,77,349,77],[233,6,350,4],[233,10,350,10,"prevY"],[233,15,350,15],[233,18,350,18,"previousCentroidYOfTouchesChangedAfter"],[233,56,350,56],[233,57,351,6,"touchHistory"],[233,69,351,18],[233,71,352,6,"movedAfter"],[233,81,353,4],[233,82,353,5],[234,6,354,4],[234,10,354,10,"y"],[234,11,354,11],[234,14,354,14,"currentCentroidYOfTouchesChangedAfter"],[234,51,354,51],[234,52,354,52,"touchHistory"],[234,64,354,64],[234,66,354,66,"movedAfter"],[234,76,354,76],[234,77,354,77],[235,6,355,4],[235,10,355,10,"nextDX"],[235,16,355,16],[235,19,355,19,"gestureState"],[235,31,355,31],[235,32,355,32,"dx"],[235,34,355,34],[235,38,355,38,"x"],[235,39,355,39],[235,42,355,42,"prevX"],[235,47,355,47],[235,48,355,48],[236,6,356,4],[236,10,356,10,"nextDY"],[236,16,356,16],[236,19,356,19,"gestureState"],[236,31,356,31],[236,32,356,32,"dy"],[236,34,356,34],[236,38,356,38,"y"],[236,39,356,39],[236,42,356,42,"prevY"],[236,47,356,47],[236,48,356,48],[238,6,358,4],[239,6,359,4],[239,10,359,10,"dt"],[239,12,359,12],[239,15,360,6,"touchHistory"],[239,27,360,18],[239,28,360,19,"mostRecentTimeStamp"],[239,47,360,38],[239,50,360,41,"gestureState"],[239,62,360,53],[239,63,360,54,"_accountsForMovesUpTo"],[239,84,360,75],[240,6,361,4,"gestureState"],[240,18,361,16],[240,19,361,17,"vx"],[240,21,361,19],[240,24,361,22],[240,25,361,23,"nextDX"],[240,31,361,29],[240,34,361,32,"gestureState"],[240,46,361,44],[240,47,361,45,"dx"],[240,49,361,47],[240,53,361,51,"dt"],[240,55,361,53],[241,6,362,4,"gestureState"],[241,18,362,16],[241,19,362,17,"vy"],[241,21,362,19],[241,24,362,22],[241,25,362,23,"nextDY"],[241,31,362,29],[241,34,362,32,"gestureState"],[241,46,362,44],[241,47,362,45,"dy"],[241,49,362,47],[241,53,362,51,"dt"],[241,55,362,53],[242,6,364,4,"gestureState"],[242,18,364,16],[242,19,364,17,"dx"],[242,21,364,19],[242,24,364,22,"nextDX"],[242,30,364,28],[243,6,365,4,"gestureState"],[243,18,365,16],[243,19,365,17,"dy"],[243,21,365,19],[243,24,365,22,"nextDY"],[243,30,365,28],[244,6,366,4,"gestureState"],[244,18,366,16],[244,19,366,17,"_accountsForMovesUpTo"],[244,40,366,38],[244,43,366,41,"touchHistory"],[244,55,366,53],[244,56,366,54,"mostRecentTimeStamp"],[244,75,366,73],[245,4,367,2],[245,5,367,3],[246,4,369,2],[247,0,370,0],[248,0,371,0],[249,0,372,0],[250,0,373,0],[251,0,374,0],[252,0,375,0],[253,0,376,0],[254,0,377,0],[255,0,378,0],[256,0,379,0],[257,0,380,0],[258,0,381,0],[259,0,382,0],[260,0,383,0],[261,0,384,0],[262,0,385,0],[263,0,386,0],[264,0,387,0],[265,0,388,0],[266,0,389,0],[267,0,390,0],[268,0,391,0],[269,0,392,0],[270,0,393,0],[271,0,394,0],[272,0,395,0],[273,0,396,0],[274,0,397,0],[275,0,398,0],[276,0,399,0],[277,0,400,0],[278,4,401,2,"create"],[278,10,401,8,"create"],[278,11,401,9,"config"],[278,17,401,35],[278,19,404,4],[279,6,405,4],[279,10,405,10,"interactionState"],[279,26,405,26],[279,29,405,29],[280,8,406,6,"handle"],[280,14,406,12],[280,16,406,15],[281,6,407,4],[281,7,407,5],[282,6,408,4],[282,10,408,10,"gestureState"],[282,22,408,36],[282,25,408,39],[283,8,409,6],[284,8,410,6,"stateID"],[284,15,410,13],[284,17,410,15,"Math"],[284,21,410,19],[284,22,410,20,"random"],[284,28,410,26],[284,29,410,27],[284,30,410,28],[285,8,411,6,"moveX"],[285,13,411,11],[285,15,411,13],[285,16,411,14],[286,8,412,6,"moveY"],[286,13,412,11],[286,15,412,13],[286,16,412,14],[287,8,413,6,"x0"],[287,10,413,8],[287,12,413,10],[287,13,413,11],[288,8,414,6,"y0"],[288,10,414,8],[288,12,414,10],[288,13,414,11],[289,8,415,6,"dx"],[289,10,415,8],[289,12,415,10],[289,13,415,11],[290,8,416,6,"dy"],[290,10,416,8],[290,12,416,10],[290,13,416,11],[291,8,417,6,"vx"],[291,10,417,8],[291,12,417,10],[291,13,417,11],[292,8,418,6,"vy"],[292,10,418,8],[292,12,418,10],[292,13,418,11],[293,8,419,6,"numberActiveTouches"],[293,27,419,25],[293,29,419,27],[293,30,419,28],[294,8,420,6,"_accountsForMovesUpTo"],[294,29,420,27],[294,31,420,29],[295,6,421,4],[295,7,421,5],[296,6,422,4],[296,10,422,10,"panHandlers"],[296,21,422,21],[296,24,422,24],[297,8,423,6,"onStartShouldSetResponder"],[297,33,423,31,"onStartShouldSetResponder"],[297,34,423,32,"event"],[297,39,423,49],[297,41,423,60],[298,10,424,8],[298,17,424,15,"config"],[298,23,424,21],[298,24,424,22,"onStartShouldSetPanResponder"],[298,52,424,50],[298,56,424,54],[298,60,424,58],[298,63,425,12],[298,68,425,17],[298,71,426,12,"config"],[298,77,426,18],[298,78,426,19,"onStartShouldSetPanResponder"],[298,106,426,47],[298,107,426,48,"event"],[298,112,426,53],[298,114,426,55,"gestureState"],[298,126,426,67],[298,127,426,68],[299,8,427,6],[299,9,427,7],[300,8,428,6,"onMoveShouldSetResponder"],[300,32,428,30,"onMoveShouldSetResponder"],[300,33,428,31,"event"],[300,38,428,48],[300,40,428,59],[301,10,429,8],[301,17,429,15,"config"],[301,23,429,21],[301,24,429,22,"onMoveShouldSetPanResponder"],[301,51,429,49],[301,55,429,53],[301,59,429,57],[301,62,430,12],[301,67,430,17],[301,70,431,12,"config"],[301,76,431,18],[301,77,431,19,"onMoveShouldSetPanResponder"],[301,104,431,46],[301,105,431,47,"event"],[301,110,431,52],[301,112,431,54,"gestureState"],[301,124,431,66],[301,125,431,67],[302,8,432,6],[302,9,432,7],[303,8,433,6,"onStartShouldSetResponderCapture"],[303,40,433,38,"onStartShouldSetResponderCapture"],[303,41,433,39,"event"],[303,46,433,56],[303,48,433,67],[304,10,434,8],[305,10,435,8],[306,10,436,8],[306,14,436,12,"event"],[306,19,436,17],[306,20,436,18,"nativeEvent"],[306,31,436,29],[306,32,436,30,"touches"],[306,39,436,37],[306,40,436,38,"length"],[306,46,436,44],[306,51,436,49],[306,52,436,50],[306,54,436,52],[307,12,437,10,"PanResponder"],[307,24,437,22],[307,25,437,23,"_initializeGestureState"],[307,48,437,46],[307,49,437,47,"gestureState"],[307,61,437,59],[307,62,437,60],[308,10,438,8],[309,10,439,8,"gestureState"],[309,22,439,20],[309,23,439,21,"numberActiveTouches"],[309,42,439,40],[309,45,440,10,"event"],[309,50,440,15],[309,51,440,16,"touchHistory"],[309,63,440,28],[309,64,440,29,"numberActiveTouches"],[309,83,440,48],[310,10,441,8],[310,17,441,15,"config"],[310,23,441,21],[310,24,441,22,"onStartShouldSetPanResponderCapture"],[310,59,441,57],[310,63,441,61],[310,67,441,65],[310,70,442,12,"config"],[310,76,442,18],[310,77,442,19,"onStartShouldSetPanResponderCapture"],[310,112,442,54],[310,113,442,55,"event"],[310,118,442,60],[310,120,442,62,"gestureState"],[310,132,442,74],[310,133,442,75],[310,136,443,12],[310,141,443,17],[311,8,444,6],[311,9,444,7],[312,8,446,6,"onMoveShouldSetResponderCapture"],[312,39,446,37,"onMoveShouldSetResponderCapture"],[312,40,446,38,"event"],[312,45,446,55],[312,47,446,66],[313,10,447,8],[313,14,447,14,"touchHistory"],[313,26,447,26],[313,29,447,29,"event"],[313,34,447,34],[313,35,447,35,"touchHistory"],[313,47,447,47],[314,10,448,8],[315,10,449,8],[316,10,450,8],[317,10,451,8],[317,14,452,10,"gestureState"],[317,26,452,22],[317,27,452,23,"_accountsForMovesUpTo"],[317,48,452,44],[317,53,453,10,"touchHistory"],[317,65,453,22],[317,66,453,23,"mostRecentTimeStamp"],[317,85,453,42],[317,87,454,10],[318,12,455,10],[318,19,455,17],[318,24,455,22],[319,10,456,8],[320,10,457,8,"PanResponder"],[320,22,457,20],[320,23,457,21,"_updateGestureStateOnMove"],[320,48,457,46],[320,49,457,47,"gestureState"],[320,61,457,59],[320,63,457,61,"touchHistory"],[320,75,457,73],[320,76,457,74],[321,10,458,8],[321,17,458,15,"config"],[321,23,458,21],[321,24,458,22,"onMoveShouldSetPanResponderCapture"],[321,58,458,56],[321,61,459,12,"config"],[321,67,459,18],[321,68,459,19,"onMoveShouldSetPanResponderCapture"],[321,102,459,53],[321,103,459,54,"event"],[321,108,459,59],[321,110,459,61,"gestureState"],[321,122,459,73],[321,123,459,74],[321,126,460,12],[321,131,460,17],[322,8,461,6],[322,9,461,7],[323,8,463,6,"onResponderGrant"],[323,24,463,22,"onResponderGrant"],[323,25,463,23,"event"],[323,30,463,40],[323,32,463,51],[324,10,464,8],[324,14,464,12],[324,15,464,13,"interactionState"],[324,31,464,29],[324,32,464,30,"handle"],[324,38,464,36],[324,40,464,38],[325,12,465,10,"interactionState"],[325,28,465,26],[325,29,465,27,"handle"],[325,35,465,33],[325,38,466,12,"InteractionManager"],[325,56,466,30],[325,57,466,31,"createInteractionHandle"],[325,80,466,54],[325,81,466,55],[325,82,466,56],[326,10,467,8],[327,10,468,8,"gestureState"],[327,22,468,20],[327,23,468,21,"x0"],[327,25,468,23],[327,28,468,26,"currentCentroidX"],[327,44,468,42],[327,45,468,43,"event"],[327,50,468,48],[327,51,468,49,"touchHistory"],[327,63,468,61],[327,64,468,62],[328,10,469,8,"gestureState"],[328,22,469,20],[328,23,469,21,"y0"],[328,25,469,23],[328,28,469,26,"currentCentroidY"],[328,44,469,42],[328,45,469,43,"event"],[328,50,469,48],[328,51,469,49,"touchHistory"],[328,63,469,61],[328,64,469,62],[329,10,470,8,"gestureState"],[329,22,470,20],[329,23,470,21,"dx"],[329,25,470,23],[329,28,470,26],[329,29,470,27],[330,10,471,8,"gestureState"],[330,22,471,20],[330,23,471,21,"dy"],[330,25,471,23],[330,28,471,26],[330,29,471,27],[331,10,472,8],[331,14,472,12,"config"],[331,20,472,18],[331,21,472,19,"onPanResponderGrant"],[331,40,472,38],[331,42,472,40],[332,12,473,10,"config"],[332,18,473,16],[332,19,473,17,"onPanResponderGrant"],[332,38,473,36],[332,39,473,37,"event"],[332,44,473,42],[332,46,473,44,"gestureState"],[332,58,473,56],[332,59,473,57],[333,10,474,8],[334,10,475,8],[335,10,476,8],[335,17,476,15,"config"],[335,23,476,21],[335,24,476,22,"onShouldBlockNativeResponder"],[335,52,476,50],[335,56,476,54],[335,60,476,58],[335,63,477,12],[335,67,477,16],[335,70,478,12,"config"],[335,76,478,18],[335,77,478,19,"onShouldBlockNativeResponder"],[335,105,478,47],[335,106,478,48,"event"],[335,111,478,53],[335,113,478,55,"gestureState"],[335,125,478,67],[335,126,478,68],[336,8,479,6],[336,9,479,7],[337,8,481,6,"onResponderReject"],[337,25,481,23,"onResponderReject"],[337,26,481,24,"event"],[337,31,481,41],[337,33,481,49],[338,10,482,8,"clearInteractionHandle"],[338,32,482,30],[338,33,483,10,"interactionState"],[338,49,483,26],[338,51,484,10,"config"],[338,57,484,16],[338,58,484,17,"onPanResponderReject"],[338,78,484,37],[338,80,485,10,"event"],[338,85,485,15],[338,87,486,10,"gestureState"],[338,99,487,8],[338,100,487,9],[339,8,488,6],[339,9,488,7],[340,8,490,6,"onResponderRelease"],[340,26,490,24,"onResponderRelease"],[340,27,490,25,"event"],[340,32,490,42],[340,34,490,50],[341,10,491,8,"clearInteractionHandle"],[341,32,491,30],[341,33,492,10,"interactionState"],[341,49,492,26],[341,51,493,10,"config"],[341,57,493,16],[341,58,493,17,"onPanResponderRelease"],[341,79,493,38],[341,81,494,10,"event"],[341,86,494,15],[341,88,495,10,"gestureState"],[341,100,496,8],[341,101,496,9],[342,10,497,8,"PanResponder"],[342,22,497,20],[342,23,497,21,"_initializeGestureState"],[342,46,497,44],[342,47,497,45,"gestureState"],[342,59,497,57],[342,60,497,58],[343,8,498,6],[343,9,498,7],[344,8,500,6,"onResponderStart"],[344,24,500,22,"onResponderStart"],[344,25,500,23,"event"],[344,30,500,40],[344,32,500,48],[345,10,501,8],[345,14,501,14,"touchHistory"],[345,26,501,26],[345,29,501,29,"event"],[345,34,501,34],[345,35,501,35,"touchHistory"],[345,47,501,47],[346,10,502,8,"gestureState"],[346,22,502,20],[346,23,502,21,"numberActiveTouches"],[346,42,502,40],[346,45,502,43,"touchHistory"],[346,57,502,55],[346,58,502,56,"numberActiveTouches"],[346,77,502,75],[347,10,503,8],[347,14,503,12,"config"],[347,20,503,18],[347,21,503,19,"onPanResponderStart"],[347,40,503,38],[347,42,503,40],[348,12,504,10,"config"],[348,18,504,16],[348,19,504,17,"onPanResponderStart"],[348,38,504,36],[348,39,504,37,"event"],[348,44,504,42],[348,46,504,44,"gestureState"],[348,58,504,56],[348,59,504,57],[349,10,505,8],[350,8,506,6],[350,9,506,7],[351,8,508,6,"onResponderMove"],[351,23,508,21,"onResponderMove"],[351,24,508,22,"event"],[351,29,508,39],[351,31,508,47],[352,10,509,8],[352,14,509,14,"touchHistory"],[352,26,509,26],[352,29,509,29,"event"],[352,34,509,34],[352,35,509,35,"touchHistory"],[352,47,509,47],[353,10,510,8],[354,10,511,8],[355,10,512,8],[355,14,513,10,"gestureState"],[355,26,513,22],[355,27,513,23,"_accountsForMovesUpTo"],[355,48,513,44],[355,53,514,10,"touchHistory"],[355,65,514,22],[355,66,514,23,"mostRecentTimeStamp"],[355,85,514,42],[355,87,515,10],[356,12,516,10],[357,10,517,8],[358,10,518,8],[359,10,519,8],[360,10,520,8,"PanResponder"],[360,22,520,20],[360,23,520,21,"_updateGestureStateOnMove"],[360,48,520,46],[360,49,520,47,"gestureState"],[360,61,520,59],[360,63,520,61,"touchHistory"],[360,75,520,73],[360,76,520,74],[361,10,521,8],[361,14,521,12,"config"],[361,20,521,18],[361,21,521,19,"onPanResponderMove"],[361,39,521,37],[361,41,521,39],[362,12,522,10,"config"],[362,18,522,16],[362,19,522,17,"onPanResponderMove"],[362,37,522,35],[362,38,522,36,"event"],[362,43,522,41],[362,45,522,43,"gestureState"],[362,57,522,55],[362,58,522,56],[363,10,523,8],[364,8,524,6],[364,9,524,7],[365,8,526,6,"onResponderEnd"],[365,22,526,20,"onResponderEnd"],[365,23,526,21,"event"],[365,28,526,38],[365,30,526,46],[366,10,527,8],[366,14,527,14,"touchHistory"],[366,26,527,26],[366,29,527,29,"event"],[366,34,527,34],[366,35,527,35,"touchHistory"],[366,47,527,47],[367,10,528,8,"gestureState"],[367,22,528,20],[367,23,528,21,"numberActiveTouches"],[367,42,528,40],[367,45,528,43,"touchHistory"],[367,57,528,55],[367,58,528,56,"numberActiveTouches"],[367,77,528,75],[368,10,529,8,"clearInteractionHandle"],[368,32,529,30],[368,33,530,10,"interactionState"],[368,49,530,26],[368,51,531,10,"config"],[368,57,531,16],[368,58,531,17,"onPanResponderEnd"],[368,75,531,34],[368,77,532,10,"event"],[368,82,532,15],[368,84,533,10,"gestureState"],[368,96,534,8],[368,97,534,9],[369,8,535,6],[369,9,535,7],[370,8,537,6,"onResponderTerminate"],[370,28,537,26,"onResponderTerminate"],[370,29,537,27,"event"],[370,34,537,44],[370,36,537,52],[371,10,538,8,"clearInteractionHandle"],[371,32,538,30],[371,33,539,10,"interactionState"],[371,49,539,26],[371,51,540,10,"config"],[371,57,540,16],[371,58,540,17,"onPanResponderTerminate"],[371,81,540,40],[371,83,541,10,"event"],[371,88,541,15],[371,90,542,10,"gestureState"],[371,102,543,8],[371,103,543,9],[372,10,544,8,"PanResponder"],[372,22,544,20],[372,23,544,21,"_initializeGestureState"],[372,46,544,44],[372,47,544,45,"gestureState"],[372,59,544,57],[372,60,544,58],[373,8,545,6],[373,9,545,7],[374,8,547,6,"onResponderTerminationRequest"],[374,37,547,35,"onResponderTerminationRequest"],[374,38,547,36,"event"],[374,43,547,53],[374,45,547,64],[375,10,548,8],[375,17,548,15,"config"],[375,23,548,21],[375,24,548,22,"onPanResponderTerminationRequest"],[375,56,548,54],[375,60,548,58],[375,64,548,62],[375,67,549,12],[375,71,549,16],[375,74,550,12,"config"],[375,80,550,18],[375,81,550,19,"onPanResponderTerminationRequest"],[375,113,550,51],[375,114,550,52,"event"],[375,119,550,57],[375,121,550,59,"gestureState"],[375,133,550,71],[375,134,550,72],[376,8,551,6],[377,6,552,4],[377,7,552,5],[378,6,553,4],[378,13,553,11],[379,8,554,6,"panHandlers"],[379,19,554,17],[380,8,555,6,"getInteractionHandle"],[380,28,555,26,"getInteractionHandle"],[380,29,555,26],[380,31,555,38],[381,10,556,8],[381,17,556,15,"interactionState"],[381,33,556,31],[381,34,556,32,"handle"],[381,40,556,38],[382,8,557,6],[383,6,558,4],[383,7,558,5],[384,4,559,2],[385,2,560,0],[385,3,560,1],[386,2,562,0],[386,11,562,9,"clearInteractionHandle"],[386,33,562,31,"clearInteractionHandle"],[386,34,563,2,"interactionState"],[386,50,563,42],[386,52,564,2,"callback"],[386,60,564,47],[386,62,565,2,"event"],[386,67,565,19],[386,69,566,2,"gestureState"],[386,81,566,28],[386,83,567,2],[387,4,568,2],[387,8,568,6,"interactionState"],[387,24,568,22],[387,25,568,23,"handle"],[387,31,568,29],[387,33,568,31],[388,6,569,4,"InteractionManager"],[388,24,569,22],[388,25,569,23,"clearInteractionHandle"],[388,47,569,45],[388,48,569,46,"interactionState"],[388,64,569,62],[388,65,569,63,"handle"],[388,71,569,69],[388,72,569,70],[389,6,570,4,"interactionState"],[389,22,570,20],[389,23,570,21,"handle"],[389,29,570,27],[389,32,570,30],[389,36,570,34],[390,4,571,2],[391,4,572,2],[391,8,572,6,"callback"],[391,16,572,14],[391,18,572,16],[392,6,573,4,"callback"],[392,14,573,12],[392,15,573,13,"event"],[392,20,573,18],[392,22,573,20,"gestureState"],[392,34,573,32],[392,35,573,33],[393,4,574,2],[394,2,575,0],[395,2,575,1],[395,6,575,1,"_default"],[395,14,575,1],[395,17,575,1,"exports"],[395,24,575,1],[395,25,575,1,"default"],[395,32,575,1],[395,35,579,15,"PanResponder"],[395,47,579,27],[396,0,579,27],[396,3]],"functionMap":{"names":["<global>","_initializeGestureState","_updateGestureStateOnMove","create","panHandlers.onStartShouldSetResponder","panHandlers.onMoveShouldSetResponder","panHandlers.onStartShouldSetResponderCapture","panHandlers.onMoveShouldSetResponderCapture","panHandlers.onResponderGrant","panHandlers.onResponderReject","panHandlers.onResponderRelease","panHandlers.onResponderStart","panHandlers.onResponderMove","panHandlers.onResponderEnd","panHandlers.onResponderTerminate","panHandlers.onResponderTerminationRequest","getInteractionHandle","clearInteractionHandle"],"mappings":"AAA;ECoS;GDY;EE0B;GFoC;EGkC;MCsB;ODI;MEC;OFI;MGC;OHW;MIE;OJe;MKE;OLgB;MME;ONO;MOE;OPQ;MQE;ORM;MSE;OTgB;MUE;OVS;MWE;OXQ;MYE;OZI;MaI;ObE;GHE;AiBG;CjBa"}},"type":"js/module"}]}