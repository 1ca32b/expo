{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":73,"column":0,"index":1902}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":73,"column":0,"index":1902}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":73,"column":0,"index":1902}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"invariant","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":34,"index":256}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  var ChildListCollection = exports.default = /*#__PURE__*/function () {\n    function ChildListCollection() {\n      (0, _classCallCheck2.default)(this, ChildListCollection);\n      this._cellKeyToChildren = new Map();\n      this._childrenToCellKey = new Map();\n    }\n    return (0, _createClass2.default)(ChildListCollection, [{\n      key: \"add\",\n      value: function add(list, cellKey) {\n        (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n        var cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n        cellLists.add(list);\n        this._cellKeyToChildren.set(cellKey, cellLists);\n        this._childrenToCellKey.set(list, cellKey);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(list) {\n        var cellKey = this._childrenToCellKey.get(list);\n        (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n        this._childrenToCellKey.delete(list);\n        var cellLists = this._cellKeyToChildren.get(cellKey);\n        (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n        cellLists.delete(list);\n        if (cellLists.size === 0) {\n          this._cellKeyToChildren.delete(cellKey);\n        }\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(fn) {\n        for (var listSet of this._cellKeyToChildren.values()) {\n          for (var list of listSet) {\n            fn(list);\n          }\n        }\n      }\n    }, {\n      key: \"forEachInCell\",\n      value: function forEachInCell(cellKey, fn) {\n        var listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n        for (var list of listSet) {\n          fn(list);\n        }\n      }\n    }, {\n      key: \"anyInCell\",\n      value: function anyInCell(cellKey, fn) {\n        var listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n        for (var list of listSet) {\n          if (fn(list)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"size\",\n      value: function size() {\n        return this._childrenToCellKey.size;\n      }\n    }]);\n  }();\n});","lineCount":82,"map":[[9,2,11,0],[9,6,11,0,"_invariant"],[9,16,11,0],[9,19,11,0,"_interopRequireDefault"],[9,41,11,0],[9,42,11,0,"_$$_REQUIRE"],[9,53,11,0],[9,54,11,0,"_dependencyMap"],[9,68,11,0],[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[19,2,1,0],[19,6,13,21,"ChildListCollection"],[19,25,13,40],[19,28,13,40,"exports"],[19,35,13,40],[19,36,13,40,"default"],[19,43,13,40],[20,4,13,40],[20,13,13,40,"ChildListCollection"],[20,33,13,40],[21,6,13,40],[21,10,13,40,"_classCallCheck2"],[21,26,13,40],[21,27,13,40,"default"],[21,34,13,40],[21,42,13,40,"ChildListCollection"],[21,61,13,40],[22,6,13,40],[22,11,14,2,"_cellKeyToChildren"],[22,29,14,20],[22,32,14,48],[22,36,14,52,"Map"],[22,39,14,55],[22,40,14,56],[22,41,14,57],[23,6,14,57],[23,11,15,2,"_childrenToCellKey"],[23,29,15,20],[23,32,15,43],[23,36,15,47,"Map"],[23,39,15,50],[23,40,15,51],[23,41,15,52],[24,4,15,52],[25,4,15,52],[25,15,15,52,"_createClass2"],[25,28,15,52],[25,29,15,52,"default"],[25,36,15,52],[25,38,15,52,"ChildListCollection"],[25,57,15,52],[26,6,15,52,"key"],[26,9,15,52],[27,6,15,52,"value"],[27,11,15,52],[27,13,17,2],[27,22,17,2,"add"],[27,25,17,5,"add"],[27,26,17,6,"list"],[27,30,17,17],[27,32,17,19,"cellKey"],[27,39,17,34],[27,41,17,42],[28,8,18,4],[28,12,18,4,"invariant"],[28,30,18,13],[28,32,19,6],[28,33,19,7],[28,37,19,11],[28,38,19,12,"_childrenToCellKey"],[28,56,19,30],[28,57,19,31,"has"],[28,60,19,34],[28,61,19,35,"list"],[28,65,19,39],[28,66,19,40],[28,68,20,6],[28,110,21,4],[28,111,21,5],[29,8,23,4],[29,12,23,10,"cellLists"],[29,21,23,19],[29,24,23,22],[29,28,23,26],[29,29,23,27,"_cellKeyToChildren"],[29,47,23,45],[29,48,23,46,"get"],[29,51,23,49],[29,52,23,50,"cellKey"],[29,59,23,57],[29,60,23,58],[29,64,23,62],[29,68,23,66,"Set"],[29,71,23,69],[29,72,23,70],[29,73,23,71],[30,8,24,4,"cellLists"],[30,17,24,13],[30,18,24,14,"add"],[30,21,24,17],[30,22,24,18,"list"],[30,26,24,22],[30,27,24,23],[31,8,25,4],[31,12,25,8],[31,13,25,9,"_cellKeyToChildren"],[31,31,25,27],[31,32,25,28,"set"],[31,35,25,31],[31,36,25,32,"cellKey"],[31,43,25,39],[31,45,25,41,"cellLists"],[31,54,25,50],[31,55,25,51],[32,8,27,4],[32,12,27,8],[32,13,27,9,"_childrenToCellKey"],[32,31,27,27],[32,32,27,28,"set"],[32,35,27,31],[32,36,27,32,"list"],[32,40,27,36],[32,42,27,38,"cellKey"],[32,49,27,45],[32,50,27,46],[33,6,28,2],[34,4,28,3],[35,6,28,3,"key"],[35,9,28,3],[36,6,28,3,"value"],[36,11,28,3],[36,13,30,2],[36,22,30,2,"remove"],[36,28,30,8,"remove"],[36,29,30,9,"list"],[36,33,30,20],[36,35,30,28],[37,8,31,4],[37,12,31,10,"cellKey"],[37,19,31,17],[37,22,31,20],[37,26,31,24],[37,27,31,25,"_childrenToCellKey"],[37,45,31,43],[37,46,31,44,"get"],[37,49,31,47],[37,50,31,48,"list"],[37,54,31,52],[37,55,31,53],[38,8,32,4],[38,12,32,4,"invariant"],[38,30,32,13],[38,32,32,14,"cellKey"],[38,39,32,21],[38,43,32,25],[38,47,32,29],[38,49,32,31],[38,90,32,72],[38,91,32,73],[39,8,33,4],[39,12,33,8],[39,13,33,9,"_childrenToCellKey"],[39,31,33,27],[39,32,33,28,"delete"],[39,38,33,34],[39,39,33,35,"list"],[39,43,33,39],[39,44,33,40],[40,8,35,4],[40,12,35,10,"cellLists"],[40,21,35,19],[40,24,35,22],[40,28,35,26],[40,29,35,27,"_cellKeyToChildren"],[40,47,35,45],[40,48,35,46,"get"],[40,51,35,49],[40,52,35,50,"cellKey"],[40,59,35,57],[40,60,35,58],[41,8,36,4],[41,12,36,4,"invariant"],[41,30,36,13],[41,32,36,14,"cellLists"],[41,41,36,23],[41,43,36,25],[41,86,36,68],[41,87,36,69],[42,8,37,4,"cellLists"],[42,17,37,13],[42,18,37,14,"delete"],[42,24,37,20],[42,25,37,21,"list"],[42,29,37,25],[42,30,37,26],[43,8,39,4],[43,12,39,8,"cellLists"],[43,21,39,17],[43,22,39,18,"size"],[43,26,39,22],[43,31,39,27],[43,32,39,28],[43,34,39,30],[44,10,40,6],[44,14,40,10],[44,15,40,11,"_cellKeyToChildren"],[44,33,40,29],[44,34,40,30,"delete"],[44,40,40,36],[44,41,40,37,"cellKey"],[44,48,40,44],[44,49,40,45],[45,8,41,4],[46,6,42,2],[47,4,42,3],[48,6,42,3,"key"],[48,9,42,3],[49,6,42,3,"value"],[49,11,42,3],[49,13,44,2],[49,22,44,2,"forEach"],[49,29,44,9,"forEach"],[49,30,44,10,"fn"],[49,32,44,27],[49,34,44,35],[50,8,45,4],[50,13,45,9],[50,17,45,15,"listSet"],[50,24,45,22],[50,28,45,26],[50,32,45,30],[50,33,45,31,"_cellKeyToChildren"],[50,51,45,49],[50,52,45,50,"values"],[50,58,45,56],[50,59,45,57],[50,60,45,58],[50,62,45,60],[51,10,46,6],[51,15,46,11],[51,19,46,17,"list"],[51,23,46,21],[51,27,46,25,"listSet"],[51,34,46,32],[51,36,46,34],[52,12,47,8,"fn"],[52,14,47,10],[52,15,47,11,"list"],[52,19,47,15],[52,20,47,16],[53,10,48,6],[54,8,49,4],[55,6,50,2],[56,4,50,3],[57,6,50,3,"key"],[57,9,50,3],[58,6,50,3,"value"],[58,11,50,3],[58,13,52,2],[58,22,52,2,"forEachInCell"],[58,35,52,15,"forEachInCell"],[58,36,52,16,"cellKey"],[58,43,52,31],[58,45,52,33,"fn"],[58,47,52,50],[58,49,52,58],[59,8,53,4],[59,12,53,10,"listSet"],[59,19,53,17],[59,22,53,20],[59,26,53,24],[59,27,53,25,"_cellKeyToChildren"],[59,45,53,43],[59,46,53,44,"get"],[59,49,53,47],[59,50,53,48,"cellKey"],[59,57,53,55],[59,58,53,56],[59,62,53,60],[59,64,53,62],[60,8,54,4],[60,13,54,9],[60,17,54,15,"list"],[60,21,54,19],[60,25,54,23,"listSet"],[60,32,54,30],[60,34,54,32],[61,10,55,6,"fn"],[61,12,55,8],[61,13,55,9,"list"],[61,17,55,13],[61,18,55,14],[62,8,56,4],[63,6,57,2],[64,4,57,3],[65,6,57,3,"key"],[65,9,57,3],[66,6,57,3,"value"],[66,11,57,3],[66,13,59,2],[66,22,59,2,"anyInCell"],[66,31,59,11,"anyInCell"],[66,32,59,12,"cellKey"],[66,39,59,27],[66,41,59,29,"fn"],[66,43,59,49],[66,45,59,60],[67,8,60,4],[67,12,60,10,"listSet"],[67,19,60,17],[67,22,60,20],[67,26,60,24],[67,27,60,25,"_cellKeyToChildren"],[67,45,60,43],[67,46,60,44,"get"],[67,49,60,47],[67,50,60,48,"cellKey"],[67,57,60,55],[67,58,60,56],[67,62,60,60],[67,64,60,62],[68,8,61,4],[68,13,61,9],[68,17,61,15,"list"],[68,21,61,19],[68,25,61,23,"listSet"],[68,32,61,30],[68,34,61,32],[69,10,62,6],[69,14,62,10,"fn"],[69,16,62,12],[69,17,62,13,"list"],[69,21,62,17],[69,22,62,18],[69,24,62,20],[70,12,63,8],[70,19,63,15],[70,23,63,19],[71,10,64,6],[72,8,65,4],[73,8,66,4],[73,15,66,11],[73,20,66,16],[74,6,67,2],[75,4,67,3],[76,6,67,3,"key"],[76,9,67,3],[77,6,67,3,"value"],[77,11,67,3],[77,13,69,2],[77,22,69,2,"size"],[77,26,69,6,"size"],[77,27,69,6],[77,29,69,17],[78,8,70,4],[78,15,70,11],[78,19,70,15],[78,20,70,16,"_childrenToCellKey"],[78,38,70,34],[78,39,70,35,"size"],[78,43,70,39],[79,6,71,2],[80,4,71,3],[81,2,71,3],[82,0,71,3],[82,3]],"functionMap":{"names":["<global>","ChildListCollection","add","remove","forEach","forEachInCell","anyInCell","size"],"mappings":"AAA;eCY;ECI;GDW;EEE;GFY;EGE;GHM;EIE;GJK;EKE;GLQ;EME;GNE;CDC"}},"type":"js/module"}]}