{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../Utilities/infoLog","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}}],"key":"te7FMDljSHoh4Ptoq0ebhkaWbSA="}},{"name":"invariant","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":14,"column":18,"index":304},"end":{"line":14,"column":38,"index":324}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var infoLog = _$$_REQUIRE(_dependencyMap[2], \"../Utilities/infoLog\");\n  var invariant = _$$_REQUIRE(_dependencyMap[3], \"invariant\");\n  var DEBUG = false;\n\n  /**\n   * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n   * trees of dependent tasks based on Promises. No tasks are executed unless\n   * `processNext` is called.\n   *\n   * `enqueue` takes a Task object with either a simple `run` callback, or a\n   * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n   * function is supplied, then the promise it returns will block execution of\n   * tasks already in the queue until it resolves. This can be used to make sure\n   * the first task is fully resolved (including asynchronous dependencies that\n   * also schedule more tasks via `enqueue`) before starting on the next task.\n   * The `onMoreTasks` constructor argument is used to inform the owner that an\n   * async task has resolved and that the queue should be processed again.\n   *\n   * Note: Tasks are only actually executed with explicit calls to `processNext`.\n   */\n  var TaskQueue = /*#__PURE__*/function () {\n    /**\n     * TaskQueue instances are self contained and independent, so multiple tasks\n     * of varying semantics and priority can operate together.\n     *\n     * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n     * tasks to process.\n     */\n    function TaskQueue(_ref) {\n      var onMoreTasks = _ref.onMoreTasks;\n      _classCallCheck(this, TaskQueue);\n      this._onMoreTasks = onMoreTasks;\n      this._queueStack = [{\n        tasks: [],\n        popable: false\n      }];\n    }\n\n    /**\n     * Add a task to the queue.  It is recommended to name your tasks for easier\n     * async debugging. Tasks will not be executed until `processNext` is called\n     * explicitly.\n     */\n    return _createClass(TaskQueue, [{\n      key: \"enqueue\",\n      value: function enqueue(task) {\n        this._getCurrentQueue().push(task);\n      }\n    }, {\n      key: \"enqueueTasks\",\n      value: function enqueueTasks(tasks) {\n        tasks.forEach(task => this.enqueue(task));\n      }\n    }, {\n      key: \"cancelTasks\",\n      value: function cancelTasks(tasksToCancel) {\n        // search through all tasks and remove them.\n        this._queueStack = this._queueStack.map(queue => ({\n          ...queue,\n          tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1)\n        })).filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n      }\n\n      /**\n       * Check to see if `processNext` should be called.\n       *\n       * @returns {boolean} Returns true if there are tasks that are ready to be\n       * processed with `processNext`, or returns false if there are no more tasks\n       * to be processed right now, although there may be tasks in the queue that\n       * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n       * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n       * tasks ready to run at that point.\n       */\n    }, {\n      key: \"hasTasksToProcess\",\n      value: function hasTasksToProcess() {\n        return this._getCurrentQueue().length > 0;\n      }\n\n      /**\n       * Executes the next task in the queue.\n       */\n    }, {\n      key: \"processNext\",\n      value: function processNext() {\n        var queue = this._getCurrentQueue();\n        if (queue.length) {\n          var task = queue.shift();\n          try {\n            if (typeof task === 'object' && task.gen) {\n              DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n              this._genPromise(task);\n            } else if (typeof task === 'object' && task.run) {\n              DEBUG && infoLog('TaskQueue: run task ' + task.name);\n              task.run();\n            } else {\n              invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n              DEBUG && infoLog('TaskQueue: run anonymous task');\n              task();\n            }\n          } catch (e) {\n            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n            throw e;\n          }\n        }\n      }\n    }, {\n      key: \"_getCurrentQueue\",\n      value: function _getCurrentQueue() {\n        var stackIdx = this._queueStack.length - 1;\n        var queue = this._queueStack[stackIdx];\n        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n          this._queueStack.pop();\n          DEBUG && infoLog('TaskQueue: popped queue: ', {\n            stackIdx,\n            queueStackSize: this._queueStack.length\n          });\n          return this._getCurrentQueue();\n        } else {\n          return queue.tasks;\n        }\n      }\n    }, {\n      key: \"_genPromise\",\n      value: function _genPromise(task) {\n        // Each async task pushes it's own queue onto the queue stack. This\n        // effectively defers execution of previously queued tasks until the promise\n        // resolves, at which point we allow the new queue to be popped, which\n        // happens once it is fully processed.\n        this._queueStack.push({\n          tasks: [],\n          popable: false\n        });\n        var stackIdx = this._queueStack.length - 1;\n        var stackItem = this._queueStack[stackIdx];\n        DEBUG && infoLog('TaskQueue: push new queue: ', {\n          stackIdx\n        });\n        DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n        task.gen().then(() => {\n          DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length\n          });\n          stackItem.popable = true;\n          this.hasTasksToProcess() && this._onMoreTasks();\n        }).catch(ex => {\n          setTimeout(() => {\n            ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n            throw ex;\n          }, 0);\n        });\n      }\n    }]);\n  }();\n  module.exports = TaskQueue;\n});","lineCount":172,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_classCallCheck"],[14,21,11,13],[14,24,11,13,"_$$_REQUIRE"],[14,35,11,13],[14,36,11,13,"_dependencyMap"],[14,50,11,13],[15,2,11,13],[15,6,11,13,"_createClass"],[15,18,11,13],[15,21,11,13,"_$$_REQUIRE"],[15,32,11,13],[15,33,11,13,"_dependencyMap"],[15,47,11,13],[16,2,13,0],[16,6,13,6,"infoLog"],[16,13,13,13],[16,16,13,16,"require"],[16,27,13,23],[16,28,13,23,"_dependencyMap"],[16,42,13,23],[16,69,13,46],[16,70,13,47],[17,2,14,0],[17,6,14,6,"invariant"],[17,15,14,15],[17,18,14,18,"require"],[17,29,14,25],[17,30,14,25,"_dependencyMap"],[17,44,14,25],[17,60,14,37],[17,61,14,38],[18,2,26,0],[18,6,26,6,"DEBUG"],[18,11,26,18],[18,14,26,21],[18,19,26,26],[20,2,28,0],[21,0,29,0],[22,0,30,0],[23,0,31,0],[24,0,32,0],[25,0,33,0],[26,0,34,0],[27,0,35,0],[28,0,36,0],[29,0,37,0],[30,0,38,0],[31,0,39,0],[32,0,40,0],[33,0,41,0],[34,0,42,0],[35,0,43,0],[36,2,28,0],[36,6,44,6,"TaskQueue"],[36,15,44,15],[37,4,45,2],[38,0,46,0],[39,0,47,0],[40,0,48,0],[41,0,49,0],[42,0,50,0],[43,0,51,0],[44,4,52,2],[44,13,52,2,"TaskQueue"],[44,23,52,2,"_ref"],[44,27,52,2],[44,29,52,61],[45,6,52,61],[45,10,52,15,"onMoreTasks"],[45,21,52,26],[45,24,52,26,"_ref"],[45,28,52,26],[45,29,52,15,"onMoreTasks"],[45,40,52,26],[46,6,52,26,"_classCallCheck"],[46,21,52,26],[46,28,52,26,"TaskQueue"],[46,37,52,26],[47,6,53,4],[47,10,53,8],[47,11,53,9,"_onMoreTasks"],[47,23,53,21],[47,26,53,24,"onMoreTasks"],[47,37,53,35],[48,6,54,4],[48,10,54,8],[48,11,54,9,"_queueStack"],[48,22,54,20],[48,25,54,23],[48,26,54,24],[49,8,54,25,"tasks"],[49,13,54,30],[49,15,54,32],[49,17,54,34],[50,8,54,36,"popable"],[50,15,54,43],[50,17,54,45],[51,6,54,50],[51,7,54,51],[51,8,54,52],[52,4,55,2],[54,4,57,2],[55,0,58,0],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,4,57,2],[59,11,57,2,"_createClass"],[59,23,57,2],[59,24,57,2,"TaskQueue"],[59,33,57,2],[60,6,57,2,"key"],[60,9,57,2],[61,6,57,2,"value"],[61,11,57,2],[61,13,62,2],[61,22,62,2,"enqueue"],[61,29,62,9,"enqueue"],[61,30,62,10,"task"],[61,34,62,20],[61,36,62,28],[62,8,63,4],[62,12,63,8],[62,13,63,9,"_getCurrentQueue"],[62,29,63,25],[62,30,63,26],[62,31,63,27],[62,32,63,28,"push"],[62,36,63,32],[62,37,63,33,"task"],[62,41,63,37],[62,42,63,38],[63,6,64,2],[64,4,64,3],[65,6,64,3,"key"],[65,9,64,3],[66,6,64,3,"value"],[66,11,64,3],[66,13,66,2],[66,22,66,2,"enqueueTasks"],[66,34,66,14,"enqueueTasks"],[66,35,66,15,"tasks"],[66,40,66,33],[66,42,66,41],[67,8,67,4,"tasks"],[67,13,67,9],[67,14,67,10,"forEach"],[67,21,67,17],[67,22,67,18,"task"],[67,26,67,22],[67,30,67,26],[67,34,67,30],[67,35,67,31,"enqueue"],[67,42,67,38],[67,43,67,39,"task"],[67,47,67,43],[67,48,67,44],[67,49,67,45],[68,6,68,2],[69,4,68,3],[70,6,68,3,"key"],[70,9,68,3],[71,6,68,3,"value"],[71,11,68,3],[71,13,70,2],[71,22,70,2,"cancelTasks"],[71,33,70,13,"cancelTasks"],[71,34,70,14,"tasksToCancel"],[71,47,70,40],[71,49,70,48],[72,8,71,4],[73,8,72,4],[73,12,72,8],[73,13,72,9,"_queueStack"],[73,24,72,20],[73,27,72,23],[73,31,72,27],[73,32,72,28,"_queueStack"],[73,43,72,39],[73,44,73,7,"map"],[73,47,73,10],[73,48,73,11,"queue"],[73,53,73,16],[73,58,73,21],[74,10,74,8],[74,13,74,11,"queue"],[74,18,74,16],[75,10,75,8,"tasks"],[75,15,75,13],[75,17,75,15,"queue"],[75,22,75,20],[75,23,75,21,"tasks"],[75,28,75,26],[75,29,75,27,"filter"],[75,35,75,33],[75,36,75,34,"task"],[75,40,75,38],[75,44,75,42,"tasksToCancel"],[75,57,75,55],[75,58,75,56,"indexOf"],[75,65,75,63],[75,66,75,64,"task"],[75,70,75,68],[75,71,75,69],[75,76,75,74],[75,77,75,75],[75,78,75,76],[76,8,76,6],[76,9,76,7],[76,10,76,8],[76,11,76,9],[76,12,77,7,"filter"],[76,18,77,13],[76,19,77,14],[76,20,77,15,"queue"],[76,25,77,20],[76,27,77,22,"idx"],[76,30,77,25],[76,35,77,30,"queue"],[76,40,77,35],[76,41,77,36,"tasks"],[76,46,77,41],[76,47,77,42,"length"],[76,53,77,48],[76,56,77,51],[76,57,77,52],[76,61,77,56,"idx"],[76,64,77,59],[76,69,77,64],[76,70,77,65],[76,71,77,66],[77,6,78,2],[79,6,80,2],[80,0,81,0],[81,0,82,0],[82,0,83,0],[83,0,84,0],[84,0,85,0],[85,0,86,0],[86,0,87,0],[87,0,88,0],[88,0,89,0],[89,4,80,2],[90,6,80,2,"key"],[90,9,80,2],[91,6,80,2,"value"],[91,11,80,2],[91,13,90,2],[91,22,90,2,"hasTasksToProcess"],[91,39,90,19,"hasTasksToProcess"],[91,40,90,19],[91,42,90,31],[92,8,91,4],[92,15,91,11],[92,19,91,15],[92,20,91,16,"_getCurrentQueue"],[92,36,91,32],[92,37,91,33],[92,38,91,34],[92,39,91,35,"length"],[92,45,91,41],[92,48,91,44],[92,49,91,45],[93,6,92,2],[95,6,94,2],[96,0,95,0],[97,0,96,0],[98,4,94,2],[99,6,94,2,"key"],[99,9,94,2],[100,6,94,2,"value"],[100,11,94,2],[100,13,97,2],[100,22,97,2,"processNext"],[100,33,97,13,"processNext"],[100,34,97,13],[100,36,97,22],[101,8,98,4],[101,12,98,10,"queue"],[101,17,98,15],[101,20,98,18],[101,24,98,22],[101,25,98,23,"_getCurrentQueue"],[101,41,98,39],[101,42,98,40],[101,43,98,41],[102,8,99,4],[102,12,99,8,"queue"],[102,17,99,13],[102,18,99,14,"length"],[102,24,99,20],[102,26,99,22],[103,10,100,6],[103,14,100,12,"task"],[103,18,100,16],[103,21,100,19,"queue"],[103,26,100,24],[103,27,100,25,"shift"],[103,32,100,30],[103,33,100,31],[103,34,100,32],[104,10,101,6],[104,14,101,10],[105,12,102,8],[105,16,102,12],[105,23,102,19,"task"],[105,27,102,23],[105,32,102,28],[105,40,102,36],[105,44,102,40,"task"],[105,48,102,44],[105,49,102,45,"gen"],[105,52,102,48],[105,54,102,50],[106,14,103,10,"DEBUG"],[106,19,103,15],[106,23,103,19,"infoLog"],[106,30,103,26],[106,31,103,27],[106,64,103,60],[106,67,103,63,"task"],[106,71,103,67],[106,72,103,68,"name"],[106,76,103,72],[106,77,103,73],[107,14,104,10],[107,18,104,14],[107,19,104,15,"_genPromise"],[107,30,104,26],[107,31,104,27,"task"],[107,35,104,31],[107,36,104,32],[108,12,105,8],[108,13,105,9],[108,19,105,15],[108,23,105,19],[108,30,105,26,"task"],[108,34,105,30],[108,39,105,35],[108,47,105,43],[108,51,105,47,"task"],[108,55,105,51],[108,56,105,52,"run"],[108,59,105,55],[108,61,105,57],[109,14,106,10,"DEBUG"],[109,19,106,15],[109,23,106,19,"infoLog"],[109,30,106,26],[109,31,106,27],[109,53,106,49],[109,56,106,52,"task"],[109,60,106,56],[109,61,106,57,"name"],[109,65,106,61],[109,66,106,62],[110,14,107,10,"task"],[110,18,107,14],[110,19,107,15,"run"],[110,22,107,18],[110,23,107,19],[110,24,107,20],[111,12,108,8],[111,13,108,9],[111,19,108,15],[112,14,109,10,"invariant"],[112,23,109,19],[112,24,110,12],[112,31,110,19,"task"],[112,35,110,23],[112,40,110,28],[112,50,110,38],[112,52,111,12],[112,111,111,71],[112,114,112,14,"JSON"],[112,118,112,18],[112,119,112,19,"stringify"],[112,128,112,28],[112,129,112,29,"task"],[112,133,112,33],[112,135,112,35],[112,139,112,39],[112,141,112,41],[112,142,112,42],[112,143,113,10],[112,144,113,11],[113,14,114,10,"DEBUG"],[113,19,114,15],[113,23,114,19,"infoLog"],[113,30,114,26],[113,31,114,27],[113,62,114,58],[113,63,114,59],[114,14,115,10,"task"],[114,18,115,14],[114,19,115,15],[114,20,115,16],[115,12,116,8],[116,10,117,6],[116,11,117,7],[116,12,117,8],[116,19,117,15,"e"],[116,20,117,16],[116,22,117,18],[117,12,118,8,"e"],[117,13,118,9],[117,14,118,10,"message"],[117,21,118,17],[117,24,119,10],[117,53,119,39],[117,57,119,43,"task"],[117,61,119,47],[117,62,119,48,"name"],[117,66,119,52],[117,70,119,56],[117,72,119,58],[117,73,119,59],[117,76,119,62],[117,80,119,66],[117,83,119,69,"e"],[117,84,119,70],[117,85,119,71,"message"],[117,92,119,78],[118,12,120,8],[118,18,120,14,"e"],[118,19,120,15],[119,10,121,6],[120,8,122,4],[121,6,123,2],[122,4,123,3],[123,6,123,3,"key"],[123,9,123,3],[124,6,123,3,"value"],[124,11,123,3],[124,13,132,2],[124,22,132,2,"_getCurrentQueue"],[124,38,132,18,"_getCurrentQueue"],[124,39,132,18],[124,41,132,34],[125,8,133,4],[125,12,133,10,"stackIdx"],[125,20,133,18],[125,23,133,21],[125,27,133,25],[125,28,133,26,"_queueStack"],[125,39,133,37],[125,40,133,38,"length"],[125,46,133,44],[125,49,133,47],[125,50,133,48],[126,8,134,4],[126,12,134,10,"queue"],[126,17,134,15],[126,20,134,18],[126,24,134,22],[126,25,134,23,"_queueStack"],[126,36,134,34],[126,37,134,35,"stackIdx"],[126,45,134,43],[126,46,134,44],[127,8,135,4],[127,12,136,6,"queue"],[127,17,136,11],[127,18,136,12,"popable"],[127,25,136,19],[127,29,137,6,"queue"],[127,34,137,11],[127,35,137,12,"tasks"],[127,40,137,17],[127,41,137,18,"length"],[127,47,137,24],[127,52,137,29],[127,53,137,30],[127,57,138,6],[127,61,138,10],[127,62,138,11,"_queueStack"],[127,73,138,22],[127,74,138,23,"length"],[127,80,138,29],[127,83,138,32],[127,84,138,33],[127,86,139,6],[128,10,140,6],[128,14,140,10],[128,15,140,11,"_queueStack"],[128,26,140,22],[128,27,140,23,"pop"],[128,30,140,26],[128,31,140,27],[128,32,140,28],[129,10,141,6,"DEBUG"],[129,15,141,11],[129,19,142,8,"infoLog"],[129,26,142,15],[129,27,142,16],[129,54,142,43],[129,56,142,45],[130,12,143,10,"stackIdx"],[130,20,143,18],[131,12,144,10,"queueStackSize"],[131,26,144,24],[131,28,144,26],[131,32,144,30],[131,33,144,31,"_queueStack"],[131,44,144,42],[131,45,144,43,"length"],[132,10,145,8],[132,11,145,9],[132,12,145,10],[133,10,146,6],[133,17,146,13],[133,21,146,17],[133,22,146,18,"_getCurrentQueue"],[133,38,146,34],[133,39,146,35],[133,40,146,36],[134,8,147,4],[134,9,147,5],[134,15,147,11],[135,10,148,6],[135,17,148,13,"queue"],[135,22,148,18],[135,23,148,19,"tasks"],[135,28,148,24],[136,8,149,4],[137,6,150,2],[138,4,150,3],[139,6,150,3,"key"],[139,9,150,3],[140,6,150,3,"value"],[140,11,150,3],[140,13,152,2],[140,22,152,2,"_genPromise"],[140,33,152,13,"_genPromise"],[140,34,152,14,"task"],[140,38,152,31],[140,40,152,33],[141,8,153,4],[142,8,154,4],[143,8,155,4],[144,8,156,4],[145,8,157,4],[145,12,157,8],[145,13,157,9,"_queueStack"],[145,24,157,20],[145,25,157,21,"push"],[145,29,157,25],[145,30,157,26],[146,10,157,27,"tasks"],[146,15,157,32],[146,17,157,34],[146,19,157,36],[147,10,157,38,"popable"],[147,17,157,45],[147,19,157,47],[148,8,157,52],[148,9,157,53],[148,10,157,54],[149,8,158,4],[149,12,158,10,"stackIdx"],[149,20,158,18],[149,23,158,21],[149,27,158,25],[149,28,158,26,"_queueStack"],[149,39,158,37],[149,40,158,38,"length"],[149,46,158,44],[149,49,158,47],[149,50,158,48],[150,8,159,4],[150,12,159,10,"stackItem"],[150,21,159,19],[150,24,159,22],[150,28,159,26],[150,29,159,27,"_queueStack"],[150,40,159,38],[150,41,159,39,"stackIdx"],[150,49,159,47],[150,50,159,48],[151,8,160,4,"DEBUG"],[151,13,160,9],[151,17,160,13,"infoLog"],[151,24,160,20],[151,25,160,21],[151,54,160,50],[151,56,160,52],[152,10,160,53,"stackIdx"],[153,8,160,61],[153,9,160,62],[153,10,160,63],[154,8,161,4,"DEBUG"],[154,13,161,9],[154,17,161,13,"infoLog"],[154,24,161,20],[154,25,161,21],[154,52,161,48],[154,55,161,51,"task"],[154,59,161,55],[154,60,161,56,"name"],[154,64,161,60],[154,65,161,61],[155,8,162,4,"task"],[155,12,162,8],[155,13,163,7,"gen"],[155,16,163,10],[155,17,163,11],[155,18,163,12],[155,19,164,7,"then"],[155,23,164,11],[155,24,164,12],[155,30,164,18],[156,10,165,8,"DEBUG"],[156,15,165,13],[156,19,166,10,"infoLog"],[156,26,166,17],[156,27,166,18],[156,60,166,51],[156,63,166,54,"task"],[156,67,166,58],[156,68,166,59,"name"],[156,72,166,63],[156,74,166,65],[157,12,167,12,"stackIdx"],[157,20,167,20],[158,12,168,12,"queueStackSize"],[158,26,168,26],[158,28,168,28],[158,32,168,32],[158,33,168,33,"_queueStack"],[158,44,168,44],[158,45,168,45,"length"],[159,10,169,10],[159,11,169,11],[159,12,169,12],[160,10,170,8,"stackItem"],[160,19,170,17],[160,20,170,18,"popable"],[160,27,170,25],[160,30,170,28],[160,34,170,32],[161,10,171,8],[161,14,171,12],[161,15,171,13,"hasTasksToProcess"],[161,32,171,30],[161,33,171,31],[161,34,171,32],[161,38,171,36],[161,42,171,40],[161,43,171,41,"_onMoreTasks"],[161,55,171,53],[161,56,171,54],[161,57,171,55],[162,8,172,6],[162,9,172,7],[162,10,172,8],[162,11,173,7,"catch"],[162,16,173,12],[162,17,173,13,"ex"],[162,19,173,15],[162,23,173,19],[163,10,174,8,"setTimeout"],[163,20,174,18],[163,21,174,19],[163,27,174,25],[164,12,175,10,"ex"],[164,14,175,12],[164,15,175,13,"message"],[164,22,175,20],[164,25,175,23],[164,71,175,69,"task"],[164,75,175,73],[164,76,175,74,"name"],[164,80,175,78],[164,85,175,83,"ex"],[164,87,175,85],[164,88,175,86,"message"],[164,95,175,93],[164,97,175,95],[165,12,176,10],[165,18,176,16,"ex"],[165,20,176,18],[166,10,177,8],[166,11,177,9],[166,13,177,11],[166,14,177,12],[166,15,177,13],[167,8,178,6],[167,9,178,7],[167,10,178,8],[168,6,179,2],[169,4,179,3],[170,2,179,3],[171,2,182,0,"module"],[171,8,182,6],[171,9,182,7,"exports"],[171,16,182,14],[171,19,182,17,"TaskQueue"],[171,28,182,26],[172,0,182,27],[172,3]],"functionMap":{"names":["<global>","TaskQueue","constructor","enqueue","enqueueTasks","tasks.forEach$argument_0","cancelTasks","_queueStack.map$argument_0","queue.tasks.filter$argument_0","_queueStack.map.filter$argument_0","hasTasksToProcess","processNext","_getCurrentQueue","_genPromise","task.gen.then$argument_0","task.gen.then._catch$argument_0","setTimeout$argument_0"],"mappings":"AAA;AC2C;ECQ;GDG;EEO;GFE;EGE;kBCC,0BD;GHC;EKE;WCG;kCCE,0CD;QDC;cGC,mDH;GLC;ESY;GTE;EUK;GV0B;EWS;GXkB;EYE;YCY;ODQ;aEC;mBCC;SDG;OFC;GZC;CDC"}},"type":"js/module"}]}