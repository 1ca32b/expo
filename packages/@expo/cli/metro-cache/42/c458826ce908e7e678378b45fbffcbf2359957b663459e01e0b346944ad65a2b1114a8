{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":30,"column":0,"index":969}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":30,"column":0,"index":969}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"escape-string-regexp","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = extractPathFromURL;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"escape-string-regexp\"));\n  function extractPathFromURL(prefixes, url) {\n    for (var prefix of prefixes) {\n      var protocol = prefix.match(/^[^:]+:/)?.[0] ?? '';\n      var host = prefix.replace(new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}`), '').replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n      .replace(/^\\//, ''); // Remove extra leading slash\n\n      var prefixRegex = new RegExp(`^${(0, _escapeStringRegexp.default)(protocol)}(/)*${host.split('.').map(it => it === '*' ? '[^/]+' : (0, _escapeStringRegexp.default)(it)).join('\\\\.')}`);\n      var _url$split = url.split('?'),\n        _url$split2 = (0, _slicedToArray2.default)(_url$split, 2),\n        originAndPath = _url$split2[0],\n        searchParams = _url$split2[1];\n      var normalizedURL = originAndPath.replace(/\\/+/g, '/').concat(searchParams ? `?${searchParams}` : '');\n      if (prefixRegex.test(normalizedURL)) {\n        return normalizedURL.replace(prefixRegex, '');\n      }\n    }\n    return undefined;\n  }\n});","lineCount":27,"map":[[8,2,1,0],[8,6,1,0,"_escapeStringRegexp"],[8,25,1,0],[8,28,1,0,"_interopRequireDefault"],[8,50,1,0],[8,51,1,0,"_$$_REQUIRE"],[8,62,1,0],[8,63,1,0,"_dependencyMap"],[8,77,1,0],[9,2,3,15],[9,11,3,24,"extractPathFromURL"],[9,29,3,42,"extractPathFromURL"],[9,30,3,43,"prefixes"],[9,38,3,61],[9,40,3,63,"url"],[9,43,3,74],[9,45,3,76],[10,4,4,2],[10,9,4,7],[10,13,4,13,"prefix"],[10,19,4,19],[10,23,4,23,"prefixes"],[10,31,4,31],[10,33,4,33],[11,6,5,4],[11,10,5,10,"protocol"],[11,18,5,18],[11,21,5,21,"prefix"],[11,27,5,27],[11,28,5,28,"match"],[11,33,5,33],[11,34,5,34],[11,43,5,43],[11,44,5,44],[11,47,5,47],[11,48,5,48],[11,49,5,49],[11,53,5,53],[11,55,5,55],[12,6,6,4],[12,10,6,10,"host"],[12,14,6,14],[12,17,6,17,"prefix"],[12,23,6,23],[12,24,7,7,"replace"],[12,31,7,14],[12,32,7,15],[12,36,7,19,"RegExp"],[12,42,7,25],[12,43,7,26],[12,47,7,30],[12,51,7,30,"escapeStringRegexp"],[12,78,7,48],[12,80,7,49,"protocol"],[12,88,7,57],[12,89,7,58],[12,91,7,60],[12,92,7,61],[12,94,7,63],[12,96,7,65],[12,97,7,66],[12,98,8,7,"replace"],[12,105,8,14],[12,106,8,15],[12,112,8,21],[12,114,8,23],[12,117,8,26],[12,118,8,27],[12,119,8,28],[13,6,8,28],[13,7,9,7,"replace"],[13,14,9,14],[13,15,9,15],[13,20,9,20],[13,22,9,22],[13,24,9,24],[13,25,9,25],[13,26,9,26],[13,27,9,27],[15,6,11,4],[15,10,11,10,"prefixRegex"],[15,21,11,21],[15,24,11,24],[15,28,11,28,"RegExp"],[15,34,11,34],[15,35,12,6],[15,39,12,10],[15,43,12,10,"escapeStringRegexp"],[15,70,12,28],[15,72,12,29,"protocol"],[15,80,12,37],[15,81,12,38],[15,88,12,45,"host"],[15,92,12,49],[15,93,13,9,"split"],[15,98,13,14],[15,99,13,15],[15,102,13,18],[15,103,13,19],[15,104,14,9,"map"],[15,107,14,12],[15,108,14,14,"it"],[15,110,14,16],[15,114,14,22,"it"],[15,116,14,24],[15,121,14,29],[15,124,14,32],[15,127,14,35],[15,134,14,42],[15,137,14,45],[15,141,14,45,"escapeStringRegexp"],[15,168,14,63],[15,170,14,64,"it"],[15,172,14,66],[15,173,14,68],[15,174,14,69],[15,175,15,9,"join"],[15,179,15,13],[15,180,15,14],[15,185,15,19],[15,186,15,20],[15,188,16,4],[15,189,16,5],[16,6,18,4],[16,10,18,4,"_url$split"],[16,20,18,4],[16,23,18,42,"url"],[16,26,18,45],[16,27,18,46,"split"],[16,32,18,51],[16,33,18,52],[16,36,18,55],[16,37,18,56],[17,8,18,56,"_url$split2"],[17,19,18,56],[17,26,18,56,"_slicedToArray2"],[17,41,18,56],[17,42,18,56,"default"],[17,49,18,56],[17,51,18,56,"_url$split"],[17,61,18,56],[18,8,18,11,"originAndPath"],[18,21,18,24],[18,24,18,24,"_url$split2"],[18,35,18,24],[19,8,18,26,"searchParams"],[19,20,18,38],[19,23,18,38,"_url$split2"],[19,34,18,38],[20,6,19,4],[20,10,19,10,"normalizedURL"],[20,23,19,23],[20,26,19,26,"originAndPath"],[20,39,19,39],[20,40,20,7,"replace"],[20,47,20,14],[20,48,20,15],[20,54,20,21],[20,56,20,23],[20,59,20,26],[20,60,20,27],[20,61,21,7,"concat"],[20,67,21,13],[20,68,21,14,"searchParams"],[20,80,21,26],[20,83,21,29],[20,87,21,33,"searchParams"],[20,99,21,45],[20,101,21,47],[20,104,21,50],[20,106,21,52],[20,107,21,53],[21,6,23,4],[21,10,23,8,"prefixRegex"],[21,21,23,19],[21,22,23,20,"test"],[21,26,23,24],[21,27,23,25,"normalizedURL"],[21,40,23,38],[21,41,23,39],[21,43,23,41],[22,8,24,6],[22,15,24,13,"normalizedURL"],[22,28,24,26],[22,29,24,27,"replace"],[22,36,24,34],[22,37,24,35,"prefixRegex"],[22,48,24,46],[22,50,24,48],[22,52,24,50],[22,53,24,51],[23,6,25,4],[24,4,26,2],[25,4,28,2],[25,11,28,9,"undefined"],[25,20,28,18],[26,2,29,0],[27,0,29,1],[27,3]],"functionMap":{"names":["<global>","extractPathFromURL","host.split.map$argument_0"],"mappings":"AAA;eCE;aCW,uDD;CDe"}},"type":"js/module"}]}