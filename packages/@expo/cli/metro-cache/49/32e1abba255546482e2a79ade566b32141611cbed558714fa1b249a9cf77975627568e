{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":644,"column":44,"index":26371}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"escape-string-regexp","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":7,"column":47,"index":376},"end":{"line":7,"column":78,"index":407}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}},{"name":"./findFocusedRoute","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":8,"column":27,"index":437},"end":{"line":8,"column":56,"index":466}}],"key":"9+VFhBOjQcTQeIvNi1xuiiMPBRA="}},{"name":"./validatePathConfig","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":9,"column":45,"index":513},"end":{"line":9,"column":76,"index":544}}],"key":"cg7LCOlFjZ3IP0CYIpbP6C+VR6g="}},{"name":"../matchers","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":10,"column":19,"index":566},"end":{"line":10,"column":41,"index":588}}],"key":"os5DbCgiuAv5SMhHGnNjYziGTYQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.stripBaseUrl = exports.getMatchableRouteConfigs = exports.getUrlWithReactNavigationConcessions = void 0;\n  var escape_string_regexp_1 = __importDefault(_$$_REQUIRE(_dependencyMap[1], \"escape-string-regexp\"));\n  var findFocusedRoute_1 = _$$_REQUIRE(_dependencyMap[2], \"./findFocusedRoute\");\n  var validatePathConfig_1 = __importDefault(_$$_REQUIRE(_dependencyMap[3], \"./validatePathConfig\"));\n  var matchers_1 = _$$_REQUIRE(_dependencyMap[4], \"../matchers\");\n  function getUrlWithReactNavigationConcessions(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    var parsed;\n    try {\n      parsed = new URL(path, 'https://phony.example');\n    } catch {\n      // Do nothing with invalid URLs.\n      return {\n        nonstandardPathname: '',\n        inputPathnameWithoutHash: '',\n        url: null\n      };\n    }\n    var pathname = parsed.pathname;\n    // Make sure there is a trailing slash\n    return {\n      // The slashes are at the end, not the beginning\n      nonstandardPathname: stripBaseUrl(pathname, baseUrl).replace(/^\\/+/g, '').replace(/\\/+$/g, '') + '/',\n      url: parsed\n    };\n  }\n  exports.getUrlWithReactNavigationConcessions = getUrlWithReactNavigationConcessions;\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _getMatchableRouteCon = getMatchableRouteConfigs(options, this?.routeInfo?.segments),\n      initialRoutes = _getMatchableRouteCon.initialRoutes,\n      configs = _getMatchableRouteCon.configs;\n    return getStateFromPathWithConfigs(path, configs, initialRoutes);\n  }\n  exports.default = getStateFromPath;\n  function getMatchableRouteConfigs(options) {\n    var previousSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    if (options) {\n      (0, validatePathConfig_1.default)(options);\n    }\n    var screens = options?.screens;\n    // Expo Router disallows usage without a linking config.\n    if (!screens) {\n      throw Error(\"You must pass a 'screens' object to 'getStateFromPath' to generate a path.\");\n    }\n    // This will be mutated...\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    // Create a normalized configs array which will be easier to use.\n    var converted = Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes)).flat();\n    var resolvedInitialPatterns = initialRoutes.map(route => joinPaths(...route.parentScreens, route.initialRouteName));\n    var convertedWithInitial = converted.map(config => ({\n      ...config,\n      // TODO(EvanBacon): Probably a safer way to do this\n      // Mark initial routes to give them potential priority over other routes that match.\n      isInitial: resolvedInitialPatterns.includes(config.routeNames.join('/'))\n    }));\n    // Sort in order of resolution. This is extremely important for the algorithm to work.\n    var configs = convertedWithInitial.sort((a, b) => sortConfigs(a, b, previousSegments));\n    // Assert any duplicates before we start parsing.\n    assertConfigDuplicates(configs);\n    return {\n      configs,\n      initialRoutes\n    };\n  }\n  exports.getMatchableRouteConfigs = getMatchableRouteConfigs;\n  function assertConfigDuplicates(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      // NOTE(EvanBacon): Uses the regex pattern as key to detect duplicate slugs.\n      var indexedKey = config.regex?.toString() ?? config.pattern;\n      var alpha = acc[indexedKey];\n      // NOTE(EvanBacon): Skips checking nodes that have children.\n      if (alpha && !alpha.hasChildren && !config.hasChildren) {\n        var a = alpha.routeNames;\n        var b = config.routeNames;\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          // NOTE(EvanBacon): Adds more context to the error message since we know about the\n          // file-based routing.\n          var last = config.pattern.split('/').pop();\n          if (!last?.match(/^\\*not-found$/)) {\n            var routeType = last?.startsWith(':') ? 'dynamic route' : last?.startsWith('*') ? 'dynamic-rest route' : 'route';\n            throw new Error(`The ${routeType} pattern '${config.pattern || '/'}' resolves to both '${alpha.userReadableName}' and '${config.userReadableName}'. Patterns must be unique and cannot resolve to more than one route.`);\n          }\n        }\n      }\n      return Object.assign(acc, {\n        [indexedKey]: config\n      });\n    }, {});\n  }\n  function sortConfigs(a, b) {\n    var previousSegments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    /*\n     * If one of the patterns starts with the other, it is earlier in the config sorting.\n     * However, configs are a mix of route configs and layout configs\n     * e.g There will be a config for `/(group)`, but maybe there isn't a `/(group)/index.tsx`\n     *\n     * This is because you can navigate to a directory and its navigator will determine the route\n     * These routes should be later in the config sorting, as their patterns are very open\n     * and will prevent routes from being matched\n     *\n     * Therefore before we compare segment parts, we force these layout configs later in the sorting\n     *\n     * NOTE(marklawlor): Is this a feature we want? I'm unsure if this is a gimmick or a feature.\n     */\n    if (a.pattern.startsWith(b.pattern) && !b.isIndex) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern) && !a.isIndex) {\n      return 1;\n    }\n    /*\n     * Static routes should always be higher than dynamic and layout routes.\n     */\n    if (a.type === 'static' && b.type !== 'static') {\n      return -1;\n    } else if (a.type !== 'static' && b.type === 'static') {\n      return 1;\n    }\n    /*\n     * If both are static/dynamic or a layout file, then we check group similarity\n     */\n    var similarToPreviousA = previousSegments.filter((value, index) => {\n      return value === a.expandedRouteNames[index] && value.startsWith('(') && value.endsWith(')');\n    });\n    var similarToPreviousB = previousSegments.filter((value, index) => {\n      return value === b.expandedRouteNames[index] && value.startsWith('(') && value.endsWith(')');\n    });\n    if ((similarToPreviousA.length > 0 || similarToPreviousB.length > 0) && similarToPreviousA.length !== similarToPreviousB.length) {\n      // One matches more than the other, so pick the one that matches more\n      return similarToPreviousB.length - similarToPreviousA.length;\n    }\n    /*\n     * If there is not difference in similarity, then each non-group segment is compared against each other\n     */\n    for (var i = 0; i < Math.max(a.parts.length, b.parts.length); i++) {\n      // if b is longer, b get higher priority\n      if (a.parts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (b.parts[i] == null) {\n        return -1;\n      }\n      var aWildCard = a.parts[i].startsWith('*');\n      var bWildCard = b.parts[i].startsWith('*');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        var aNotFound = a.parts[i].match(/^[*]not-found$/);\n        var bNotFound = b.parts[i].match(/^[*]not-found$/);\n        if (aNotFound && bNotFound) {\n          continue;\n        } else if (aNotFound) {\n          return 1;\n        } else if (bNotFound) {\n          return -1;\n        }\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n      var aSlug = a.parts[i].startsWith(':');\n      var bSlug = b.parts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aSlug && bSlug) {\n        var _aNotFound = a.parts[i].match(/^[*]not-found$/);\n        var _bNotFound = b.parts[i].match(/^[*]not-found$/);\n        if (_aNotFound && _bNotFound) {\n          continue;\n        } else if (_aNotFound) {\n          return 1;\n        } else if (_bNotFound) {\n          return -1;\n        }\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aSlug) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bSlug) {\n        return -1;\n      }\n    }\n    /*\n     * Both configs are identical in specificity and segments count/type\n     * Try and sort by initial instead.\n     *\n     * TODO: We don't differentiate between the default initialRoute and group specific default routes\n     *\n     * const unstable_settings = {\n     *   \"group\": {\n     *     initialRouteName: \"article\"\n     *  }\n     * }\n     *\n     * \"article\" will be ranked higher because its an initialRoute for a group - even if not your not currently in\n     * that group. The current work around is to ways provide initialRouteName for all groups\n     */\n    if (a.isInitial && !b.isInitial) {\n      return -1;\n    } else if (!a.isInitial && b.isInitial) {\n      return 1;\n    }\n    return b.parts.length - a.parts.length;\n  }\n  function getStateFromEmptyPathWithConfigs(path, hash, configs, initialRoutes) {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    // NOTE(EvanBacon): We only care about matching leaf nodes.\n    var leafNodes = configs.filter(config => !config.hasChildren).map(value => {\n      return {\n        ...value,\n        // Collapse all levels of group segments before testing.\n        // This enables `app/(one)/(two)/index.js` to be matched.\n        path: (0, matchers_1.stripGroupSegmentsFromPath)(value.path)\n      };\n    });\n    var match = leafNodes.find(config =>\n    // NOTE(EvanBacon): Test leaf node index routes that either don't have a regex or match an empty string.\n    config.path === '' && (!config.regex || config.regex.test(''))) ?? leafNodes.find(config =>\n    // NOTE(EvanBacon): Test leaf node dynamic routes that match an empty string.\n    config.path.startsWith(':') && config.regex.test('')) ??\n    // NOTE(EvanBacon): Test leaf node deep dynamic routes that match a slash.\n    // This should be done last to enable dynamic routes having a higher priority.\n    leafNodes.find(config => config.path.startsWith('*') && config.regex.test('/'));\n    if (!match) {\n      return undefined;\n    }\n    var routes = match.routeNames.map(name => {\n      if (!match._route) {\n        return {\n          name\n        };\n      }\n      return {\n        name,\n        _route: match._route\n      };\n    });\n    return createNestedStateObject(path, hash, routes, configs, initialRoutes);\n  }\n  function getStateFromPathWithConfigs(path, configs, initialRoutes) {\n    var baseUrl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    var formattedPaths = getUrlWithReactNavigationConcessions(path);\n    if (!formattedPaths.url) return;\n    var cleanPath = stripBaseUrl((0, matchers_1.stripGroupSegmentsFromPath)(formattedPaths.url.pathname), baseUrl) + formattedPaths.url.search;\n    if (!path.startsWith('/')) cleanPath = cleanPath.slice(1);\n    if (formattedPaths.nonstandardPathname === '/') {\n      return getStateFromEmptyPathWithConfigs(cleanPath, formattedPaths.url.hash.slice(1), configs, initialRoutes);\n    }\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var routes = matchAgainstConfigs(formattedPaths.nonstandardPathname, configs);\n    if (routes == null) {\n      return undefined;\n    }\n    // This will always be empty if full path matched\n    return createNestedStateObject(cleanPath, formattedPaths.url.hash.slice(1), routes, configs, initialRoutes);\n  }\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n        // If our regex matches, we need to extract params from the path\n        if (!match) {\n          return 0; // continue\n        }\n        // TODO: Add support for wildcard routes\n        var matchedParams = config.pattern?.split('/').filter(p => p.match(/^[:*]/)).reduce((acc, p, i) => {\n          if (p.match(/^\\*/)) {\n            return {\n              ...acc,\n              [p]: match[(i + 1) * 2] //?.replace(/\\//, \"\"),\n            };\n          }\n          return Object.assign(acc, {\n            // The param segments appear every second item starting from 2 in the regex match result.\n            // This will only work if we ensure groups aren't included in the match.\n            [p]: match[(i + 1) * 2]?.replace(/\\//, '')\n          });\n        }, {});\n        var routeFromName = name => {\n          var config = configs.find(c => c.screen === name);\n          if (!config?.path) {\n            return {\n              name\n            };\n          }\n          var segments = config.path.split('/');\n          var params = {};\n          segments.filter(p => p.match(/^[:*]/)).forEach(p => {\n            var value = matchedParams[p];\n            if (value) {\n              if (p.match(/^\\*/)) {\n                // Convert to an array before providing as a route.\n                value = value?.split('/').filter(Boolean);\n              }\n              var key = p.replace(/^[:*]/, '').replace(/\\?$/, '');\n              params[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n          });\n          if (params && Object.keys(params).length) {\n            return {\n              name,\n              params\n            };\n          }\n          return {\n            name\n          };\n        };\n        routes = config.routeNames.map(name => {\n          if (!config._route) {\n            return {\n              ...routeFromName(name)\n            };\n          }\n          return {\n            ...routeFromName(name),\n            _route: config._route\n          };\n        });\n        // TODO(EvanBacon): Maybe we should warn / assert if multiple slugs use the same param name.\n        var combinedParams = routes.reduce((acc, r) => Object.assign(acc, r.params), {});\n        var hasCombinedParams = Object.keys(combinedParams).length > 0;\n        // Combine all params so a route `[foo]/[bar]/other.js` has access to `{ foo, bar }`\n        routes = routes.map(r => {\n          if (hasCombinedParams) {\n            r.params = combinedParams;\n          }\n          return r;\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return 1; // break\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return routes;\n  }\n  function equalHeritage(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i].localeCompare(b[i]) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  var createNormalizedConfigs = function (screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var parentScreens = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // TODO: This should never happen with the addition of `_route`\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config, false));\n    } else if (typeof config === 'object') {\n      var _pattern;\n      var _route = config._route;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.screens ? !!Object.keys(config.screens)?.length : false, config.parse, _route));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], _pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  function formatRegexPattern(it) {\n    // Allow spaces in file path names.\n    it = it.replace(' ', '%20');\n    if (it.startsWith(':')) {\n      // TODO: Remove unused match group\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    } else if (it.startsWith('*')) {\n      return `((.*\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    // Strip groups from the matcher\n    if ((0, matchers_1.matchGroupName)(it) != null) {\n      // Groups are optional segments\n      // this enables us to match `/bar` and `/(foo)/bar` for the same route\n      // NOTE(EvanBacon): Ignore this match in the regex to avoid capturing the group\n      return `(?:${(0, escape_string_regexp_1.default)(it)}\\\\/)?`;\n    }\n    return (0, escape_string_regexp_1.default)(it) + `\\\\/`;\n  }\n  var createConfigItem = (screen, routeNames, pattern, path, hasChildren, parse, _route) => {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    var patternParts = [];\n    var parts = [];\n    var isDynamic = false;\n    var isIndex = screen === 'index' || screen.endsWith('/index');\n    for (var part of pattern.split('/')) {\n      if (part) {\n        patternParts.push(part);\n        // If any part is dynamic, then the route is dynamic\n        isDynamic ||= part.startsWith(':') || part.startsWith('*') || part.includes('*not-found');\n        if (!(0, matchers_1.matchGroupName)(part)) {\n          parts.push(part);\n        }\n      }\n    }\n    pattern = patternParts.join('/');\n    if (isIndex) {\n      parts.push('index');\n    }\n    var type = hasChildren ? 'layout' : isDynamic ? 'dynamic' : 'static';\n    var regex = pattern ? new RegExp(`^(${pattern.split('/').map(formatRegexPattern).join('')})$`) : undefined;\n    return {\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      expandedRouteNames: routeNames.flatMap(name => {\n        return name.split('/');\n      }),\n      parse,\n      userReadableName: [...routeNames.slice(0, -1), path || screen].join('/'),\n      hasChildren: !!hasChildren,\n      _route,\n      type,\n      isIndex,\n      parts\n    };\n  };\n  var findParseConfigForRoute = (routeName, routeConfigs) => {\n    for (var config of routeConfigs) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (equalHeritage(parentScreens, config.parentScreens)) {\n        // If the parents are the same but the route name doesn't match the initial route\n        // then we return the initial route.\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n    return undefined;\n  };\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (route, isEmpty, initialRoute) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, route]\n        };\n      }\n      return {\n        routes: [route]\n      };\n    }\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute,\n          params: route.params\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n    return {\n      routes: [{\n        ...route,\n        state: {\n          routes: []\n        }\n      }]\n    };\n  };\n  var createNestedStateObject = (path, hash, routes, routeConfigs, initialRoutes) => {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(route, routes.length === 0, initialRoute);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(route, routes.length === 0, initialRoute);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n    // Remove groups from the path while preserving a trailing slash.\n    route.path = path;\n    var params = parseQueryParams(route.path, findParseConfigForRoute(route.name, routeConfigs));\n    if (params) {\n      route.params = Object.assign(Object.create(null), route.params);\n      for (var _ref of Object.entries(params)) {\n        var _ref2 = _slicedToArray(_ref, 2);\n        var name = _ref2[0];\n        var value = _ref2[1];\n        if (route.params?.[name]) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Route '/${route.name}' with param '${name}' was specified both in the path and as a param, removing from path`);\n          }\n        }\n        if (!route.params?.[name]) {\n          route.params[name] = value;\n          continue;\n        }\n      }\n      if (Object.keys(route.params).length === 0) {\n        delete route.params;\n      }\n    }\n    if (hash) {\n      route.params = Object.assign(Object.create(null), route.params);\n      route.params['#'] = hash;\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var searchParams = new URLSearchParams(query);\n    var params = Object.create(null);\n    var _loop2 = function (name) {\n      var values = parseConfig?.hasOwnProperty(name) ? searchParams.getAll(name).map(value => parseConfig[name](value)) : searchParams.getAll(name);\n      // searchParams.getAll returns an array.\n      // if we only have a single value, and its not an array param, we need to extract the value\n      params[name] = values.length === 1 ? values[0] : values;\n    };\n    for (var name of searchParams.keys()) {\n      _loop2(name);\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n  var baseUrlCache = new Map();\n  function getBaseUrlRegex(baseUrl) {\n    if (baseUrlCache.has(baseUrl)) {\n      return baseUrlCache.get(baseUrl);\n    }\n    var regex = new RegExp(`^\\\\/?${(0, escape_string_regexp_1.default)(baseUrl)}`, 'g');\n    baseUrlCache.set(baseUrl, regex);\n    return regex;\n  }\n  function stripBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        var reg = getBaseUrlRegex(baseUrl);\n        return path.replace(/^\\/+/g, '/').replace(reg, '');\n      }\n    }\n    return path;\n  }\n  exports.stripBaseUrl = stripBaseUrl;\n});","lineCount":669,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"_$$_REQUIRE"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,2,0],[5,6,2,4,"__importDefault"],[5,21,2,19],[5,24,2,23],[5,28,2,27],[5,32,2,31],[5,36,2,35],[5,37,2,36,"__importDefault"],[5,52,2,51],[5,56,2,56],[5,66,2,66,"mod"],[5,69,2,69],[5,71,2,71],[6,4,3,4],[6,11,3,12,"mod"],[6,14,3,15],[6,18,3,19,"mod"],[6,21,3,22],[6,22,3,23,"__esModule"],[6,32,3,33],[6,35,3,37,"mod"],[6,38,3,40],[6,41,3,43],[7,6,3,45],[7,15,3,54],[7,17,3,56,"mod"],[8,4,3,60],[8,5,3,61],[9,2,4,0],[9,3,4,1],[10,2,5,0,"Object"],[10,8,5,6],[10,9,5,7,"defineProperty"],[10,23,5,21],[10,24,5,22,"exports"],[10,31,5,29],[10,33,5,31],[10,45,5,43],[10,47,5,45],[11,4,5,47,"value"],[11,9,5,52],[11,11,5,54],[12,2,5,59],[12,3,5,60],[12,4,5,61],[13,2,6,0,"exports"],[13,9,6,7],[13,10,6,8,"stripBaseUrl"],[13,22,6,20],[13,25,6,23,"exports"],[13,32,6,30],[13,33,6,31,"getMatchableRouteConfigs"],[13,57,6,55],[13,60,6,58,"exports"],[13,67,6,65],[13,68,6,66,"getUrlWithReactNavigationConcessions"],[13,104,6,102],[13,107,6,105],[13,112,6,110],[13,113,6,111],[14,2,7,0],[14,6,7,6,"escape_string_regexp_1"],[14,28,7,28],[14,31,7,31,"__importDefault"],[14,46,7,46],[14,47,7,47,"require"],[14,58,7,54],[14,59,7,54,"_dependencyMap"],[14,73,7,54],[14,100,7,77],[14,101,7,78],[14,102,7,79],[15,2,8,0],[15,6,8,6,"findFocusedRoute_1"],[15,24,8,24],[15,27,8,27,"require"],[15,38,8,34],[15,39,8,34,"_dependencyMap"],[15,53,8,34],[15,78,8,55],[15,79,8,56],[16,2,9,0],[16,6,9,6,"validatePathConfig_1"],[16,26,9,26],[16,29,9,29,"__importDefault"],[16,44,9,44],[16,45,9,45,"require"],[16,56,9,52],[16,57,9,52,"_dependencyMap"],[16,71,9,52],[16,98,9,75],[16,99,9,76],[16,100,9,77],[17,2,10,0],[17,6,10,6,"matchers_1"],[17,16,10,16],[17,19,10,19,"require"],[17,30,10,26],[17,31,10,26,"_dependencyMap"],[17,45,10,26],[17,63,10,40],[17,64,10,41],[18,2,11,0],[18,11,11,9,"getUrlWithReactNavigationConcessions"],[18,47,11,45,"getUrlWithReactNavigationConcessions"],[18,48,11,46,"path"],[18,52,11,50],[18,54,11,89],[19,4,11,89],[19,8,11,52,"baseUrl"],[19,15,11,59],[19,18,11,59,"arguments"],[19,27,11,59],[19,28,11,59,"length"],[19,34,11,59],[19,42,11,59,"arguments"],[19,51,11,59],[19,59,11,59,"undefined"],[19,68,11,59],[19,71,11,59,"arguments"],[19,80,11,59],[20,4,12,4],[20,8,12,8,"parsed"],[20,14,12,14],[21,4,13,4],[21,8,13,8],[22,6,14,8,"parsed"],[22,12,14,14],[22,15,14,17],[22,19,14,21,"URL"],[22,22,14,24],[22,23,14,25,"path"],[22,27,14,29],[22,29,14,31],[22,52,14,54],[22,53,14,55],[23,4,15,4],[23,5,15,5],[23,6,16,4],[23,12,16,10],[24,6,17,8],[25,6,18,8],[25,13,18,15],[26,8,19,12,"nonstandardPathname"],[26,27,19,31],[26,29,19,33],[26,31,19,35],[27,8,20,12,"inputPathnameWithoutHash"],[27,32,20,36],[27,34,20,38],[27,36,20,40],[28,8,21,12,"url"],[28,11,21,15],[28,13,21,17],[29,6,22,8],[29,7,22,9],[30,4,23,4],[31,4,24,4],[31,8,24,10,"pathname"],[31,16,24,18],[31,19,24,21,"parsed"],[31,25,24,27],[31,26,24,28,"pathname"],[31,34,24,36],[32,4,25,4],[33,4,26,4],[33,11,26,11],[34,6,27,8],[35,6,28,8,"nonstandardPathname"],[35,25,28,27],[35,27,28,29,"stripBaseUrl"],[35,39,28,41],[35,40,28,42,"pathname"],[35,48,28,50],[35,50,28,52,"baseUrl"],[35,57,28,59],[35,58,28,60],[35,59,28,61,"replace"],[35,66,28,68],[35,67,28,69],[35,74,28,76],[35,76,28,78],[35,78,28,80],[35,79,28,81],[35,80,28,82,"replace"],[35,87,28,89],[35,88,28,90],[35,95,28,97],[35,97,28,99],[35,99,28,101],[35,100,28,102],[35,103,28,105],[35,106,28,108],[36,6,29,8,"url"],[36,9,29,11],[36,11,29,13,"parsed"],[37,4,30,4],[37,5,30,5],[38,2,31,0],[39,2,32,0,"exports"],[39,9,32,7],[39,10,32,8,"getUrlWithReactNavigationConcessions"],[39,46,32,44],[39,49,32,47,"getUrlWithReactNavigationConcessions"],[39,85,32,83],[40,2,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,0,47,0],[55,0,48,0],[56,0,49,0],[57,0,50,0],[58,0,51,0],[59,0,52,0],[60,0,53,0],[61,2,54,0],[61,11,54,9,"getStateFromPath"],[61,27,54,25,"getStateFromPath"],[61,28,54,26,"path"],[61,32,54,30],[61,34,54,32,"options"],[61,41,54,39],[61,43,54,41],[62,4,55,4],[62,8,55,4,"_getMatchableRouteCon"],[62,29,55,4],[62,32,55,39,"getMatchableRouteConfigs"],[62,56,55,63],[62,57,55,64,"options"],[62,64,55,71],[62,66,55,73],[62,70,55,77],[62,72,55,79,"routeInfo"],[62,81,55,88],[62,83,55,90,"segments"],[62,91,55,98],[62,92,55,99],[63,6,55,12,"initialRoutes"],[63,19,55,25],[63,22,55,25,"_getMatchableRouteCon"],[63,43,55,25],[63,44,55,12,"initialRoutes"],[63,57,55,25],[64,6,55,27,"configs"],[64,13,55,34],[64,16,55,34,"_getMatchableRouteCon"],[64,37,55,34],[64,38,55,27,"configs"],[64,45,55,34],[65,4,56,4],[65,11,56,11,"getStateFromPathWithConfigs"],[65,38,56,38],[65,39,56,39,"path"],[65,43,56,43],[65,45,56,45,"configs"],[65,52,56,52],[65,54,56,54,"initialRoutes"],[65,67,56,67],[65,68,56,68],[66,2,57,0],[67,2,58,0,"exports"],[67,9,58,7],[67,10,58,8,"default"],[67,17,58,15],[67,20,58,18,"getStateFromPath"],[67,36,58,34],[68,2,59,0],[68,11,59,9,"getMatchableRouteConfigs"],[68,35,59,33,"getMatchableRouteConfigs"],[68,36,59,34,"options"],[68,43,59,41],[68,45,59,66],[69,4,59,66],[69,8,59,43,"previousSegments"],[69,24,59,59],[69,27,59,59,"arguments"],[69,36,59,59],[69,37,59,59,"length"],[69,43,59,59],[69,51,59,59,"arguments"],[69,60,59,59],[69,68,59,59,"undefined"],[69,77,59,59],[69,80,59,59,"arguments"],[69,89,59,59],[69,95,59,62],[69,97,59,64],[70,4,60,4],[70,8,60,8,"options"],[70,15,60,15],[70,17,60,17],[71,6,61,8],[71,7,61,9],[71,8,61,10],[71,10,61,12,"validatePathConfig_1"],[71,30,61,32],[71,31,61,33,"default"],[71,38,61,40],[71,40,61,42,"options"],[71,47,61,49],[71,48,61,50],[72,4,62,4],[73,4,63,4],[73,8,63,10,"screens"],[73,15,63,17],[73,18,63,20,"options"],[73,25,63,27],[73,27,63,29,"screens"],[73,34,63,36],[74,4,64,4],[75,4,65,4],[75,8,65,8],[75,9,65,9,"screens"],[75,16,65,16],[75,18,65,18],[76,6,66,8],[76,12,66,14,"Error"],[76,17,66,19],[76,18,66,20],[76,94,66,96],[76,95,66,97],[77,4,67,4],[78,4,68,4],[79,4,69,4],[79,8,69,10,"initialRoutes"],[79,21,69,23],[79,24,69,26],[79,26,69,28],[80,4,70,4],[80,8,70,8,"options"],[80,15,70,15],[80,17,70,17,"initialRouteName"],[80,33,70,33],[80,35,70,35],[81,6,71,8,"initialRoutes"],[81,19,71,21],[81,20,71,22,"push"],[81,24,71,26],[81,25,71,27],[82,8,72,12,"initialRouteName"],[82,24,72,28],[82,26,72,30,"options"],[82,33,72,37],[82,34,72,38,"initialRouteName"],[82,50,72,54],[83,8,73,12,"parentScreens"],[83,21,73,25],[83,23,73,27],[84,6,74,8],[84,7,74,9],[84,8,74,10],[85,4,75,4],[86,4,76,4],[87,4,77,4],[87,8,77,10,"converted"],[87,17,77,19],[87,20,77,22,"Object"],[87,26,77,28],[87,27,77,29,"keys"],[87,31,77,33],[87,32,77,34,"screens"],[87,39,77,41],[87,40,77,42],[87,41,78,9,"map"],[87,44,78,12],[87,45,78,14,"key"],[87,48,78,17],[87,52,78,22,"createNormalizedConfigs"],[87,75,78,45],[87,76,78,46,"key"],[87,79,78,49],[87,81,78,51,"screens"],[87,88,78,58],[87,90,78,60],[87,92,78,62],[87,94,78,64,"initialRoutes"],[87,107,78,77],[87,108,78,78],[87,109,78,79],[87,110,79,9,"flat"],[87,114,79,13],[87,115,79,14],[87,116,79,15],[88,4,80,4],[88,8,80,10,"resolvedInitialPatterns"],[88,31,80,33],[88,34,80,36,"initialRoutes"],[88,47,80,49],[88,48,80,50,"map"],[88,51,80,53],[88,52,80,55,"route"],[88,57,80,60],[88,61,80,65,"joinPaths"],[88,70,80,74],[88,71,80,75],[88,74,80,78,"route"],[88,79,80,83],[88,80,80,84,"parentScreens"],[88,93,80,97],[88,95,80,99,"route"],[88,100,80,104],[88,101,80,105,"initialRouteName"],[88,117,80,121],[88,118,80,122],[88,119,80,123],[89,4,81,4],[89,8,81,10,"convertedWithInitial"],[89,28,81,30],[89,31,81,33,"converted"],[89,40,81,42],[89,41,81,43,"map"],[89,44,81,46],[89,45,81,48,"config"],[89,51,81,54],[89,56,81,60],[90,6,82,8],[90,9,82,11,"config"],[90,15,82,17],[91,6,83,8],[92,6,84,8],[93,6,85,8,"isInitial"],[93,15,85,17],[93,17,85,19,"resolvedInitialPatterns"],[93,40,85,42],[93,41,85,43,"includes"],[93,49,85,51],[93,50,85,52,"config"],[93,56,85,58],[93,57,85,59,"routeNames"],[93,67,85,69],[93,68,85,70,"join"],[93,72,85,74],[93,73,85,75],[93,76,85,78],[93,77,85,79],[94,4,86,4],[94,5,86,5],[94,6,86,6],[94,7,86,7],[95,4,87,4],[96,4,88,4],[96,8,88,10,"configs"],[96,15,88,17],[96,18,88,20,"convertedWithInitial"],[96,38,88,40],[96,39,88,41,"sort"],[96,43,88,45],[96,44,88,46],[96,45,88,47,"a"],[96,46,88,48],[96,48,88,50,"b"],[96,49,88,51],[96,54,88,56,"sortConfigs"],[96,65,88,67],[96,66,88,68,"a"],[96,67,88,69],[96,69,88,71,"b"],[96,70,88,72],[96,72,88,74,"previousSegments"],[96,88,88,90],[96,89,88,91],[96,90,88,92],[97,4,89,4],[98,4,90,4,"assertConfigDuplicates"],[98,26,90,26],[98,27,90,27,"configs"],[98,34,90,34],[98,35,90,35],[99,4,91,4],[99,11,91,11],[100,6,91,13,"configs"],[100,13,91,20],[101,6,91,22,"initialRoutes"],[102,4,91,36],[102,5,91,37],[103,2,92,0],[104,2,93,0,"exports"],[104,9,93,7],[104,10,93,8,"getMatchableRouteConfigs"],[104,34,93,32],[104,37,93,35,"getMatchableRouteConfigs"],[104,61,93,59],[105,2,94,0],[105,11,94,9,"assertConfigDuplicates"],[105,33,94,31,"assertConfigDuplicates"],[105,34,94,32,"configs"],[105,41,94,39],[105,43,94,41],[106,4,95,4],[107,4,96,4,"configs"],[107,11,96,11],[107,12,96,12,"reduce"],[107,18,96,18],[107,19,96,19],[107,20,96,20,"acc"],[107,23,96,23],[107,25,96,25,"config"],[107,31,96,31],[107,36,96,36],[108,6,97,8],[109,6,98,8],[109,10,98,14,"indexedKey"],[109,20,98,24],[109,23,98,27,"config"],[109,29,98,33],[109,30,98,34,"regex"],[109,35,98,39],[109,37,98,41,"toString"],[109,45,98,49],[109,46,98,50],[109,47,98,51],[109,51,98,55,"config"],[109,57,98,61],[109,58,98,62,"pattern"],[109,65,98,69],[110,6,99,8],[110,10,99,14,"alpha"],[110,15,99,19],[110,18,99,22,"acc"],[110,21,99,25],[110,22,99,26,"indexedKey"],[110,32,99,36],[110,33,99,37],[111,6,100,8],[112,6,101,8],[112,10,101,12,"alpha"],[112,15,101,17],[112,19,101,21],[112,20,101,22,"alpha"],[112,25,101,27],[112,26,101,28,"hasChildren"],[112,37,101,39],[112,41,101,43],[112,42,101,44,"config"],[112,48,101,50],[112,49,101,51,"hasChildren"],[112,60,101,62],[112,62,101,64],[113,8,102,12],[113,12,102,18,"a"],[113,13,102,19],[113,16,102,22,"alpha"],[113,21,102,27],[113,22,102,28,"routeNames"],[113,32,102,38],[114,8,103,12],[114,12,103,18,"b"],[114,13,103,19],[114,16,103,22,"config"],[114,22,103,28],[114,23,103,29,"routeNames"],[114,33,103,39],[115,8,104,12],[116,8,105,12],[117,8,106,12],[117,12,106,18,"intersects"],[117,22,106,28],[117,25,106,31,"a"],[117,26,106,32],[117,27,106,33,"length"],[117,33,106,39],[117,36,106,42,"b"],[117,37,106,43],[117,38,106,44,"length"],[117,44,106,50],[117,47,106,53,"b"],[117,48,106,54],[117,49,106,55,"every"],[117,54,106,60],[117,55,106,61],[117,56,106,62,"it"],[117,58,106,64],[117,60,106,66,"i"],[117,61,106,67],[117,66,106,72,"a"],[117,67,106,73],[117,68,106,74,"i"],[117,69,106,75],[117,70,106,76],[117,75,106,81,"it"],[117,77,106,83],[117,78,106,84],[117,81,106,87,"a"],[117,82,106,88],[117,83,106,89,"every"],[117,88,106,94],[117,89,106,95],[117,90,106,96,"it"],[117,92,106,98],[117,94,106,100,"i"],[117,95,106,101],[117,100,106,106,"b"],[117,101,106,107],[117,102,106,108,"i"],[117,103,106,109],[117,104,106,110],[117,109,106,115,"it"],[117,111,106,117],[117,112,106,118],[118,8,107,12],[118,12,107,16],[118,13,107,17,"intersects"],[118,23,107,27],[118,25,107,29],[119,10,108,16],[120,10,109,16],[121,10,110,16],[121,14,110,22,"last"],[121,18,110,26],[121,21,110,29,"config"],[121,27,110,35],[121,28,110,36,"pattern"],[121,35,110,43],[121,36,110,44,"split"],[121,41,110,49],[121,42,110,50],[121,45,110,53],[121,46,110,54],[121,47,110,55,"pop"],[121,50,110,58],[121,51,110,59],[121,52,110,60],[122,10,111,16],[122,14,111,20],[122,15,111,21,"last"],[122,19,111,25],[122,21,111,27,"match"],[122,26,111,32],[122,27,111,33],[122,42,111,48],[122,43,111,49],[122,45,111,51],[123,12,112,20],[123,16,112,26,"routeType"],[123,25,112,35],[123,28,112,38,"last"],[123,32,112,42],[123,34,112,44,"startsWith"],[123,44,112,54],[123,45,112,55],[123,48,112,58],[123,49,112,59],[123,52,113,26],[123,67,113,41],[123,70,114,26,"last"],[123,74,114,30],[123,76,114,32,"startsWith"],[123,86,114,42],[123,87,114,43],[123,90,114,46],[123,91,114,47],[123,94,115,30],[123,114,115,50],[123,117,116,30],[123,124,116,37],[124,12,117,20],[124,18,117,26],[124,22,117,30,"Error"],[124,27,117,35],[124,28,117,36],[124,35,117,43,"routeType"],[124,44,117,52],[124,57,117,65,"config"],[124,63,117,71],[124,64,117,72,"pattern"],[124,71,117,79],[124,75,117,83],[124,78,117,86],[124,101,117,109,"alpha"],[124,106,117,114],[124,107,117,115,"userReadableName"],[124,123,117,131],[124,133,117,141,"config"],[124,139,117,147],[124,140,117,148,"userReadableName"],[124,156,117,164],[124,227,117,235],[124,228,117,236],[125,10,118,16],[126,8,119,12],[127,6,120,8],[128,6,121,8],[128,13,121,15,"Object"],[128,19,121,21],[128,20,121,22,"assign"],[128,26,121,28],[128,27,121,29,"acc"],[128,30,121,32],[128,32,121,34],[129,8,122,12],[129,9,122,13,"indexedKey"],[129,19,122,23],[129,22,122,26,"config"],[130,6,123,8],[130,7,123,9],[130,8,123,10],[131,4,124,4],[131,5,124,5],[131,7,124,7],[131,8,124,8],[131,9,124,9],[131,10,124,10],[132,2,125,0],[133,2,126,0],[133,11,126,9,"sortConfigs"],[133,22,126,20,"sortConfigs"],[133,23,126,21,"a"],[133,24,126,22],[133,26,126,24,"b"],[133,27,126,25],[133,29,126,50],[134,4,126,50],[134,8,126,27,"previousSegments"],[134,24,126,43],[134,27,126,43,"arguments"],[134,36,126,43],[134,37,126,43,"length"],[134,43,126,43],[134,51,126,43,"arguments"],[134,60,126,43],[134,68,126,43,"undefined"],[134,77,126,43],[134,80,126,43,"arguments"],[134,89,126,43],[134,95,126,46],[134,97,126,48],[135,4,127,4],[136,4,128,4],[137,4,129,4],[138,4,130,4],[139,4,131,4],[140,4,132,4],[140,8,132,8,"a"],[140,9,132,9],[140,10,132,10,"pattern"],[140,17,132,17],[140,22,132,22,"b"],[140,23,132,23],[140,24,132,24,"pattern"],[140,31,132,31],[140,33,132,33],[141,6,133,8],[141,13,133,15,"b"],[141,14,133,16],[141,15,133,17,"routeNames"],[141,25,133,27],[141,26,133,28,"join"],[141,30,133,32],[141,31,133,33],[141,34,133,36],[141,35,133,37],[141,36,133,38,"localeCompare"],[141,49,133,51],[141,50,133,52,"a"],[141,51,133,53],[141,52,133,54,"routeNames"],[141,62,133,64],[141,63,133,65,"join"],[141,67,133,69],[141,68,133,70],[141,71,133,73],[141,72,133,74],[141,73,133,75],[142,4,134,4],[143,4,135,4],[144,0,136,0],[145,0,137,0],[146,0,138,0],[147,0,139,0],[148,0,140,0],[149,0,141,0],[150,0,142,0],[151,0,143,0],[152,0,144,0],[153,0,145,0],[154,0,146,0],[155,0,147,0],[156,4,148,4],[156,8,148,8,"a"],[156,9,148,9],[156,10,148,10,"pattern"],[156,17,148,17],[156,18,148,18,"startsWith"],[156,28,148,28],[156,29,148,29,"b"],[156,30,148,30],[156,31,148,31,"pattern"],[156,38,148,38],[156,39,148,39],[156,43,148,43],[156,44,148,44,"b"],[156,45,148,45],[156,46,148,46,"isIndex"],[156,53,148,53],[156,55,148,55],[157,6,149,8],[157,13,149,15],[157,14,149,16],[157,15,149,17],[158,4,150,4],[159,4,151,4],[159,8,151,8,"b"],[159,9,151,9],[159,10,151,10,"pattern"],[159,17,151,17],[159,18,151,18,"startsWith"],[159,28,151,28],[159,29,151,29,"a"],[159,30,151,30],[159,31,151,31,"pattern"],[159,38,151,38],[159,39,151,39],[159,43,151,43],[159,44,151,44,"a"],[159,45,151,45],[159,46,151,46,"isIndex"],[159,53,151,53],[159,55,151,55],[160,6,152,8],[160,13,152,15],[160,14,152,16],[161,4,153,4],[162,4,154,4],[163,0,155,0],[164,0,156,0],[165,4,157,4],[165,8,157,8,"a"],[165,9,157,9],[165,10,157,10,"type"],[165,14,157,14],[165,19,157,19],[165,27,157,27],[165,31,157,31,"b"],[165,32,157,32],[165,33,157,33,"type"],[165,37,157,37],[165,42,157,42],[165,50,157,50],[165,52,157,52],[166,6,158,8],[166,13,158,15],[166,14,158,16],[166,15,158,17],[167,4,159,4],[167,5,159,5],[167,11,160,9],[167,15,160,13,"a"],[167,16,160,14],[167,17,160,15,"type"],[167,21,160,19],[167,26,160,24],[167,34,160,32],[167,38,160,36,"b"],[167,39,160,37],[167,40,160,38,"type"],[167,44,160,42],[167,49,160,47],[167,57,160,55],[167,59,160,57],[168,6,161,8],[168,13,161,15],[168,14,161,16],[169,4,162,4],[170,4,163,4],[171,0,164,0],[172,0,165,0],[173,4,166,4],[173,8,166,10,"similarToPreviousA"],[173,26,166,28],[173,29,166,31,"previousSegments"],[173,45,166,47],[173,46,166,48,"filter"],[173,52,166,54],[173,53,166,55],[173,54,166,56,"value"],[173,59,166,61],[173,61,166,63,"index"],[173,66,166,68],[173,71,166,73],[174,6,167,8],[174,13,167,15,"value"],[174,18,167,20],[174,23,167,25,"a"],[174,24,167,26],[174,25,167,27,"expandedRouteNames"],[174,43,167,45],[174,44,167,46,"index"],[174,49,167,51],[174,50,167,52],[174,54,167,56,"value"],[174,59,167,61],[174,60,167,62,"startsWith"],[174,70,167,72],[174,71,167,73],[174,74,167,76],[174,75,167,77],[174,79,167,81,"value"],[174,84,167,86],[174,85,167,87,"endsWith"],[174,93,167,95],[174,94,167,96],[174,97,167,99],[174,98,167,100],[175,4,168,4],[175,5,168,5],[175,6,168,6],[176,4,169,4],[176,8,169,10,"similarToPreviousB"],[176,26,169,28],[176,29,169,31,"previousSegments"],[176,45,169,47],[176,46,169,48,"filter"],[176,52,169,54],[176,53,169,55],[176,54,169,56,"value"],[176,59,169,61],[176,61,169,63,"index"],[176,66,169,68],[176,71,169,73],[177,6,170,8],[177,13,170,15,"value"],[177,18,170,20],[177,23,170,25,"b"],[177,24,170,26],[177,25,170,27,"expandedRouteNames"],[177,43,170,45],[177,44,170,46,"index"],[177,49,170,51],[177,50,170,52],[177,54,170,56,"value"],[177,59,170,61],[177,60,170,62,"startsWith"],[177,70,170,72],[177,71,170,73],[177,74,170,76],[177,75,170,77],[177,79,170,81,"value"],[177,84,170,86],[177,85,170,87,"endsWith"],[177,93,170,95],[177,94,170,96],[177,97,170,99],[177,98,170,100],[178,4,171,4],[178,5,171,5],[178,6,171,6],[179,4,172,4],[179,8,172,8],[179,9,172,9,"similarToPreviousA"],[179,27,172,27],[179,28,172,28,"length"],[179,34,172,34],[179,37,172,37],[179,38,172,38],[179,42,172,42,"similarToPreviousB"],[179,60,172,60],[179,61,172,61,"length"],[179,67,172,67],[179,70,172,70],[179,71,172,71],[179,76,173,8,"similarToPreviousA"],[179,94,173,26],[179,95,173,27,"length"],[179,101,173,33],[179,106,173,38,"similarToPreviousB"],[179,124,173,56],[179,125,173,57,"length"],[179,131,173,63],[179,133,173,65],[180,6,174,8],[181,6,175,8],[181,13,175,15,"similarToPreviousB"],[181,31,175,33],[181,32,175,34,"length"],[181,38,175,40],[181,41,175,43,"similarToPreviousA"],[181,59,175,61],[181,60,175,62,"length"],[181,66,175,68],[182,4,176,4],[183,4,177,4],[184,0,178,0],[185,0,179,0],[186,4,180,4],[186,9,180,9],[186,13,180,13,"i"],[186,14,180,14],[186,17,180,17],[186,18,180,18],[186,20,180,20,"i"],[186,21,180,21],[186,24,180,24,"Math"],[186,28,180,28],[186,29,180,29,"max"],[186,32,180,32],[186,33,180,33,"a"],[186,34,180,34],[186,35,180,35,"parts"],[186,40,180,40],[186,41,180,41,"length"],[186,47,180,47],[186,49,180,49,"b"],[186,50,180,50],[186,51,180,51,"parts"],[186,56,180,56],[186,57,180,57,"length"],[186,63,180,63],[186,64,180,64],[186,66,180,66,"i"],[186,67,180,67],[186,69,180,69],[186,71,180,71],[187,6,181,8],[188,6,182,8],[188,10,182,12,"a"],[188,11,182,13],[188,12,182,14,"parts"],[188,17,182,19],[188,18,182,20,"i"],[188,19,182,21],[188,20,182,22],[188,24,182,26],[188,28,182,30],[188,30,182,32],[189,8,183,12],[189,15,183,19],[189,16,183,20],[190,6,184,8],[191,6,185,8],[192,6,186,8],[192,10,186,12,"b"],[192,11,186,13],[192,12,186,14,"parts"],[192,17,186,19],[192,18,186,20,"i"],[192,19,186,21],[192,20,186,22],[192,24,186,26],[192,28,186,30],[192,30,186,32],[193,8,187,12],[193,15,187,19],[193,16,187,20],[193,17,187,21],[194,6,188,8],[195,6,189,8],[195,10,189,14,"aWildCard"],[195,19,189,23],[195,22,189,26,"a"],[195,23,189,27],[195,24,189,28,"parts"],[195,29,189,33],[195,30,189,34,"i"],[195,31,189,35],[195,32,189,36],[195,33,189,37,"startsWith"],[195,43,189,47],[195,44,189,48],[195,47,189,51],[195,48,189,52],[196,6,190,8],[196,10,190,14,"bWildCard"],[196,19,190,23],[196,22,190,26,"b"],[196,23,190,27],[196,24,190,28,"parts"],[196,29,190,33],[196,30,190,34,"i"],[196,31,190,35],[196,32,190,36],[196,33,190,37,"startsWith"],[196,43,190,47],[196,44,190,48],[196,47,190,51],[196,48,190,52],[197,6,191,8],[198,6,192,8],[198,10,192,12,"aWildCard"],[198,19,192,21],[198,23,192,25,"bWildCard"],[198,32,192,34],[198,34,192,36],[199,8,193,12],[199,12,193,18,"aNotFound"],[199,21,193,27],[199,24,193,30,"a"],[199,25,193,31],[199,26,193,32,"parts"],[199,31,193,37],[199,32,193,38,"i"],[199,33,193,39],[199,34,193,40],[199,35,193,41,"match"],[199,40,193,46],[199,41,193,47],[199,57,193,63],[199,58,193,64],[200,8,194,12],[200,12,194,18,"bNotFound"],[200,21,194,27],[200,24,194,30,"b"],[200,25,194,31],[200,26,194,32,"parts"],[200,31,194,37],[200,32,194,38,"i"],[200,33,194,39],[200,34,194,40],[200,35,194,41,"match"],[200,40,194,46],[200,41,194,47],[200,57,194,63],[200,58,194,64],[201,8,195,12],[201,12,195,16,"aNotFound"],[201,21,195,25],[201,25,195,29,"bNotFound"],[201,34,195,38],[201,36,195,40],[202,10,196,16],[203,8,197,12],[203,9,197,13],[203,15,198,17],[203,19,198,21,"aNotFound"],[203,28,198,30],[203,30,198,32],[204,10,199,16],[204,17,199,23],[204,18,199,24],[205,8,200,12],[205,9,200,13],[205,15,201,17],[205,19,201,21,"bNotFound"],[205,28,201,30],[205,30,201,32],[206,10,202,16],[206,17,202,23],[206,18,202,24],[206,19,202,25],[207,8,203,12],[208,8,204,12],[209,6,205,8],[210,6,206,8],[211,6,207,8],[211,10,207,12,"aWildCard"],[211,19,207,21],[211,21,207,23],[212,8,208,12],[212,15,208,19],[212,16,208,20],[213,6,209,8],[214,6,210,8],[215,6,211,8],[215,10,211,12,"bWildCard"],[215,19,211,21],[215,21,211,23],[216,8,212,12],[216,15,212,19],[216,16,212,20],[216,17,212,21],[217,6,213,8],[218,6,214,8],[218,10,214,14,"aSlug"],[218,15,214,19],[218,18,214,22,"a"],[218,19,214,23],[218,20,214,24,"parts"],[218,25,214,29],[218,26,214,30,"i"],[218,27,214,31],[218,28,214,32],[218,29,214,33,"startsWith"],[218,39,214,43],[218,40,214,44],[218,43,214,47],[218,44,214,48],[219,6,215,8],[219,10,215,14,"bSlug"],[219,15,215,19],[219,18,215,22,"b"],[219,19,215,23],[219,20,215,24,"parts"],[219,25,215,29],[219,26,215,30,"i"],[219,27,215,31],[219,28,215,32],[219,29,215,33,"startsWith"],[219,39,215,43],[219,40,215,44],[219,43,215,47],[219,44,215,48],[220,6,216,8],[221,6,217,8],[221,10,217,12,"aSlug"],[221,15,217,17],[221,19,217,21,"bSlug"],[221,24,217,26],[221,26,217,28],[222,8,218,12],[222,12,218,18,"aNotFound"],[222,22,218,27],[222,25,218,30,"a"],[222,26,218,31],[222,27,218,32,"parts"],[222,32,218,37],[222,33,218,38,"i"],[222,34,218,39],[222,35,218,40],[222,36,218,41,"match"],[222,41,218,46],[222,42,218,47],[222,58,218,63],[222,59,218,64],[223,8,219,12],[223,12,219,18,"bNotFound"],[223,22,219,27],[223,25,219,30,"b"],[223,26,219,31],[223,27,219,32,"parts"],[223,32,219,37],[223,33,219,38,"i"],[223,34,219,39],[223,35,219,40],[223,36,219,41,"match"],[223,41,219,46],[223,42,219,47],[223,58,219,63],[223,59,219,64],[224,8,220,12],[224,12,220,16,"aNotFound"],[224,22,220,25],[224,26,220,29,"bNotFound"],[224,36,220,38],[224,38,220,40],[225,10,221,16],[226,8,222,12],[226,9,222,13],[226,15,223,17],[226,19,223,21,"aNotFound"],[226,29,223,30],[226,31,223,32],[227,10,224,16],[227,17,224,23],[227,18,224,24],[228,8,225,12],[228,9,225,13],[228,15,226,17],[228,19,226,21,"bNotFound"],[228,29,226,30],[228,31,226,32],[229,10,227,16],[229,17,227,23],[229,18,227,24],[229,19,227,25],[230,8,228,12],[231,8,229,12],[232,6,230,8],[233,6,231,8],[234,6,232,8],[234,10,232,12,"aSlug"],[234,15,232,17],[234,17,232,19],[235,8,233,12],[235,15,233,19],[235,16,233,20],[236,6,234,8],[237,6,235,8],[238,6,236,8],[238,10,236,12,"bSlug"],[238,15,236,17],[238,17,236,19],[239,8,237,12],[239,15,237,19],[239,16,237,20],[239,17,237,21],[240,6,238,8],[241,4,239,4],[242,4,240,4],[243,0,241,0],[244,0,242,0],[245,0,243,0],[246,0,244,0],[247,0,245,0],[248,0,246,0],[249,0,247,0],[250,0,248,0],[251,0,249,0],[252,0,250,0],[253,0,251,0],[254,0,252,0],[255,0,253,0],[256,0,254,0],[257,4,255,4],[257,8,255,8,"a"],[257,9,255,9],[257,10,255,10,"isInitial"],[257,19,255,19],[257,23,255,23],[257,24,255,24,"b"],[257,25,255,25],[257,26,255,26,"isInitial"],[257,35,255,35],[257,37,255,37],[258,6,256,8],[258,13,256,15],[258,14,256,16],[258,15,256,17],[259,4,257,4],[259,5,257,5],[259,11,258,9],[259,15,258,13],[259,16,258,14,"a"],[259,17,258,15],[259,18,258,16,"isInitial"],[259,27,258,25],[259,31,258,29,"b"],[259,32,258,30],[259,33,258,31,"isInitial"],[259,42,258,40],[259,44,258,42],[260,6,259,8],[260,13,259,15],[260,14,259,16],[261,4,260,4],[262,4,261,4],[262,11,261,11,"b"],[262,12,261,12],[262,13,261,13,"parts"],[262,18,261,18],[262,19,261,19,"length"],[262,25,261,25],[262,28,261,28,"a"],[262,29,261,29],[262,30,261,30,"parts"],[262,35,261,35],[262,36,261,36,"length"],[262,42,261,42],[263,2,262,0],[264,2,263,0],[264,11,263,9,"getStateFromEmptyPathWithConfigs"],[264,43,263,41,"getStateFromEmptyPathWithConfigs"],[264,44,263,42,"path"],[264,48,263,46],[264,50,263,48,"hash"],[264,54,263,52],[264,56,263,54,"configs"],[264,63,263,61],[264,65,263,63,"initialRoutes"],[264,78,263,76],[264,80,263,78],[265,4,264,4],[266,4,265,4],[267,4,266,4],[268,4,267,4],[268,8,267,10,"leafNodes"],[268,17,267,19],[268,20,267,22,"configs"],[268,27,267,29],[268,28,268,9,"filter"],[268,34,268,15],[268,35,268,17,"config"],[268,41,268,23],[268,45,268,28],[268,46,268,29,"config"],[268,52,268,35],[268,53,268,36,"hasChildren"],[268,64,268,47],[268,65,268,48],[268,66,269,9,"map"],[268,69,269,12],[268,70,269,14,"value"],[268,75,269,19],[268,79,269,24],[269,6,270,8],[269,13,270,15],[270,8,271,12],[270,11,271,15,"value"],[270,16,271,20],[271,8,272,12],[272,8,273,12],[273,8,274,12,"path"],[273,12,274,16],[273,14,274,18],[273,15,274,19],[273,16,274,20],[273,18,274,22,"matchers_1"],[273,28,274,32],[273,29,274,33,"stripGroupSegmentsFromPath"],[273,55,274,59],[273,57,274,61,"value"],[273,62,274,66],[273,63,274,67,"path"],[273,67,274,71],[274,6,275,8],[274,7,275,9],[275,4,276,4],[275,5,276,5],[275,6,276,6],[276,4,277,4],[276,8,277,10,"match"],[276,13,277,15],[276,16,277,18,"leafNodes"],[276,25,277,27],[276,26,277,28,"find"],[276,30,277,32],[276,31,277,34,"config"],[276,37,277,40],[277,4,278,4],[278,4,279,4,"config"],[278,10,279,10],[278,11,279,11,"path"],[278,15,279,15],[278,20,279,20],[278,22,279,22],[278,27,279,27],[278,28,279,28,"config"],[278,34,279,34],[278,35,279,35,"regex"],[278,40,279,40],[278,44,279,44,"config"],[278,50,279,50],[278,51,279,51,"regex"],[278,56,279,56],[278,57,279,57,"test"],[278,61,279,61],[278,62,279,62],[278,64,279,64],[278,65,279,65],[278,66,279,66],[278,67,279,67],[278,71,280,8,"leafNodes"],[278,80,280,17],[278,81,280,18,"find"],[278,85,280,22],[278,86,280,24,"config"],[278,92,280,30],[279,4,281,8],[280,4,282,8,"config"],[280,10,282,14],[280,11,282,15,"path"],[280,15,282,19],[280,16,282,20,"startsWith"],[280,26,282,30],[280,27,282,31],[280,30,282,34],[280,31,282,35],[280,35,282,39,"config"],[280,41,282,45],[280,42,282,46,"regex"],[280,47,282,51],[280,48,282,52,"test"],[280,52,282,56],[280,53,282,57],[280,55,282,59],[280,56,282,60],[280,57,282,61],[281,4,283,8],[282,4,284,8],[283,4,285,8,"leafNodes"],[283,13,285,17],[283,14,285,18,"find"],[283,18,285,22],[283,19,285,24,"config"],[283,25,285,30],[283,29,285,35,"config"],[283,35,285,41],[283,36,285,42,"path"],[283,40,285,46],[283,41,285,47,"startsWith"],[283,51,285,57],[283,52,285,58],[283,55,285,61],[283,56,285,62],[283,60,285,66,"config"],[283,66,285,72],[283,67,285,73,"regex"],[283,72,285,78],[283,73,285,79,"test"],[283,77,285,83],[283,78,285,84],[283,81,285,87],[283,82,285,88],[283,83,285,89],[284,4,286,4],[284,8,286,8],[284,9,286,9,"match"],[284,14,286,14],[284,16,286,16],[285,6,287,8],[285,13,287,15,"undefined"],[285,22,287,24],[286,4,288,4],[287,4,289,4],[287,8,289,10,"routes"],[287,14,289,16],[287,17,289,19,"match"],[287,22,289,24],[287,23,289,25,"routeNames"],[287,33,289,35],[287,34,289,36,"map"],[287,37,289,39],[287,38,289,41,"name"],[287,42,289,45],[287,46,289,50],[288,6,290,8],[288,10,290,12],[288,11,290,13,"match"],[288,16,290,18],[288,17,290,19,"_route"],[288,23,290,25],[288,25,290,27],[289,8,291,12],[289,15,291,19],[290,10,291,21,"name"],[291,8,291,26],[291,9,291,27],[292,6,292,8],[293,6,293,8],[293,13,293,15],[294,8,294,12,"name"],[294,12,294,16],[295,8,295,12,"_route"],[295,14,295,18],[295,16,295,20,"match"],[295,21,295,25],[295,22,295,26,"_route"],[296,6,296,8],[296,7,296,9],[297,4,297,4],[297,5,297,5],[297,6,297,6],[298,4,298,4],[298,11,298,11,"createNestedStateObject"],[298,34,298,34],[298,35,298,35,"path"],[298,39,298,39],[298,41,298,41,"hash"],[298,45,298,45],[298,47,298,47,"routes"],[298,53,298,53],[298,55,298,55,"configs"],[298,62,298,62],[298,64,298,64,"initialRoutes"],[298,77,298,77],[298,78,298,78],[299,2,299,0],[300,2,300,0],[300,11,300,9,"getStateFromPathWithConfigs"],[300,38,300,36,"getStateFromPathWithConfigs"],[300,39,300,37,"path"],[300,43,300,41],[300,45,300,43,"configs"],[300,52,300,50],[300,54,300,52,"initialRoutes"],[300,67,300,65],[300,69,300,104],[301,4,300,104],[301,8,300,67,"baseUrl"],[301,15,300,74],[301,18,300,74,"arguments"],[301,27,300,74],[301,28,300,74,"length"],[301,34,300,74],[301,42,300,74,"arguments"],[301,51,300,74],[301,59,300,74,"undefined"],[301,68,300,74],[301,71,300,74,"arguments"],[301,80,300,74],[302,4,301,4],[302,8,301,10,"formattedPaths"],[302,22,301,24],[302,25,301,27,"getUrlWithReactNavigationConcessions"],[302,61,301,63],[302,62,301,64,"path"],[302,66,301,68],[302,67,301,69],[303,4,302,4],[303,8,302,8],[303,9,302,9,"formattedPaths"],[303,23,302,23],[303,24,302,24,"url"],[303,27,302,27],[303,29,303,8],[304,4,304,4],[304,8,304,8,"cleanPath"],[304,17,304,17],[304,20,304,20,"stripBaseUrl"],[304,32,304,32],[304,33,304,33],[304,34,304,34],[304,35,304,35],[304,37,304,37,"matchers_1"],[304,47,304,47],[304,48,304,48,"stripGroupSegmentsFromPath"],[304,74,304,74],[304,76,304,76,"formattedPaths"],[304,90,304,90],[304,91,304,91,"url"],[304,94,304,94],[304,95,304,95,"pathname"],[304,103,304,103],[304,104,304,104],[304,106,304,106,"baseUrl"],[304,113,304,113],[304,114,304,114],[304,117,305,8,"formattedPaths"],[304,131,305,22],[304,132,305,23,"url"],[304,135,305,26],[304,136,305,27,"search"],[304,142,305,33],[305,4,306,4],[305,8,306,8],[305,9,306,9,"path"],[305,13,306,13],[305,14,306,14,"startsWith"],[305,24,306,24],[305,25,306,25],[305,28,306,28],[305,29,306,29],[305,31,307,8,"cleanPath"],[305,40,307,17],[305,43,307,20,"cleanPath"],[305,52,307,29],[305,53,307,30,"slice"],[305,58,307,35],[305,59,307,36],[305,60,307,37],[305,61,307,38],[306,4,308,4],[306,8,308,8,"formattedPaths"],[306,22,308,22],[306,23,308,23,"nonstandardPathname"],[306,42,308,42],[306,47,308,47],[306,50,308,50],[306,52,308,52],[307,6,309,8],[307,13,309,15,"getStateFromEmptyPathWithConfigs"],[307,45,309,47],[307,46,309,48,"cleanPath"],[307,55,309,57],[307,57,309,59,"formattedPaths"],[307,71,309,73],[307,72,309,74,"url"],[307,75,309,77],[307,76,309,78,"hash"],[307,80,309,82],[307,81,309,83,"slice"],[307,86,309,88],[307,87,309,89],[307,88,309,90],[307,89,309,91],[307,91,309,93,"configs"],[307,98,309,100],[307,100,309,102,"initialRoutes"],[307,113,309,115],[307,114,309,116],[308,4,310,4],[309,4,311,4],[310,4,312,4],[311,4,313,4],[311,8,313,10,"routes"],[311,14,313,16],[311,17,313,19,"matchAgainstConfigs"],[311,36,313,38],[311,37,313,39,"formattedPaths"],[311,51,313,53],[311,52,313,54,"nonstandardPathname"],[311,71,313,73],[311,73,313,75,"configs"],[311,80,313,82],[311,81,313,83],[312,4,314,4],[312,8,314,8,"routes"],[312,14,314,14],[312,18,314,18],[312,22,314,22],[312,24,314,24],[313,6,315,8],[313,13,315,15,"undefined"],[313,22,315,24],[314,4,316,4],[315,4,317,4],[316,4,318,4],[316,11,318,11,"createNestedStateObject"],[316,34,318,34],[316,35,318,35,"cleanPath"],[316,44,318,44],[316,46,318,46,"formattedPaths"],[316,60,318,60],[316,61,318,61,"url"],[316,64,318,64],[316,65,318,65,"hash"],[316,69,318,69],[316,70,318,70,"slice"],[316,75,318,75],[316,76,318,76],[316,77,318,77],[316,78,318,78],[316,80,318,80,"routes"],[316,86,318,86],[316,88,318,88,"configs"],[316,95,318,95],[316,97,318,97,"initialRoutes"],[316,110,318,110],[316,111,318,111],[317,2,319,0],[318,2,320,0],[318,6,320,6,"joinPaths"],[318,15,320,15],[318,18,320,18],[318,27,320,18,"joinPaths"],[318,28,320,18],[319,4,320,18],[319,13,320,18,"_len"],[319,17,320,18],[319,20,320,18,"arguments"],[319,29,320,18],[319,30,320,18,"length"],[319,36,320,18],[319,38,320,22,"paths"],[319,43,320,27],[319,50,320,27,"Array"],[319,55,320,27],[319,56,320,27,"_len"],[319,60,320,27],[319,63,320,27,"_key"],[319,67,320,27],[319,73,320,27,"_key"],[319,77,320,27],[319,80,320,27,"_len"],[319,84,320,27],[319,86,320,27,"_key"],[319,90,320,27],[320,6,320,22,"paths"],[320,11,320,27],[320,12,320,27,"_key"],[320,16,320,27],[320,20,320,27,"arguments"],[320,29,320,27],[320,30,320,27,"_key"],[320,34,320,27],[321,4,320,27],[322,4,320,27],[322,11,320,32],[322,13,320,34],[322,14,321,5,"concat"],[322,20,321,11],[322,21,321,12],[322,24,321,15,"paths"],[322,29,321,20],[322,30,321,21,"map"],[322,33,321,24],[322,34,321,26,"p"],[322,35,321,27],[322,39,321,32,"p"],[322,40,321,33],[322,41,321,34,"split"],[322,46,321,39],[322,47,321,40],[322,50,321,43],[322,51,321,44],[322,52,321,45],[322,53,321,46],[322,54,322,5,"filter"],[322,60,322,11],[322,61,322,12,"Boolean"],[322,68,322,19],[322,69,322,20],[322,70,323,5,"join"],[322,74,323,9],[322,75,323,10],[322,78,323,13],[322,79,323,14],[323,2,323,14],[324,2,324,0],[324,11,324,9,"matchAgainstConfigs"],[324,30,324,28,"matchAgainstConfigs"],[324,31,324,29,"remaining"],[324,40,324,38],[324,42,324,40,"configs"],[324,49,324,47],[324,51,324,49],[325,4,325,4],[325,8,325,8,"routes"],[325,14,325,14],[326,4,326,4],[326,8,326,8,"remainingPath"],[326,21,326,21],[326,24,326,24,"remaining"],[326,33,326,33],[327,4,327,4],[328,4,327,4],[328,8,327,4,"_loop"],[328,13,327,4],[328,25,327,4,"_loop"],[328,26,327,4,"config"],[328,32,327,4],[328,34,328,34],[329,8,329,8],[329,12,329,12],[329,13,329,13,"config"],[329,19,329,19],[329,20,329,20,"regex"],[329,25,329,25],[329,27,329,27],[330,10,329,27],[331,8,331,8],[332,8,332,8],[332,12,332,14,"match"],[332,17,332,19],[332,20,332,22,"remainingPath"],[332,33,332,35],[332,34,332,36,"match"],[332,39,332,41],[332,40,332,42,"config"],[332,46,332,48],[332,47,332,49,"regex"],[332,52,332,54],[332,53,332,55],[333,8,333,8],[334,8,334,8],[334,12,334,12],[334,13,334,13,"match"],[334,18,334,18],[334,20,334,20],[335,10,334,20],[336,8,336,8],[337,8,337,8],[338,8,338,8],[338,12,338,14,"matchedParams"],[338,25,338,27],[338,28,338,30,"config"],[338,34,338,36],[338,35,338,37,"pattern"],[338,42,338,44],[338,44,339,14,"split"],[338,49,339,19],[338,50,339,20],[338,53,339,23],[338,54,339,24],[338,55,340,13,"filter"],[338,61,340,19],[338,62,340,21,"p"],[338,63,340,22],[338,67,340,27,"p"],[338,68,340,28],[338,69,340,29,"match"],[338,74,340,34],[338,75,340,35],[338,82,340,42],[338,83,340,43],[338,84,340,44],[338,85,341,13,"reduce"],[338,91,341,19],[338,92,341,20],[338,93,341,21,"acc"],[338,96,341,24],[338,98,341,26,"p"],[338,99,341,27],[338,101,341,29,"i"],[338,102,341,30],[338,107,341,35],[339,10,342,12],[339,14,342,16,"p"],[339,15,342,17],[339,16,342,18,"match"],[339,21,342,23],[339,22,342,24],[339,27,342,29],[339,28,342,30],[339,30,342,32],[340,12,343,16],[340,19,343,23],[341,14,344,20],[341,17,344,23,"acc"],[341,20,344,26],[342,14,345,20],[342,15,345,21,"p"],[342,16,345,22],[342,19,345,25,"match"],[342,24,345,30],[342,25,345,31],[342,26,345,32,"i"],[342,27,345,33],[342,30,345,36],[342,31,345,37],[342,35,345,41],[342,36,345,42],[342,37,345,43],[342,38,345,45],[343,12,346,16],[343,13,346,17],[344,10,347,12],[345,10,348,12],[345,17,348,19,"Object"],[345,23,348,25],[345,24,348,26,"assign"],[345,30,348,32],[345,31,348,33,"acc"],[345,34,348,36],[345,36,348,38],[346,12,349,16],[347,12,350,16],[348,12,351,16],[348,13,351,17,"p"],[348,14,351,18],[348,17,351,21,"match"],[348,22,351,26],[348,23,351,27],[348,24,351,28,"i"],[348,25,351,29],[348,28,351,32],[348,29,351,33],[348,33,351,37],[348,34,351,38],[348,35,351,39],[348,37,351,41,"replace"],[348,44,351,48],[348,45,351,49],[348,49,351,53],[348,51,351,55],[348,53,351,57],[349,10,352,12],[349,11,352,13],[349,12,352,14],[350,8,353,8],[350,9,353,9],[350,11,353,11],[350,12,353,12],[350,13,353,13],[350,14,353,14],[351,8,354,8],[351,12,354,14,"routeFromName"],[351,25,354,27],[351,28,354,31,"name"],[351,32,354,35],[351,36,354,40],[352,10,355,12],[352,14,355,18,"config"],[352,20,355,24],[352,23,355,27,"configs"],[352,30,355,34],[352,31,355,35,"find"],[352,35,355,39],[352,36,355,41,"c"],[352,37,355,42],[352,41,355,47,"c"],[352,42,355,48],[352,43,355,49,"screen"],[352,49,355,55],[352,54,355,60,"name"],[352,58,355,64],[352,59,355,65],[353,10,356,12],[353,14,356,16],[353,15,356,17,"config"],[353,21,356,23],[353,23,356,25,"path"],[353,27,356,29],[353,29,356,31],[354,12,357,16],[354,19,357,23],[355,14,357,25,"name"],[356,12,357,30],[356,13,357,31],[357,10,358,12],[358,10,359,12],[358,14,359,18,"segments"],[358,22,359,26],[358,25,359,29,"config"],[358,31,359,35],[358,32,359,36,"path"],[358,36,359,40],[358,37,359,41,"split"],[358,42,359,46],[358,43,359,47],[358,46,359,50],[358,47,359,51],[359,10,360,12],[359,14,360,18,"params"],[359,20,360,24],[359,23,360,27],[359,24,360,28],[359,25,360,29],[360,10,361,12,"segments"],[360,18,361,20],[360,19,362,17,"filter"],[360,25,362,23],[360,26,362,25,"p"],[360,27,362,26],[360,31,362,31,"p"],[360,32,362,32],[360,33,362,33,"match"],[360,38,362,38],[360,39,362,39],[360,46,362,46],[360,47,362,47],[360,48,362,48],[360,49,363,17,"forEach"],[360,56,363,24],[360,57,363,26,"p"],[360,58,363,27],[360,62,363,32],[361,12,364,16],[361,16,364,20,"value"],[361,21,364,25],[361,24,364,28,"matchedParams"],[361,37,364,41],[361,38,364,42,"p"],[361,39,364,43],[361,40,364,44],[362,12,365,16],[362,16,365,20,"value"],[362,21,365,25],[362,23,365,27],[363,14,366,20],[363,18,366,24,"p"],[363,19,366,25],[363,20,366,26,"match"],[363,25,366,31],[363,26,366,32],[363,31,366,37],[363,32,366,38],[363,34,366,40],[364,16,367,24],[365,16,368,24,"value"],[365,21,368,29],[365,24,368,32,"value"],[365,29,368,37],[365,31,368,39,"split"],[365,36,368,44],[365,37,368,45],[365,40,368,48],[365,41,368,49],[365,42,368,50,"filter"],[365,48,368,56],[365,49,368,57,"Boolean"],[365,56,368,64],[365,57,368,65],[366,14,369,20],[367,14,370,20],[367,18,370,26,"key"],[367,21,370,29],[367,24,370,32,"p"],[367,25,370,33],[367,26,370,34,"replace"],[367,33,370,41],[367,34,370,42],[367,41,370,49],[367,43,370,51],[367,45,370,53],[367,46,370,54],[367,47,370,55,"replace"],[367,54,370,62],[367,55,370,63],[367,60,370,68],[367,62,370,70],[367,64,370,72],[367,65,370,73],[368,14,371,20,"params"],[368,20,371,26],[368,21,371,27,"key"],[368,24,371,30],[368,25,371,31],[368,28,371,34,"config"],[368,34,371,40],[368,35,371,41,"parse"],[368,40,371,46],[368,43,371,49,"key"],[368,46,371,52],[368,47,371,53],[368,50,371,56,"config"],[368,56,371,62],[368,57,371,63,"parse"],[368,62,371,68],[368,63,371,69,"key"],[368,66,371,72],[368,67,371,73],[368,68,371,74,"value"],[368,73,371,79],[368,74,371,80],[368,77,371,83,"value"],[368,82,371,88],[369,12,372,16],[370,10,373,12],[370,11,373,13],[370,12,373,14],[371,10,374,12],[371,14,374,16,"params"],[371,20,374,22],[371,24,374,26,"Object"],[371,30,374,32],[371,31,374,33,"keys"],[371,35,374,37],[371,36,374,38,"params"],[371,42,374,44],[371,43,374,45],[371,44,374,46,"length"],[371,50,374,52],[371,52,374,54],[372,12,375,16],[372,19,375,23],[373,14,375,25,"name"],[373,18,375,29],[374,14,375,31,"params"],[375,12,375,38],[375,13,375,39],[376,10,376,12],[377,10,377,12],[377,17,377,19],[378,12,377,21,"name"],[379,10,377,26],[379,11,377,27],[380,8,378,8],[380,9,378,9],[381,8,379,8,"routes"],[381,14,379,14],[381,17,379,17,"config"],[381,23,379,23],[381,24,379,24,"routeNames"],[381,34,379,34],[381,35,379,35,"map"],[381,38,379,38],[381,39,379,40,"name"],[381,43,379,44],[381,47,379,49],[382,10,380,12],[382,14,380,16],[382,15,380,17,"config"],[382,21,380,23],[382,22,380,24,"_route"],[382,28,380,30],[382,30,380,32],[383,12,381,16],[383,19,381,23],[384,14,381,25],[384,17,381,28,"routeFromName"],[384,30,381,41],[384,31,381,42,"name"],[384,35,381,46],[385,12,381,48],[385,13,381,49],[386,10,382,12],[387,10,383,12],[387,17,383,19],[388,12,384,16],[388,15,384,19,"routeFromName"],[388,28,384,32],[388,29,384,33,"name"],[388,33,384,37],[388,34,384,38],[389,12,385,16,"_route"],[389,18,385,22],[389,20,385,24,"config"],[389,26,385,30],[389,27,385,31,"_route"],[390,10,386,12],[390,11,386,13],[391,8,387,8],[391,9,387,9],[391,10,387,10],[392,8,388,8],[393,8,389,8],[393,12,389,14,"combinedParams"],[393,26,389,28],[393,29,389,31,"routes"],[393,35,389,37],[393,36,389,38,"reduce"],[393,42,389,44],[393,43,389,45],[393,44,389,46,"acc"],[393,47,389,49],[393,49,389,51,"r"],[393,50,389,52],[393,55,389,57,"Object"],[393,61,389,63],[393,62,389,64,"assign"],[393,68,389,70],[393,69,389,71,"acc"],[393,72,389,74],[393,74,389,76,"r"],[393,75,389,77],[393,76,389,78,"params"],[393,82,389,84],[393,83,389,85],[393,85,389,87],[393,86,389,88],[393,87,389,89],[393,88,389,90],[394,8,390,8],[394,12,390,14,"hasCombinedParams"],[394,29,390,31],[394,32,390,34,"Object"],[394,38,390,40],[394,39,390,41,"keys"],[394,43,390,45],[394,44,390,46,"combinedParams"],[394,58,390,60],[394,59,390,61],[394,60,390,62,"length"],[394,66,390,68],[394,69,390,71],[394,70,390,72],[395,8,391,8],[396,8,392,8,"routes"],[396,14,392,14],[396,17,392,17,"routes"],[396,23,392,23],[396,24,392,24,"map"],[396,27,392,27],[396,28,392,29,"r"],[396,29,392,30],[396,33,392,35],[397,10,393,12],[397,14,393,16,"hasCombinedParams"],[397,31,393,33],[397,33,393,35],[398,12,394,16,"r"],[398,13,394,17],[398,14,394,18,"params"],[398,20,394,24],[398,23,394,27,"combinedParams"],[398,37,394,41],[399,10,395,12],[400,10,396,12],[400,17,396,19,"r"],[400,18,396,20],[401,8,397,8],[401,9,397,9],[401,10,397,10],[402,8,398,8,"remainingPath"],[402,21,398,21],[402,24,398,24,"remainingPath"],[402,37,398,37],[402,38,398,38,"replace"],[402,45,398,45],[402,46,398,46,"match"],[402,51,398,51],[402,52,398,52],[402,53,398,53],[402,54,398,54],[402,56,398,56],[402,58,398,58],[402,59,398,59],[403,8,398,60],[404,6,400,4],[404,7,400,5],[405,6,400,5,"_ret"],[405,10,400,5],[406,4,328,4],[406,9,328,9],[406,13,328,15,"config"],[406,19,328,21],[406,23,328,25,"configs"],[406,30,328,32],[407,6,328,32,"_ret"],[407,10,328,32],[407,13,328,32,"_loop"],[407,18,328,32],[407,19,328,32,"config"],[407,25,328,32],[408,6,328,32],[408,10,328,32,"_ret"],[408,14,328,32],[408,22,330,12],[409,6,330,21],[409,10,330,21,"_ret"],[409,14,330,21],[409,22,399,8],[410,4,399,14],[411,4,401,4],[411,11,401,11,"routes"],[411,17,401,17],[412,2,402,0],[413,2,403,0],[413,11,403,9,"equalHeritage"],[413,24,403,22,"equalHeritage"],[413,25,403,23,"a"],[413,26,403,24],[413,28,403,26,"b"],[413,29,403,27],[413,31,403,29],[414,4,404,4],[414,8,404,8,"a"],[414,9,404,9],[414,10,404,10,"length"],[414,16,404,16],[414,21,404,21,"b"],[414,22,404,22],[414,23,404,23,"length"],[414,29,404,29],[414,31,404,31],[415,6,405,8],[415,13,405,15],[415,18,405,20],[416,4,406,4],[417,4,407,4],[417,9,407,9],[417,13,407,13,"i"],[417,14,407,14],[417,17,407,17],[417,18,407,18],[417,20,407,20,"i"],[417,21,407,21],[417,24,407,24,"a"],[417,25,407,25],[417,26,407,26,"length"],[417,32,407,32],[417,34,407,34,"i"],[417,35,407,35],[417,37,407,37],[417,39,407,39],[418,6,408,8],[418,10,408,12,"a"],[418,11,408,13],[418,12,408,14,"i"],[418,13,408,15],[418,14,408,16],[418,15,408,17,"localeCompare"],[418,28,408,30],[418,29,408,31,"b"],[418,30,408,32],[418,31,408,33,"i"],[418,32,408,34],[418,33,408,35],[418,34,408,36],[418,39,408,41],[418,40,408,42],[418,42,408,44],[419,8,409,12],[419,15,409,19],[419,20,409,24],[420,6,410,8],[421,4,411,4],[422,4,412,4],[422,11,412,11],[422,15,412,15],[423,2,413,0],[424,2,414,0],[424,6,414,6,"createNormalizedConfigs"],[424,29,414,29],[424,32,414,32],[424,41,414,32,"createNormalizedConfigs"],[424,42,414,33,"screen"],[424,48,414,39],[424,50,414,41,"routeConfig"],[424,61,414,52],[424,63,414,124],[425,4,414,124],[425,8,414,54,"routeNames"],[425,18,414,64],[425,21,414,64,"arguments"],[425,30,414,64],[425,31,414,64,"length"],[425,37,414,64],[425,45,414,64,"arguments"],[425,54,414,64],[425,62,414,64,"undefined"],[425,71,414,64],[425,74,414,64,"arguments"],[425,83,414,64],[425,89,414,67],[425,91,414,69],[426,4,414,69],[426,8,414,71,"initials"],[426,16,414,79],[426,19,414,79,"arguments"],[426,28,414,79],[426,29,414,79,"length"],[426,35,414,79],[426,43,414,79,"arguments"],[426,52,414,79],[426,60,414,79,"undefined"],[426,69,414,79],[426,72,414,79,"arguments"],[426,81,414,79],[426,87,414,82],[426,89,414,84],[427,4,414,84],[427,8,414,86,"parentScreens"],[427,21,414,99],[427,24,414,99,"arguments"],[427,33,414,99],[427,34,414,99,"length"],[427,40,414,99],[427,48,414,99,"arguments"],[427,57,414,99],[427,65,414,99,"undefined"],[427,74,414,99],[427,77,414,99,"arguments"],[427,86,414,99],[427,92,414,102],[427,94,414,104],[428,4,414,104],[428,8,414,106,"parentPattern"],[428,21,414,119],[428,24,414,119,"arguments"],[428,33,414,119],[428,34,414,119,"length"],[428,40,414,119],[428,47,414,119,"arguments"],[428,56,414,119],[428,62,414,119,"undefined"],[428,71,414,119],[429,4,415,4],[429,8,415,10,"configs"],[429,15,415,17],[429,18,415,20],[429,20,415,22],[430,4,416,4,"routeNames"],[430,14,416,14],[430,15,416,15,"push"],[430,19,416,19],[430,20,416,20,"screen"],[430,26,416,26],[430,27,416,27],[431,4,417,4,"parentScreens"],[431,17,417,17],[431,18,417,18,"push"],[431,22,417,22],[431,23,417,23,"screen"],[431,29,417,29],[431,30,417,30],[432,4,418,4],[432,8,418,10,"config"],[432,14,418,16],[432,17,418,19,"routeConfig"],[432,28,418,30],[432,29,418,31,"screen"],[432,35,418,37],[432,36,418,38],[433,4,419,4],[433,8,419,8],[433,15,419,15,"config"],[433,21,419,21],[433,26,419,26],[433,34,419,34],[433,36,419,36],[434,6,420,8],[435,6,421,8],[436,6,422,8],[436,10,422,14,"pattern"],[436,17,422,21],[436,20,422,24,"parentPattern"],[436,33,422,37],[436,36,422,40,"joinPaths"],[436,45,422,49],[436,46,422,50,"parentPattern"],[436,59,422,63],[436,61,422,65,"config"],[436,67,422,71],[436,68,422,72],[436,71,422,75,"config"],[436,77,422,81],[437,6,423,8,"configs"],[437,13,423,15],[437,14,423,16,"push"],[437,18,423,20],[437,19,423,21,"createConfigItem"],[437,35,423,37],[437,36,423,38,"screen"],[437,42,423,44],[437,44,423,46,"routeNames"],[437,54,423,56],[437,56,423,58,"pattern"],[437,63,423,65],[437,65,423,67,"config"],[437,71,423,73],[437,73,423,75],[437,78,423,80],[437,79,423,81],[437,80,423,82],[438,4,424,4],[438,5,424,5],[438,11,425,9],[438,15,425,13],[438,22,425,20,"config"],[438,28,425,26],[438,33,425,31],[438,41,425,39],[438,43,425,41],[439,6,426,8],[439,10,426,12,"pattern"],[439,18,426,19],[440,6,427,8],[440,10,427,16,"_route"],[440,16,427,22],[440,19,427,27,"config"],[440,25,427,33],[440,26,427,16,"_route"],[440,32,427,22],[441,6,428,8],[442,6,429,8],[443,6,430,8],[444,6,431,8],[444,10,431,12],[444,17,431,19,"config"],[444,23,431,25],[444,24,431,26,"path"],[444,28,431,30],[444,33,431,35],[444,41,431,43],[444,43,431,45],[445,8,432,12],[445,12,432,16,"config"],[445,18,432,22],[445,19,432,23,"exact"],[445,24,432,28],[445,28,432,32,"config"],[445,34,432,38],[445,35,432,39,"path"],[445,39,432,43],[445,44,432,48,"undefined"],[445,53,432,57],[445,55,432,59],[446,10,433,16],[446,16,433,22],[446,20,433,26,"Error"],[446,25,433,31],[446,26,433,32],[446,176,433,182],[446,177,433,183],[447,8,434,12],[448,8,435,12,"pattern"],[448,16,435,19],[448,19,436,16,"config"],[448,25,436,22],[448,26,436,23,"exact"],[448,31,436,28],[448,36,436,33],[448,40,436,37],[448,43,437,22,"joinPaths"],[448,52,437,31],[448,53,437,32,"parentPattern"],[448,66,437,45],[448,70,437,49],[448,72,437,51],[448,74,437,53,"config"],[448,80,437,59],[448,81,437,60,"path"],[448,85,437,64],[448,89,437,68],[448,91,437,70],[448,92,437,71],[448,95,438,22,"config"],[448,101,438,28],[448,102,438,29,"path"],[448,106,438,33],[448,110,438,37],[448,112,438,39],[449,8,439,12,"configs"],[449,15,439,19],[449,16,439,20,"push"],[449,20,439,24],[449,21,439,25,"createConfigItem"],[449,37,439,41],[449,38,439,42,"screen"],[449,44,439,48],[449,46,439,50,"routeNames"],[449,56,439,60],[449,58,439,62,"pattern"],[449,66,439,69],[449,68,439,71,"config"],[449,74,439,77],[449,75,439,78,"path"],[449,79,439,82],[449,81,439,84,"config"],[449,87,439,90],[449,88,439,91,"screens"],[449,95,439,98],[449,98,439,101],[449,99,439,102],[449,100,439,103,"Object"],[449,106,439,109],[449,107,439,110,"keys"],[449,111,439,114],[449,112,439,115,"config"],[449,118,439,121],[449,119,439,122,"screens"],[449,126,439,129],[449,127,439,130],[449,129,439,132,"length"],[449,135,439,138],[449,138,439,141],[449,143,439,146],[449,145,439,148,"config"],[449,151,439,154],[449,152,439,155,"parse"],[449,157,439,160],[449,159,439,162,"_route"],[449,165,439,168],[449,166,439,169],[449,167,439,170],[450,6,440,8],[451,6,441,8],[451,10,441,12,"config"],[451,16,441,18],[451,17,441,19,"screens"],[451,24,441,26],[451,26,441,28],[452,8,442,12],[453,8,443,12],[453,12,443,16,"config"],[453,18,443,22],[453,19,443,23,"initialRouteName"],[453,35,443,39],[453,37,443,41],[454,10,444,16,"initials"],[454,18,444,24],[454,19,444,25,"push"],[454,23,444,29],[454,24,444,30],[455,12,445,20,"initialRouteName"],[455,28,445,36],[455,30,445,38,"config"],[455,36,445,44],[455,37,445,45,"initialRouteName"],[455,53,445,61],[456,12,446,20,"parentScreens"],[457,10,447,16],[457,11,447,17],[457,12,447,18],[458,8,448,12],[459,8,449,12,"Object"],[459,14,449,18],[459,15,449,19,"keys"],[459,19,449,23],[459,20,449,24,"config"],[459,26,449,30],[459,27,449,31,"screens"],[459,34,449,38],[459,35,449,39],[459,36,449,40,"forEach"],[459,43,449,47],[459,44,449,49,"nestedConfig"],[459,56,449,61],[459,60,449,66],[460,10,450,16],[460,14,450,22,"result"],[460,20,450,28],[460,23,450,31,"createNormalizedConfigs"],[460,46,450,54],[460,47,450,55,"nestedConfig"],[460,59,450,67],[460,61,450,69,"config"],[460,67,450,75],[460,68,450,76,"screens"],[460,75,450,83],[460,77,450,85,"routeNames"],[460,87,450,95],[460,89,450,97,"initials"],[460,97,450,105],[460,99,450,107],[460,100,450,108],[460,103,450,111,"parentScreens"],[460,116,450,124],[460,117,450,125],[460,119,450,127,"pattern"],[460,127,450,134],[460,131,450,138,"parentPattern"],[460,144,450,151],[460,145,450,152],[461,10,451,16,"configs"],[461,17,451,23],[461,18,451,24,"push"],[461,22,451,28],[461,23,451,29],[461,26,451,32,"result"],[461,32,451,38],[461,33,451,39],[462,8,452,12],[462,9,452,13],[462,10,452,14],[463,6,453,8],[464,4,454,4],[465,4,455,4,"routeNames"],[465,14,455,14],[465,15,455,15,"pop"],[465,18,455,18],[465,19,455,19],[465,20,455,20],[466,4,456,4],[466,11,456,11,"configs"],[466,18,456,18],[467,2,457,0],[467,3,457,1],[468,2,458,0],[468,11,458,9,"formatRegexPattern"],[468,29,458,27,"formatRegexPattern"],[468,30,458,28,"it"],[468,32,458,30],[468,34,458,32],[469,4,459,4],[470,4,460,4,"it"],[470,6,460,6],[470,9,460,9,"it"],[470,11,460,11],[470,12,460,12,"replace"],[470,19,460,19],[470,20,460,20],[470,23,460,23],[470,25,460,25],[470,30,460,30],[470,31,460,31],[471,4,461,4],[471,8,461,8,"it"],[471,10,461,10],[471,11,461,11,"startsWith"],[471,21,461,21],[471,22,461,22],[471,25,461,25],[471,26,461,26],[471,28,461,28],[472,6,462,8],[473,6,463,8],[473,13,463,15],[473,27,463,29,"it"],[473,29,463,31],[473,30,463,32,"endsWith"],[473,38,463,40],[473,39,463,41],[473,42,463,44],[473,43,463,45],[473,46,463,48],[473,49,463,51],[473,52,463,54],[473,54,463,56],[473,57,463,59],[474,4,464,4],[474,5,464,5],[474,11,465,9],[474,15,465,13,"it"],[474,17,465,15],[474,18,465,16,"startsWith"],[474,28,465,26],[474,29,465,27],[474,32,465,30],[474,33,465,31],[474,35,465,33],[475,6,466,8],[475,13,466,15],[475,24,466,26,"it"],[475,26,466,28],[475,27,466,29,"endsWith"],[475,35,466,37],[475,36,466,38],[475,39,466,41],[475,40,466,42],[475,43,466,45],[475,46,466,48],[475,49,466,51],[475,51,466,53],[475,54,466,56],[476,4,467,4],[477,4,468,4],[478,4,469,4],[478,8,469,8],[478,9,469,9],[478,10,469,10],[478,12,469,12,"matchers_1"],[478,22,469,22],[478,23,469,23,"matchGroupName"],[478,37,469,37],[478,39,469,39,"it"],[478,41,469,41],[478,42,469,42],[478,46,469,46],[478,50,469,50],[478,52,469,52],[479,6,470,8],[480,6,471,8],[481,6,472,8],[482,6,473,8],[482,13,473,15],[482,19,473,21],[482,20,473,22],[482,21,473,23],[482,23,473,25,"escape_string_regexp_1"],[482,45,473,47],[482,46,473,48,"default"],[482,53,473,55],[482,55,473,57,"it"],[482,57,473,59],[482,58,473,60],[482,65,473,67],[483,4,474,4],[484,4,475,4],[484,11,475,11],[484,12,475,12],[484,13,475,13],[484,15,475,15,"escape_string_regexp_1"],[484,37,475,37],[484,38,475,38,"default"],[484,45,475,45],[484,47,475,47,"it"],[484,49,475,49],[484,50,475,50],[484,53,475,53],[484,58,475,58],[485,2,476,0],[486,2,477,0],[486,6,477,6,"createConfigItem"],[486,22,477,22],[486,25,477,25,"createConfigItem"],[486,26,477,26,"screen"],[486,32,477,32],[486,34,477,34,"routeNames"],[486,44,477,44],[486,46,477,46,"pattern"],[486,53,477,53],[486,55,477,55,"path"],[486,59,477,59],[486,61,477,61,"hasChildren"],[486,72,477,72],[486,74,477,74,"parse"],[486,79,477,79],[486,81,477,81,"_route"],[486,87,477,87],[486,92,477,92],[487,4,478,4],[488,4,479,4],[488,8,479,10,"patternParts"],[488,20,479,22],[488,23,479,25],[488,25,479,27],[489,4,480,4],[489,8,480,10,"parts"],[489,13,480,15],[489,16,480,18],[489,18,480,20],[490,4,481,4],[490,8,481,8,"isDynamic"],[490,17,481,17],[490,20,481,20],[490,25,481,25],[491,4,482,4],[491,8,482,10,"isIndex"],[491,15,482,17],[491,18,482,20,"screen"],[491,24,482,26],[491,29,482,31],[491,36,482,38],[491,40,482,42,"screen"],[491,46,482,48],[491,47,482,49,"endsWith"],[491,55,482,57],[491,56,482,58],[491,64,482,66],[491,65,482,67],[492,4,483,4],[492,9,483,9],[492,13,483,15,"part"],[492,17,483,19],[492,21,483,23,"pattern"],[492,28,483,30],[492,29,483,31,"split"],[492,34,483,36],[492,35,483,37],[492,38,483,40],[492,39,483,41],[492,41,483,43],[493,6,484,8],[493,10,484,12,"part"],[493,14,484,16],[493,16,484,18],[494,8,485,12,"patternParts"],[494,20,485,24],[494,21,485,25,"push"],[494,25,485,29],[494,26,485,30,"part"],[494,30,485,34],[494,31,485,35],[495,8,486,12],[496,8,487,12,"isDynamic"],[496,17,487,21],[496,22,487,26,"part"],[496,26,487,30],[496,27,487,31,"startsWith"],[496,37,487,41],[496,38,487,42],[496,41,487,45],[496,42,487,46],[496,46,487,50,"part"],[496,50,487,54],[496,51,487,55,"startsWith"],[496,61,487,65],[496,62,487,66],[496,65,487,69],[496,66,487,70],[496,70,487,74,"part"],[496,74,487,78],[496,75,487,79,"includes"],[496,83,487,87],[496,84,487,88],[496,96,487,100],[496,97,487,101],[497,8,488,12],[497,12,488,16],[497,13,488,17],[497,14,488,18],[497,15,488,19],[497,17,488,21,"matchers_1"],[497,27,488,31],[497,28,488,32,"matchGroupName"],[497,42,488,46],[497,44,488,48,"part"],[497,48,488,52],[497,49,488,53],[497,51,488,55],[498,10,489,16,"parts"],[498,15,489,21],[498,16,489,22,"push"],[498,20,489,26],[498,21,489,27,"part"],[498,25,489,31],[498,26,489,32],[499,8,490,12],[500,6,491,8],[501,4,492,4],[502,4,493,4,"pattern"],[502,11,493,11],[502,14,493,14,"patternParts"],[502,26,493,26],[502,27,493,27,"join"],[502,31,493,31],[502,32,493,32],[502,35,493,35],[502,36,493,36],[503,4,494,4],[503,8,494,8,"isIndex"],[503,15,494,15],[503,17,494,17],[504,6,495,8,"parts"],[504,11,495,13],[504,12,495,14,"push"],[504,16,495,18],[504,17,495,19],[504,24,495,26],[504,25,495,27],[505,4,496,4],[506,4,497,4],[506,8,497,10,"type"],[506,12,497,14],[506,15,497,17,"hasChildren"],[506,26,497,28],[506,29,497,31],[506,37,497,39],[506,40,497,42,"isDynamic"],[506,49,497,51],[506,52,497,54],[506,61,497,63],[506,64,497,66],[506,72,497,74],[507,4,498,4],[507,8,498,10,"regex"],[507,13,498,15],[507,16,498,18,"pattern"],[507,23,498,25],[507,26,499,10],[507,30,499,14,"RegExp"],[507,36,499,20],[507,37,499,21],[507,42,499,26,"pattern"],[507,49,499,33],[507,50,499,34,"split"],[507,55,499,39],[507,56,499,40],[507,59,499,43],[507,60,499,44],[507,61,499,45,"map"],[507,64,499,48],[507,65,499,49,"formatRegexPattern"],[507,83,499,67],[507,84,499,68],[507,85,499,69,"join"],[507,89,499,73],[507,90,499,74],[507,92,499,76],[507,93,499,77],[507,97,499,81],[507,98,499,82],[507,101,500,10,"undefined"],[507,110,500,19],[508,4,501,4],[508,11,501,11],[509,6,502,8,"screen"],[509,12,502,14],[510,6,503,8,"regex"],[510,11,503,13],[511,6,504,8,"pattern"],[511,13,504,15],[512,6,505,8,"path"],[512,10,505,12],[513,6,506,8],[514,6,507,8,"routeNames"],[514,16,507,18],[514,18,507,20],[514,19,507,21],[514,22,507,24,"routeNames"],[514,32,507,34],[514,33,507,35],[515,6,508,8,"expandedRouteNames"],[515,24,508,26],[515,26,508,28,"routeNames"],[515,36,508,38],[515,37,508,39,"flatMap"],[515,44,508,46],[515,45,508,48,"name"],[515,49,508,52],[515,53,508,57],[516,8,509,12],[516,15,509,19,"name"],[516,19,509,23],[516,20,509,24,"split"],[516,25,509,29],[516,26,509,30],[516,29,509,33],[516,30,509,34],[517,6,510,8],[517,7,510,9],[517,8,510,10],[518,6,511,8,"parse"],[518,11,511,13],[519,6,512,8,"userReadableName"],[519,22,512,24],[519,24,512,26],[519,25,512,27],[519,28,512,30,"routeNames"],[519,38,512,40],[519,39,512,41,"slice"],[519,44,512,46],[519,45,512,47],[519,46,512,48],[519,48,512,50],[519,49,512,51],[519,50,512,52],[519,51,512,53],[519,53,512,55,"path"],[519,57,512,59],[519,61,512,63,"screen"],[519,67,512,69],[519,68,512,70],[519,69,512,71,"join"],[519,73,512,75],[519,74,512,76],[519,77,512,79],[519,78,512,80],[520,6,513,8,"hasChildren"],[520,17,513,19],[520,19,513,21],[520,20,513,22],[520,21,513,23,"hasChildren"],[520,32,513,34],[521,6,514,8,"_route"],[521,12,514,14],[522,6,515,8,"type"],[522,10,515,12],[523,6,516,8,"isIndex"],[523,13,516,15],[524,6,517,8,"parts"],[525,4,518,4],[525,5,518,5],[526,2,519,0],[526,3,519,1],[527,2,520,0],[527,6,520,6,"findParseConfigForRoute"],[527,29,520,29],[527,32,520,32,"findParseConfigForRoute"],[527,33,520,33,"routeName"],[527,42,520,42],[527,44,520,44,"routeConfigs"],[527,56,520,56],[527,61,520,61],[528,4,521,4],[528,9,521,9],[528,13,521,15,"config"],[528,19,521,21],[528,23,521,25,"routeConfigs"],[528,35,521,37],[528,37,521,39],[529,6,522,8],[529,10,522,12,"routeName"],[529,19,522,21],[529,24,522,26,"config"],[529,30,522,32],[529,31,522,33,"routeNames"],[529,41,522,43],[529,42,522,44,"config"],[529,48,522,50],[529,49,522,51,"routeNames"],[529,59,522,61],[529,60,522,62,"length"],[529,66,522,68],[529,69,522,71],[529,70,522,72],[529,71,522,73],[529,73,522,75],[530,8,523,12],[530,15,523,19,"config"],[530,21,523,25],[530,22,523,26,"parse"],[530,27,523,31],[531,6,524,8],[532,4,525,4],[533,4,526,4],[533,11,526,11,"undefined"],[533,20,526,20],[534,2,527,0],[534,3,527,1],[535,2,528,0],[536,2,529,0],[536,6,529,6,"findInitialRoute"],[536,22,529,22],[536,25,529,25,"findInitialRoute"],[536,26,529,26,"routeName"],[536,35,529,35],[536,37,529,37,"parentScreens"],[536,50,529,50],[536,52,529,52,"initialRoutes"],[536,65,529,65],[536,70,529,70],[537,4,530,4],[537,9,530,9],[537,13,530,15,"config"],[537,19,530,21],[537,23,530,25,"initialRoutes"],[537,36,530,38],[537,38,530,40],[538,6,531,8],[538,10,531,12,"equalHeritage"],[538,23,531,25],[538,24,531,26,"parentScreens"],[538,37,531,39],[538,39,531,41,"config"],[538,45,531,47],[538,46,531,48,"parentScreens"],[538,59,531,61],[538,60,531,62],[538,62,531,64],[539,8,532,12],[540,8,533,12],[541,8,534,12],[541,15,534,19,"routeName"],[541,24,534,28],[541,29,534,33,"config"],[541,35,534,39],[541,36,534,40,"initialRouteName"],[541,52,534,56],[541,55,534,59,"config"],[541,61,534,65],[541,62,534,66,"initialRouteName"],[541,78,534,82],[541,81,534,85,"undefined"],[541,90,534,94],[542,6,535,8],[543,4,536,4],[544,4,537,4],[544,11,537,11,"undefined"],[544,20,537,20],[545,2,538,0],[545,3,538,1],[546,2,539,0],[547,2,540,0],[548,2,541,0],[548,6,541,6,"createStateObject"],[548,23,541,23],[548,26,541,26,"createStateObject"],[548,27,541,27,"route"],[548,32,541,32],[548,34,541,34,"isEmpty"],[548,41,541,41],[548,43,541,43,"initialRoute"],[548,55,541,55],[548,60,541,60],[549,4,542,4],[549,8,542,8,"isEmpty"],[549,15,542,15],[549,17,542,17],[550,6,543,8],[550,10,543,12,"initialRoute"],[550,22,543,24],[550,24,543,26],[551,8,544,12],[551,15,544,19],[552,10,545,16,"index"],[552,15,545,21],[552,17,545,23],[552,18,545,24],[553,10,546,16,"routes"],[553,16,546,22],[553,18,546,24],[553,19,546,25],[554,12,546,27,"name"],[554,16,546,31],[554,18,546,33,"initialRoute"],[554,30,546,45],[555,12,546,47,"params"],[555,18,546,53],[555,20,546,55,"route"],[555,25,546,60],[555,26,546,61,"params"],[556,10,546,68],[556,11,546,69],[556,13,546,71,"route"],[556,18,546,76],[557,8,547,12],[557,9,547,13],[558,6,548,8],[559,6,549,8],[559,13,549,15],[560,8,550,12,"routes"],[560,14,550,18],[560,16,550,20],[560,17,550,21,"route"],[560,22,550,26],[561,6,551,8],[561,7,551,9],[562,4,552,4],[563,4,553,4],[563,8,553,8,"initialRoute"],[563,20,553,20],[563,22,553,22],[564,6,554,8],[564,13,554,15],[565,8,555,12,"index"],[565,13,555,17],[565,15,555,19],[565,16,555,20],[566,8,556,12,"routes"],[566,14,556,18],[566,16,556,20],[566,17,557,16],[567,10,557,18,"name"],[567,14,557,22],[567,16,557,24,"initialRoute"],[567,28,557,36],[568,10,557,38,"params"],[568,16,557,44],[568,18,557,46,"route"],[568,23,557,51],[568,24,557,52,"params"],[569,8,557,59],[569,9,557,60],[569,11,558,16],[570,10,558,18],[570,13,558,21,"route"],[570,18,558,26],[571,10,558,28,"state"],[571,15,558,33],[571,17,558,35],[572,12,558,37,"routes"],[572,18,558,43],[572,20,558,45],[573,10,558,48],[574,8,558,50],[574,9,558,51],[575,6,560,8],[575,7,560,9],[576,4,561,4],[577,4,562,4],[577,11,562,11],[578,6,563,8,"routes"],[578,12,563,14],[578,14,563,16],[578,15,563,17],[579,8,563,19],[579,11,563,22,"route"],[579,16,563,27],[580,8,563,29,"state"],[580,13,563,34],[580,15,563,36],[581,10,563,38,"routes"],[581,16,563,44],[581,18,563,46],[582,8,563,49],[583,6,563,51],[583,7,563,52],[584,4,564,4],[584,5,564,5],[585,2,565,0],[585,3,565,1],[586,2,566,0],[586,6,566,6,"createNestedStateObject"],[586,29,566,29],[586,32,566,32,"createNestedStateObject"],[586,33,566,33,"path"],[586,37,566,37],[586,39,566,39,"hash"],[586,43,566,43],[586,45,566,45,"routes"],[586,51,566,51],[586,53,566,53,"routeConfigs"],[586,65,566,65],[586,67,566,67,"initialRoutes"],[586,80,566,80],[586,85,566,85],[587,4,567,4],[587,8,567,8,"route"],[587,13,567,13],[587,16,567,16,"routes"],[587,22,567,22],[587,23,567,23,"shift"],[587,28,567,28],[587,29,567,29],[587,30,567,30],[588,4,568,4],[588,8,568,10,"parentScreens"],[588,21,568,23],[588,24,568,26],[588,26,568,28],[589,4,569,4],[589,8,569,8,"initialRoute"],[589,20,569,20],[589,23,569,23,"findInitialRoute"],[589,39,569,39],[589,40,569,40,"route"],[589,45,569,45],[589,46,569,46,"name"],[589,50,569,50],[589,52,569,52,"parentScreens"],[589,65,569,65],[589,67,569,67,"initialRoutes"],[589,80,569,80],[589,81,569,81],[590,4,570,4,"parentScreens"],[590,17,570,17],[590,18,570,18,"push"],[590,22,570,22],[590,23,570,23,"route"],[590,28,570,28],[590,29,570,29,"name"],[590,33,570,33],[590,34,570,34],[591,4,571,4],[591,8,571,10,"state"],[591,13,571,15],[591,16,571,18,"createStateObject"],[591,33,571,35],[591,34,571,36,"route"],[591,39,571,41],[591,41,571,43,"routes"],[591,47,571,49],[591,48,571,50,"length"],[591,54,571,56],[591,59,571,61],[591,60,571,62],[591,62,571,64,"initialRoute"],[591,74,571,76],[591,75,571,77],[592,4,572,4],[592,8,572,8,"routes"],[592,14,572,14],[592,15,572,15,"length"],[592,21,572,21],[592,24,572,24],[592,25,572,25],[592,27,572,27],[593,6,573,8],[593,10,573,12,"nestedState"],[593,21,573,23],[593,24,573,26,"state"],[593,29,573,31],[594,6,574,8],[594,13,574,16,"route"],[594,18,574,21],[594,21,574,24,"routes"],[594,27,574,30],[594,28,574,31,"shift"],[594,33,574,36],[594,34,574,37],[594,35,574,38],[594,37,574,41],[595,8,575,12,"initialRoute"],[595,20,575,24],[595,23,575,27,"findInitialRoute"],[595,39,575,43],[595,40,575,44,"route"],[595,45,575,49],[595,46,575,50,"name"],[595,50,575,54],[595,52,575,56,"parentScreens"],[595,65,575,69],[595,67,575,71,"initialRoutes"],[595,80,575,84],[595,81,575,85],[596,8,576,12],[596,12,576,18,"nestedStateIndex"],[596,28,576,34],[596,31,576,37,"nestedState"],[596,42,576,48],[596,43,576,49,"index"],[596,48,576,54],[596,52,576,58,"nestedState"],[596,63,576,69],[596,64,576,70,"routes"],[596,70,576,76],[596,71,576,77,"length"],[596,77,576,83],[596,80,576,86],[596,81,576,87],[597,8,577,12,"nestedState"],[597,19,577,23],[597,20,577,24,"routes"],[597,26,577,30],[597,27,577,31,"nestedStateIndex"],[597,43,577,47],[597,44,577,48],[597,45,577,49,"state"],[597,50,577,54],[597,53,577,57,"createStateObject"],[597,70,577,74],[597,71,577,75,"route"],[597,76,577,80],[597,78,577,82,"routes"],[597,84,577,88],[597,85,577,89,"length"],[597,91,577,95],[597,96,577,100],[597,97,577,101],[597,99,577,103,"initialRoute"],[597,111,577,115],[597,112,577,116],[598,8,578,12],[598,12,578,16,"routes"],[598,18,578,22],[598,19,578,23,"length"],[598,25,578,29],[598,28,578,32],[598,29,578,33],[598,31,578,35],[599,10,579,16,"nestedState"],[599,21,579,27],[599,24,579,30,"nestedState"],[599,35,579,41],[599,36,579,42,"routes"],[599,42,579,48],[599,43,579,49,"nestedStateIndex"],[599,59,579,65],[599,60,579,66],[599,61,579,67,"state"],[599,66,579,72],[600,8,580,12],[601,8,581,12,"parentScreens"],[601,21,581,25],[601,22,581,26,"push"],[601,26,581,30],[601,27,581,31,"route"],[601,32,581,36],[601,33,581,37,"name"],[601,37,581,41],[601,38,581,42],[602,6,582,8],[603,4,583,4],[604,4,584,4,"route"],[604,9,584,9],[604,12,584,12],[604,13,584,13],[604,14,584,14],[604,16,584,16,"findFocusedRoute_1"],[604,34,584,34],[604,35,584,35,"findFocusedRoute"],[604,51,584,51],[604,53,584,53,"state"],[604,58,584,58],[604,59,584,59],[605,4,585,4],[606,4,586,4,"route"],[606,9,586,9],[606,10,586,10,"path"],[606,14,586,14],[606,17,586,17,"path"],[606,21,586,21],[607,4,587,4],[607,8,587,10,"params"],[607,14,587,16],[607,17,587,19,"parseQueryParams"],[607,33,587,35],[607,34,587,36,"route"],[607,39,587,41],[607,40,587,42,"path"],[607,44,587,46],[607,46,587,48,"findParseConfigForRoute"],[607,69,587,71],[607,70,587,72,"route"],[607,75,587,77],[607,76,587,78,"name"],[607,80,587,82],[607,82,587,84,"routeConfigs"],[607,94,587,96],[607,95,587,97],[607,96,587,98],[608,4,588,4],[608,8,588,8,"params"],[608,14,588,14],[608,16,588,16],[609,6,589,8,"route"],[609,11,589,13],[609,12,589,14,"params"],[609,18,589,20],[609,21,589,23,"Object"],[609,27,589,29],[609,28,589,30,"assign"],[609,34,589,36],[609,35,589,37,"Object"],[609,41,589,43],[609,42,589,44,"create"],[609,48,589,50],[609,49,589,51],[609,53,589,55],[609,54,589,56],[609,56,589,58,"route"],[609,61,589,63],[609,62,589,64,"params"],[609,68,589,70],[609,69,589,71],[610,6,590,8],[610,15,590,8,"_ref"],[610,19,590,8],[610,23,590,36,"Object"],[610,29,590,42],[610,30,590,43,"entries"],[610,37,590,50],[610,38,590,51,"params"],[610,44,590,57],[610,45,590,58],[610,47,590,60],[611,8,590,60],[611,12,590,60,"_ref2"],[611,17,590,60],[611,20,590,60,"_slicedToArray"],[611,34,590,60],[611,35,590,60,"_ref"],[611,39,590,60],[612,8,590,60],[612,12,590,20,"name"],[612,16,590,24],[612,19,590,24,"_ref2"],[612,24,590,24],[613,8,590,24],[613,12,590,26,"value"],[613,17,590,31],[613,20,590,31,"_ref2"],[613,25,590,31],[614,8,591,12],[614,12,591,16,"route"],[614,17,591,21],[614,18,591,22,"params"],[614,24,591,28],[614,27,591,31,"name"],[614,31,591,35],[614,32,591,36],[614,34,591,38],[615,10,592,16],[615,14,592,20,"process"],[615,21,592,27],[615,22,592,28,"env"],[615,25,592,31],[615,26,592,32,"NODE_ENV"],[615,34,592,40],[615,39,592,45],[615,51,592,57],[615,53,592,59],[616,12,593,20,"console"],[616,19,593,27],[616,20,593,28,"warn"],[616,24,593,32],[616,25,593,33],[616,36,593,44,"route"],[616,41,593,49],[616,42,593,50,"name"],[616,46,593,54],[616,63,593,71,"name"],[616,67,593,75],[616,136,593,144],[616,137,593,145],[617,10,594,16],[618,8,595,12],[619,8,596,12],[619,12,596,16],[619,13,596,17,"route"],[619,18,596,22],[619,19,596,23,"params"],[619,25,596,29],[619,28,596,32,"name"],[619,32,596,36],[619,33,596,37],[619,35,596,39],[620,10,597,16,"route"],[620,15,597,21],[620,16,597,22,"params"],[620,22,597,28],[620,23,597,29,"name"],[620,27,597,33],[620,28,597,34],[620,31,597,37,"value"],[620,36,597,42],[621,10,598,16],[622,8,599,12],[623,6,600,8],[624,6,601,8],[624,10,601,12,"Object"],[624,16,601,18],[624,17,601,19,"keys"],[624,21,601,23],[624,22,601,24,"route"],[624,27,601,29],[624,28,601,30,"params"],[624,34,601,36],[624,35,601,37],[624,36,601,38,"length"],[624,42,601,44],[624,47,601,49],[624,48,601,50],[624,50,601,52],[625,8,602,12],[625,15,602,19,"route"],[625,20,602,24],[625,21,602,25,"params"],[625,27,602,31],[626,6,603,8],[627,4,604,4],[628,4,605,4],[628,8,605,8,"hash"],[628,12,605,12],[628,14,605,14],[629,6,606,8,"route"],[629,11,606,13],[629,12,606,14,"params"],[629,18,606,20],[629,21,606,23,"Object"],[629,27,606,29],[629,28,606,30,"assign"],[629,34,606,36],[629,35,606,37,"Object"],[629,41,606,43],[629,42,606,44,"create"],[629,48,606,50],[629,49,606,51],[629,53,606,55],[629,54,606,56],[629,56,606,58,"route"],[629,61,606,63],[629,62,606,64,"params"],[629,68,606,70],[629,69,606,71],[630,6,607,8,"route"],[630,11,607,13],[630,12,607,14,"params"],[630,18,607,20],[630,19,607,21],[630,22,607,24],[630,23,607,25],[630,26,607,28,"hash"],[630,30,607,32],[631,4,608,4],[632,4,609,4],[632,11,609,11,"state"],[632,16,609,16],[633,2,610,0],[633,3,610,1],[634,2,611,0],[634,6,611,6,"parseQueryParams"],[634,22,611,22],[634,25,611,25,"parseQueryParams"],[634,26,611,26,"path"],[634,30,611,30],[634,32,611,32,"parseConfig"],[634,43,611,43],[634,48,611,48],[635,4,612,4],[635,8,612,10,"query"],[635,13,612,15],[635,16,612,18,"path"],[635,20,612,22],[635,21,612,23,"split"],[635,26,612,28],[635,27,612,29],[635,30,612,32],[635,31,612,33],[635,32,612,34],[635,33,612,35],[635,34,612,36],[636,4,613,4],[636,8,613,10,"searchParams"],[636,20,613,22],[636,23,613,25],[636,27,613,29,"URLSearchParams"],[636,42,613,44],[636,43,613,45,"query"],[636,48,613,50],[636,49,613,51],[637,4,614,4],[637,8,614,10,"params"],[637,14,614,16],[637,17,614,19,"Object"],[637,23,614,25],[637,24,614,26,"create"],[637,30,614,32],[637,31,614,33],[637,35,614,37],[637,36,614,38],[638,4,614,39],[638,8,614,39,"_loop2"],[638,14,614,39],[638,26,614,39,"_loop2"],[638,27,614,39,"name"],[638,31,614,39],[638,33,615,44],[639,6,616,8],[639,10,616,14,"values"],[639,16,616,20],[639,19,616,23,"parseConfig"],[639,30,616,34],[639,32,616,36,"hasOwnProperty"],[639,46,616,50],[639,47,616,51,"name"],[639,51,616,55],[639,52,616,56],[639,55,617,14,"searchParams"],[639,67,617,26],[639,68,617,27,"getAll"],[639,74,617,33],[639,75,617,34,"name"],[639,79,617,38],[639,80,617,39],[639,81,617,40,"map"],[639,84,617,43],[639,85,617,45,"value"],[639,90,617,50],[639,94,617,55,"parseConfig"],[639,105,617,66],[639,106,617,67,"name"],[639,110,617,71],[639,111,617,72],[639,112,617,73,"value"],[639,117,617,78],[639,118,617,79],[639,119,617,80],[639,122,618,14,"searchParams"],[639,134,618,26],[639,135,618,27,"getAll"],[639,141,618,33],[639,142,618,34,"name"],[639,146,618,38],[639,147,618,39],[640,6,619,8],[641,6,620,8],[642,6,621,8,"params"],[642,12,621,14],[642,13,621,15,"name"],[642,17,621,19],[642,18,621,20],[642,21,621,23,"values"],[642,27,621,29],[642,28,621,30,"length"],[642,34,621,36],[642,39,621,41],[642,40,621,42],[642,43,621,45,"values"],[642,49,621,51],[642,50,621,52],[642,51,621,53],[642,52,621,54],[642,55,621,57,"values"],[642,61,621,63],[643,4,622,4],[643,5,622,5],[644,4,615,4],[644,9,615,9],[644,13,615,15,"name"],[644,17,615,19],[644,21,615,23,"searchParams"],[644,33,615,35],[644,34,615,36,"keys"],[644,38,615,40],[644,39,615,41],[644,40,615,42],[645,6,615,42,"_loop2"],[645,12,615,42],[645,13,615,42,"name"],[645,17,615,42],[646,4,615,42],[647,4,623,4],[647,11,623,11,"Object"],[647,17,623,17],[647,18,623,18,"keys"],[647,22,623,22],[647,23,623,23,"params"],[647,29,623,29],[647,30,623,30],[647,31,623,31,"length"],[647,37,623,37],[647,40,623,40,"params"],[647,46,623,46],[647,49,623,49,"undefined"],[647,58,623,58],[648,2,624,0],[648,3,624,1],[649,2,625,0],[649,6,625,6,"baseUrlCache"],[649,18,625,18],[649,21,625,21],[649,25,625,25,"Map"],[649,28,625,28],[649,29,625,29],[649,30,625,30],[650,2,626,0],[650,11,626,9,"getBaseUrlRegex"],[650,26,626,24,"getBaseUrlRegex"],[650,27,626,25,"baseUrl"],[650,34,626,32],[650,36,626,34],[651,4,627,4],[651,8,627,8,"baseUrlCache"],[651,20,627,20],[651,21,627,21,"has"],[651,24,627,24],[651,25,627,25,"baseUrl"],[651,32,627,32],[651,33,627,33],[651,35,627,35],[652,6,628,8],[652,13,628,15,"baseUrlCache"],[652,25,628,27],[652,26,628,28,"get"],[652,29,628,31],[652,30,628,32,"baseUrl"],[652,37,628,39],[652,38,628,40],[653,4,629,4],[654,4,630,4],[654,8,630,10,"regex"],[654,13,630,15],[654,16,630,18],[654,20,630,22,"RegExp"],[654,26,630,28],[654,27,630,29],[654,35,630,37],[654,36,630,38],[654,37,630,39],[654,39,630,41,"escape_string_regexp_1"],[654,61,630,63],[654,62,630,64,"default"],[654,69,630,71],[654,71,630,73,"baseUrl"],[654,78,630,80],[654,79,630,81],[654,81,630,83],[654,83,630,85],[654,86,630,88],[654,87,630,89],[655,4,631,4,"baseUrlCache"],[655,16,631,16],[655,17,631,17,"set"],[655,20,631,20],[655,21,631,21,"baseUrl"],[655,28,631,28],[655,30,631,30,"regex"],[655,35,631,35],[655,36,631,36],[656,4,632,4],[656,11,632,11,"regex"],[656,16,632,16],[657,2,633,0],[658,2,634,0],[658,11,634,9,"stripBaseUrl"],[658,23,634,21,"stripBaseUrl"],[658,24,634,22,"path"],[658,28,634,26],[658,30,634,65],[659,4,634,65],[659,8,634,28,"baseUrl"],[659,15,634,35],[659,18,634,35,"arguments"],[659,27,634,35],[659,28,634,35,"length"],[659,34,634,35],[659,42,634,35,"arguments"],[659,51,634,35],[659,59,634,35,"undefined"],[659,68,634,35],[659,71,634,35,"arguments"],[659,80,634,35],[660,4,635,4],[660,8,635,8,"process"],[660,15,635,15],[660,16,635,16,"env"],[660,19,635,19],[660,20,635,20,"NODE_ENV"],[660,28,635,28],[660,33,635,33],[660,46,635,46],[660,48,635,48],[661,6,636,8],[661,10,636,12,"baseUrl"],[661,17,636,19],[661,19,636,21],[662,8,637,12],[662,12,637,18,"reg"],[662,15,637,21],[662,18,637,24,"getBaseUrlRegex"],[662,33,637,39],[662,34,637,40,"baseUrl"],[662,41,637,47],[662,42,637,48],[663,8,638,12],[663,15,638,19,"path"],[663,19,638,23],[663,20,638,24,"replace"],[663,27,638,31],[663,28,638,32],[663,35,638,39],[663,37,638,41],[663,40,638,44],[663,41,638,45],[663,42,638,46,"replace"],[663,49,638,53],[663,50,638,54,"reg"],[663,53,638,57],[663,55,638,59],[663,57,638,61],[663,58,638,62],[664,6,639,8],[665,4,640,4],[666,4,641,4],[666,11,641,11,"path"],[666,15,641,15],[667,2,642,0],[668,2,643,0,"exports"],[668,9,643,7],[668,10,643,8,"stripBaseUrl"],[668,22,643,20],[668,25,643,23,"stripBaseUrl"],[668,37,643,35],[669,0,643,36],[669,3]],"functionMap":{"names":["<global>","<anonymous>","getUrlWithReactNavigationConcessions","getStateFromPath","getMatchableRouteConfigs","Object.keys.map$argument_0","initialRoutes.map$argument_0","converted.map$argument_0","convertedWithInitial.sort$argument_0","assertConfigDuplicates","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","sortConfigs","previousSegments.filter$argument_0","getStateFromEmptyPathWithConfigs","configs.filter$argument_0","configs.filter.map$argument_0","leafNodes.find$argument_0","match.routeNames.map$argument_0","getStateFromPathWithConfigs","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.filter$argument_0","config.pattern.split.filter.reduce$argument_0","routeFromName","configs.find$argument_0","segments.filter$argument_0","segments.filter.forEach$argument_0","config.routeNames.map$argument_0","routes.reduce$argument_0","routes.map$argument_0","equalHeritage","createNormalizedConfigs","Object.keys.forEach$argument_0","formatRegexPattern","createConfigItem","routeNames.flatMap$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams","searchParams.getAll.map$argument_0","getBaseUrlRegex","stripBaseUrl"],"mappings":"AAA;wDCC;CDE;AEO;CFoB;AGuB;CHG;AIE;aCmB,iED;sDEE,oEF;+CGC;MHK;8CIE,6CJ;CJI;ASE;mBCE;6DCU,sBD,YE,sBF;KDkB;CTC;AaC;uDCwC;KDE;uDCC;KDE;Cb2F;AeC;gBCK,+BD;aEC;KFO;iCGC;kEHE;uBGC;4DHE;uBGG,iEH;wCII;KJQ;CfE;AoBC;CpBmB;kBqBC;yBCC,mBD;crBE;AuBC;oBCgB,uBD;oBEC;SFY;8BGC;wCCC,wBD;wBEO,uBF;yBGC;aHU;SHK;uCOC;SPQ;6CQE,wCR;4BSG;STK;CvBK;AiCC;CjCU;gCkCC;gDCmC;aDG;ClCK;AoCC;CpCkB;yBqCC;+CC+B;SDE;CrCS;gCuCC;CvCO;yBwCE;CxCS;0ByCG;CzCwB;gC0CC;C1C4C;yB2CC;4CCM,mCD;C3CO;A6CE;C7CO;A8CC;C9CQ"}},"type":"js/module"}]}