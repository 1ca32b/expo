{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":495,"column":44,"index":19768}}],"key":"l9ek7s8G7hY7pJY4P1vxwsk0NPM="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":495,"column":44,"index":19768}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"../matchers","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":19,"index":202},"end":{"line":4,"column":41,"index":224}}],"key":"os5DbCgiuAv5SMhHGnNjYziGTYQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _objectWithoutProperties = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutProperties\");\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\");\n  var _excluded = [\"preserveGroups\", \"preserveDynamicRoutes\"];\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.appendBaseUrl = exports.decodeParams = exports.deepEqual = exports.getPathDataFromState = void 0;\n  var matchers_1 = _$$_REQUIRE(_dependencyMap[2], \"../matchers\");\n  var DEFAULT_SCREENS = {};\n  var getActiveRoute = state => {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    if (route && isInvalidParams(route.params)) {\n      return getActiveRoute(createFakeState(route.params));\n    }\n    return route;\n  };\n  function createFakeState(params) {\n    return {\n      stale: false,\n      type: 'UNKNOWN',\n      key: 'UNKNOWN',\n      index: 0,\n      routeNames: [],\n      routes: [{\n        key: 'UNKNOWN',\n        name: params.screen,\n        params: params.params,\n        path: params.path\n      }]\n    };\n  }\n  function segmentMatchesConvention(segment) {\n    return segment === 'index' || (0, matchers_1.matchDynamicName)(segment) != null || (0, matchers_1.matchGroupName)(segment) != null || (0, matchers_1.matchDeepDynamicRouteName)(segment) != null;\n  }\n  function encodeURIComponentPreservingBrackets(str) {\n    return encodeURIComponent(str).replace(/%5B/g, '[').replace(/%5D/g, ']');\n  }\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, _options) {\n    return getPathDataFromState(state, _options).path;\n  }\n  exports.default = getPathFromState;\n  var formatToList = items => items.map(key => `- ${key}`).join('\\n');\n  function validatePathConfig(config) {\n    var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var validKeys = ['initialRouteName', 'screens'];\n    if (!root) {\n      validKeys.push('path', 'exact', 'stringify', 'parse');\n    }\n    var invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n    if (invalidKeys.length) {\n      throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n    }\n    if (config.screens) {\n      Object.entries(config.screens).forEach(_ref => {\n        var _ref2 = _slicedToArray(_ref, 2),\n          _ = _ref2[0],\n          value = _ref2[1];\n        if (typeof value !== 'string') {\n          validatePathConfig(value, false);\n        }\n      });\n    }\n  }\n  function getPathDataFromState(state) {\n    var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      screens: DEFAULT_SCREENS\n    };\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    var preserveGroups = _options.preserveGroups,\n      preserveDynamicRoutes = _options.preserveDynamicRoutes,\n      options = _objectWithoutProperties(_options, _excluded);\n    validatePathConfig(options);\n    // Expo Router disallows usage without a linking config.\n    if (Object.is(options.screens, DEFAULT_SCREENS)) {\n      throw Error(\"You must pass a 'screens' object to 'getPathFromState' to generate a path.\");\n    }\n    return getPathFromResolvedState(JSON.parse(JSON.stringify(state)),\n    // Create a normalized configs object which will be easier to use\n    createNormalizedConfigs(options.screens), {\n      preserveGroups,\n      preserveDynamicRoutes\n    });\n  }\n  exports.getPathDataFromState = getPathDataFromState;\n  function processParamsWithUserSettings(configItem, params) {\n    var stringify = configItem?.stringify;\n    return Object.fromEntries(Object.entries(params).map(_ref3 => {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      if (key === 'params') {\n        return [key, value];\n      }\n      return [key,\n      // TODO: Strip nullish values here.\n      stringify?.[key] ? stringify[key](value) :\n      // Preserve rest params\n      Array.isArray(value) ? value : String(value)];\n    }));\n  }\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n    if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (var i = 0; i < a.length; i++) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (typeof a === 'object' && typeof b === 'object') {\n      var keysA = Object.keys(a);\n      var keysB = Object.keys(b);\n      if (keysA.length !== keysB.length) {\n        return false;\n      }\n      for (var key of keysA) {\n        if (!deepEqual(a[key], b[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  exports.deepEqual = deepEqual;\n  function walkConfigItems(route, focusedRoute, configs, _ref5) {\n    var preserveDynamicRoutes = _ref5.preserveDynamicRoutes;\n    // NOTE(EvanBacon): Fill in current route using state that was passed as params.\n    if (!route.state && isInvalidParams(route.params)) {\n      route.state = createFakeState(route.params);\n    }\n    var pattern = null;\n    var focusedParams;\n    var hash;\n    var collectedParams = {};\n    while (route.name in configs) {\n      var configItem = configs[route.name];\n      var inputPattern = configItem.pattern;\n      if (inputPattern == null) {\n        // This should never happen in Expo Router.\n        throw new Error('Unexpected: No pattern found for route ' + route.name);\n      }\n      pattern = inputPattern;\n      if (route.params) {\n        if (route.params['#'] !== undefined) {\n          hash = route.params['#'];\n          delete route.params['#'];\n        }\n        var params = processParamsWithUserSettings(configItem, route.params);\n        if (pattern !== undefined && pattern !== null) {\n          Object.assign(collectedParams, params);\n        }\n        if (deepEqual(focusedRoute, route)) {\n          if (preserveDynamicRoutes) {\n            focusedParams = params;\n          } else {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = getParamsWithConventionsCollapsed({\n              params,\n              pattern,\n              routeName: route.name\n            });\n          }\n        }\n      }\n      if (!route.state && isInvalidParams(route.params)) {\n        route.state = createFakeState(route.params);\n      }\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!configItem.screens || route.state === undefined) {\n        if (configItem.initialRouteName && configItem.screens && configItem.initialRouteName in configItem.screens && configItem.screens[configItem.initialRouteName]?.pattern) {\n          var initialRouteConfig = configItem.screens[configItem.initialRouteName];\n          // NOTE(EvanBacon): Big hack to support initial route changes in tab bars.\n          pattern = initialRouteConfig.pattern;\n          if (focusedParams) {\n            if (!preserveDynamicRoutes) {\n              // If this is the focused route, keep the params for later use\n              // We save it here since it's been stringified already\n              focusedParams = getParamsWithConventionsCollapsed({\n                params: focusedParams,\n                pattern,\n                routeName: route.name\n              });\n            }\n          }\n        }\n        break;\n      }\n      var index = route.state.index ?? route.state.routes.length - 1;\n      var nextRoute = route.state.routes[index];\n      var nestedScreens = configItem.screens;\n      // if there is config for next route name, we go deeper\n      if (nestedScreens && nextRoute.name in nestedScreens) {\n        route = nextRoute;\n        configs = nestedScreens;\n      } else {\n        // If not, there is no sense in going deeper in config\n        break;\n      }\n    }\n    if (pattern == null) {\n      throw new Error(`No pattern found for route \"${route.name}\". Options are: ${Object.keys(configs).join(', ')}.`);\n    }\n    if (pattern && !focusedParams && focusedRoute.params) {\n      if (preserveDynamicRoutes) {\n        focusedParams = focusedRoute.params;\n      } else {\n        // If this is the focused route, keep the params for later use\n        // We save it here since it's been stringified already\n        focusedParams = getParamsWithConventionsCollapsed({\n          params: focusedRoute.params,\n          pattern,\n          routeName: route.name\n        });\n      }\n      Object.assign(focusedParams, collectedParams);\n    }\n    return {\n      pattern,\n      nextRoute: route,\n      focusedParams,\n      hash,\n      params: collectedParams\n    };\n  }\n  function getPathFromResolvedState(state, configs, _ref6) {\n    var preserveGroups = _ref6.preserveGroups,\n      preserveDynamicRoutes = _ref6.preserveDynamicRoutes;\n    var path = '';\n    var current = state;\n    var hash;\n    var allParams = {};\n    while (current) {\n      path += '/';\n      // Make mutable copies to ensure we don't leak state outside of the function.\n      var route = current.routes[current.index ?? 0];\n      // NOTE(EvanBacon): Fill in current route using state that was passed as params.\n      // if (isInvalidParams(route.params)) {\n      if (!route.state && isInvalidParams(route.params)) {\n        route.state = createFakeState(route.params);\n      }\n      var _walkConfigItems = walkConfigItems(route, getActiveRoute(current), {\n          ...configs\n        }, {\n          preserveDynamicRoutes\n        }),\n        pattern = _walkConfigItems.pattern,\n        _params = _walkConfigItems.params,\n        nextRoute = _walkConfigItems.nextRoute,\n        focusedParams = _walkConfigItems.focusedParams,\n        $hash = _walkConfigItems.hash;\n      if ($hash) {\n        hash = $hash;\n      }\n      Object.assign(allParams, _params);\n      path += getPathWithConventionsCollapsed({\n        pattern,\n        routePath: nextRoute.path,\n        params: allParams,\n        initialRouteName: configs[nextRoute.name]?.initialRouteName,\n        preserveGroups,\n        preserveDynamicRoutes\n      });\n      if (nextRoute.state &&\n      // NOTE(EvanBacon): The upstream implementation allows for sending in synthetic states (states that weren't generated by `getStateFromPath`)\n      // and any invalid routes will simply be ignored.\n      // Because of this, we need to check if the next route is valid before continuing, otherwise our more strict\n      // implementation will throw an error.\n      configs[nextRoute.state.routes?.[nextRoute.state?.index ?? 0]?.name]) {\n        // Continue looping with the next state if available.\n        current = nextRoute.state;\n      } else {\n        // Finished crawling state.\n        // Check for query params before exiting.\n        if (focusedParams) {\n          for (var param in focusedParams) {\n            // TODO: This is not good. We shouldn't squat strings named \"undefined\".\n            if (focusedParams[param] === 'undefined') {\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete focusedParams[param];\n            }\n          }\n          var _params2 = new URLSearchParams(Object.entries(focusedParams).flatMap(_ref7 => {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              key = _ref8[0],\n              values = _ref8[1];\n            return Array.isArray(values) ? values.map(value => [key, value]) : [[key, values]];\n          }));\n          var query = _params2.toString();\n          if (query) {\n            path += `?${query}`;\n          }\n        }\n        break;\n      }\n    }\n    if (hash) {\n      allParams['#'] = hash;\n      path += `#${hash}`;\n    }\n    var params = decodeParams(allParams);\n    return {\n      path: appendBaseUrl(basicSanitizePath(path)),\n      params\n    };\n  }\n  function decodeParams(params) {\n    var parsed = {};\n    for (var _ref9 of Object.entries(params)) {\n      var _ref10 = _slicedToArray(_ref9, 2);\n      var key = _ref10[0];\n      var value = _ref10[1];\n      try {\n        if (key === 'params' && typeof value === 'object') {\n          parsed[key] = decodeParams(value);\n        } else if (Array.isArray(value)) {\n          parsed[key] = value.map(v => decodeURIComponent(v));\n        } else {\n          parsed[key] = decodeURIComponent(value);\n        }\n      } catch {\n        parsed[key] = value;\n      }\n    }\n    return parsed;\n  }\n  exports.decodeParams = decodeParams;\n  function getPathWithConventionsCollapsed(_ref11) {\n    var pattern = _ref11.pattern,\n      routePath = _ref11.routePath,\n      params = _ref11.params,\n      preserveGroups = _ref11.preserveGroups,\n      preserveDynamicRoutes = _ref11.preserveDynamicRoutes,\n      initialRouteName = _ref11.initialRouteName;\n    var segments = pattern.split('/');\n    return segments.map((p, i) => {\n      var name = getParamName(p);\n      // We don't know what to show for wildcard patterns\n      // Showing the route name seems ok, though whatever we show here will be incorrect\n      // Since the page doesn't actually exist\n      if (p.startsWith('*')) {\n        if (preserveDynamicRoutes) {\n          if (name === 'not-found') {\n            return '+not-found';\n          }\n          return `[...${name}]`;\n        }\n        if (params[name]) {\n          if (Array.isArray(params[name])) {\n            return params[name].join('/');\n          }\n          return params[name];\n        }\n        if (i === 0) {\n          // This can occur when a wildcard matches all routes and the given path was `/`.\n          return routePath;\n        }\n        // remove existing segments from route.path and return it\n        // this is used for nested wildcard routes. Without this, the path would add\n        // all nested segments to the beginning of the wildcard route.\n        return routePath?.split('/').slice(i + 1).join('/');\n      }\n      // If the path has a pattern for a param, put the param in the path\n      if (p.startsWith(':')) {\n        if (preserveDynamicRoutes) {\n          return `[${name}]`;\n        }\n        // Optional params without value assigned in route.params should be ignored\n        return params[name];\n      }\n      if (!preserveGroups && (0, matchers_1.matchGroupName)(p) != null) {\n        // When the last part is a group it could be a shared URL\n        // if the route has an initialRouteName defined, then we should\n        // use that as the component path as we can assume it will be shown.\n        if (segments.length - 1 === i) {\n          if (initialRouteName) {\n            // Return an empty string if the init route is ambiguous.\n            if (segmentMatchesConvention(initialRouteName)) {\n              return '';\n            }\n            return encodeURIComponentPreservingBrackets(initialRouteName);\n          }\n        }\n        return '';\n      }\n      // Preserve dynamic syntax for rehydration\n      return encodeURIComponentPreservingBrackets(p);\n    }).map(v => v ?? '').join('/');\n  }\n  /** Given a set of query params and a pattern with possible conventions, collapse the conventions and return the remaining params. */\n  function getParamsWithConventionsCollapsed(_ref12) {\n    var pattern = _ref12.pattern,\n      routeName = _ref12.routeName,\n      params = _ref12.params;\n    var processedParams = {\n      ...params\n    };\n    // Remove the params present in the pattern since we'll only use the rest for query string\n    var segments = pattern.split('/');\n    // Dynamic Routes\n    segments.filter(segment => segment.startsWith(':')).forEach(segment => {\n      var name = getParamName(segment);\n      delete processedParams[name];\n    });\n    // Deep Dynamic Routes\n    if (segments.some(segment => segment.startsWith('*'))) {\n      // NOTE(EvanBacon): Drop the param name matching the wildcard route name -- this is specific to Expo Router.\n      var name = (0, matchers_1.testNotFound)(routeName) ? 'not-found' : (0, matchers_1.matchDeepDynamicRouteName)(routeName) ?? routeName;\n      delete processedParams[name];\n    }\n    return processedParams;\n  }\n  // Remove multiple as well as trailing slashes\n  function basicSanitizePath(path) {\n    // Remove duplicate slashes like `foo//bar` -> `foo/bar`\n    var simplifiedPath = path.replace(/\\/+/g, '/');\n    if (simplifiedPath.length <= 1) {\n      return simplifiedPath;\n    }\n    // Remove trailing slash like `foo/bar/` -> `foo/bar`\n    return simplifiedPath.replace(/\\/$/, '');\n  }\n  // TODO: Make StackRouter not do this...\n  // Detect if the params came from StackRouter using `params` to pass around internal state.\n  function isInvalidParams(params) {\n    if (!params) {\n      return false;\n    }\n    if ('params' in params && typeof params.params === 'object' && !!params.params) {\n      return true;\n    }\n    return 'initial' in params && typeof params.initial === 'boolean' &&\n    // \"path\" in params &&\n    'screen' in params;\n  }\n  var getParamName = pattern => pattern.replace(/^[:*]/, '').replace(/\\?$/, '');\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var _pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern: _pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    var pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens,\n      initialRouteName: config.initialRouteName\n    };\n  };\n  var createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(_ref13 => {\n    var _ref14 = _slicedToArray(_ref13, 2),\n      name = _ref14[0],\n      c = _ref14[1];\n    return [name, createConfigItem(c, pattern)];\n  }));\n  function appendBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n  exports.appendBaseUrl = appendBaseUrl;\n});","lineCount":526,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_objectWithoutProperties"],[4,30,1,13],[4,33,1,13,"_$$_REQUIRE"],[4,44,1,13],[4,45,1,13,"_dependencyMap"],[4,59,1,13],[5,2,1,13],[5,6,1,13,"_slicedToArray"],[5,20,1,13],[5,23,1,13,"_$$_REQUIRE"],[5,34,1,13],[5,35,1,13,"_dependencyMap"],[5,49,1,13],[6,2,1,13],[6,6,1,13,"_excluded"],[6,15,1,13],[7,2,2,0,"Object"],[7,8,2,6],[7,9,2,7,"defineProperty"],[7,23,2,21],[7,24,2,22,"exports"],[7,31,2,29],[7,33,2,31],[7,45,2,43],[7,47,2,45],[8,4,2,47,"value"],[8,9,2,52],[8,11,2,54],[9,2,2,59],[9,3,2,60],[9,4,2,61],[10,2,3,0,"exports"],[10,9,3,7],[10,10,3,8,"appendBaseUrl"],[10,23,3,21],[10,26,3,24,"exports"],[10,33,3,31],[10,34,3,32,"decodeParams"],[10,46,3,44],[10,49,3,47,"exports"],[10,56,3,54],[10,57,3,55,"deepEqual"],[10,66,3,64],[10,69,3,67,"exports"],[10,76,3,74],[10,77,3,75,"getPathDataFromState"],[10,97,3,95],[10,100,3,98],[10,105,3,103],[10,106,3,104],[11,2,4,0],[11,6,4,6,"matchers_1"],[11,16,4,16],[11,19,4,19,"require"],[11,30,4,26],[11,31,4,26,"_dependencyMap"],[11,45,4,26],[11,63,4,40],[11,64,4,41],[12,2,5,0],[12,6,5,6,"DEFAULT_SCREENS"],[12,21,5,21],[12,24,5,24],[12,25,5,25],[12,26,5,26],[13,2,6,0],[13,6,6,6,"getActiveRoute"],[13,20,6,20],[13,23,6,24,"state"],[13,28,6,29],[13,32,6,34],[14,4,7,4],[14,8,7,10,"route"],[14,13,7,15],[14,16,7,18],[14,23,7,25,"state"],[14,28,7,30],[14,29,7,31,"index"],[14,34,7,36],[14,39,7,41],[14,47,7,49],[14,50,8,10,"state"],[14,55,8,15],[14,56,8,16,"routes"],[14,62,8,22],[14,63,8,23,"state"],[14,68,8,28],[14,69,8,29,"index"],[14,74,8,34],[14,75,8,35],[14,78,9,10,"state"],[14,83,9,15],[14,84,9,16,"routes"],[14,90,9,22],[14,91,9,23,"state"],[14,96,9,28],[14,97,9,29,"routes"],[14,103,9,35],[14,104,9,36,"length"],[14,110,9,42],[14,113,9,45],[14,114,9,46],[14,115,9,47],[15,4,10,4],[15,8,10,8,"route"],[15,13,10,13],[15,14,10,14,"state"],[15,19,10,19],[15,21,10,21],[16,6,11,8],[16,13,11,15,"getActiveRoute"],[16,27,11,29],[16,28,11,30,"route"],[16,33,11,35],[16,34,11,36,"state"],[16,39,11,41],[16,40,11,42],[17,4,12,4],[18,4,13,4],[18,8,13,8,"route"],[18,13,13,13],[18,17,13,17,"isInvalidParams"],[18,32,13,32],[18,33,13,33,"route"],[18,38,13,38],[18,39,13,39,"params"],[18,45,13,45],[18,46,13,46],[18,48,13,48],[19,6,14,8],[19,13,14,15,"getActiveRoute"],[19,27,14,29],[19,28,14,30,"createFakeState"],[19,43,14,45],[19,44,14,46,"route"],[19,49,14,51],[19,50,14,52,"params"],[19,56,14,58],[19,57,14,59],[19,58,14,60],[20,4,15,4],[21,4,16,4],[21,11,16,11,"route"],[21,16,16,16],[22,2,17,0],[22,3,17,1],[23,2,18,0],[23,11,18,9,"createFakeState"],[23,26,18,24,"createFakeState"],[23,27,18,25,"params"],[23,33,18,31],[23,35,18,33],[24,4,19,4],[24,11,19,11],[25,6,20,8,"stale"],[25,11,20,13],[25,13,20,15],[25,18,20,20],[26,6,21,8,"type"],[26,10,21,12],[26,12,21,14],[26,21,21,23],[27,6,22,8,"key"],[27,9,22,11],[27,11,22,13],[27,20,22,22],[28,6,23,8,"index"],[28,11,23,13],[28,13,23,15],[28,14,23,16],[29,6,24,8,"routeNames"],[29,16,24,18],[29,18,24,20],[29,20,24,22],[30,6,25,8,"routes"],[30,12,25,14],[30,14,25,16],[30,15,26,12],[31,8,27,16,"key"],[31,11,27,19],[31,13,27,21],[31,22,27,30],[32,8,28,16,"name"],[32,12,28,20],[32,14,28,22,"params"],[32,20,28,28],[32,21,28,29,"screen"],[32,27,28,35],[33,8,29,16,"params"],[33,14,29,22],[33,16,29,24,"params"],[33,22,29,30],[33,23,29,31,"params"],[33,29,29,37],[34,8,30,16,"path"],[34,12,30,20],[34,14,30,22,"params"],[34,20,30,28],[34,21,30,29,"path"],[35,6,31,12],[35,7,31,13],[36,4,33,4],[36,5,33,5],[37,2,34,0],[38,2,35,0],[38,11,35,9,"segmentMatchesConvention"],[38,35,35,33,"segmentMatchesConvention"],[38,36,35,34,"segment"],[38,43,35,41],[38,45,35,43],[39,4,36,4],[39,11,36,12,"segment"],[39,18,36,19],[39,23,36,24],[39,30,36,31],[39,34,37,8],[39,35,37,9],[39,36,37,10],[39,38,37,12,"matchers_1"],[39,48,37,22],[39,49,37,23,"matchDynamicName"],[39,65,37,39],[39,67,37,41,"segment"],[39,74,37,48],[39,75,37,49],[39,79,37,53],[39,83,37,57],[39,87,38,8],[39,88,38,9],[39,89,38,10],[39,91,38,12,"matchers_1"],[39,101,38,22],[39,102,38,23,"matchGroupName"],[39,116,38,37],[39,118,38,39,"segment"],[39,125,38,46],[39,126,38,47],[39,130,38,51],[39,134,38,55],[39,138,39,8],[39,139,39,9],[39,140,39,10],[39,142,39,12,"matchers_1"],[39,152,39,22],[39,153,39,23,"matchDeepDynamicRouteName"],[39,178,39,48],[39,180,39,50,"segment"],[39,187,39,57],[39,188,39,58],[39,192,39,62],[39,196,39,66],[40,2,40,0],[41,2,41,0],[41,11,41,9,"encodeURIComponentPreservingBrackets"],[41,47,41,45,"encodeURIComponentPreservingBrackets"],[41,48,41,46,"str"],[41,51,41,49],[41,53,41,51],[42,4,42,4],[42,11,42,11,"encodeURIComponent"],[42,29,42,29],[42,30,42,30,"str"],[42,33,42,33],[42,34,42,34],[42,35,42,35,"replace"],[42,42,42,42],[42,43,42,43],[42,49,42,49],[42,51,42,51],[42,54,42,54],[42,55,42,55],[42,56,42,56,"replace"],[42,63,42,63],[42,64,42,64],[42,70,42,70],[42,72,42,72],[42,75,42,75],[42,76,42,76],[43,2,43,0],[44,2,44,0],[45,0,45,0],[46,0,46,0],[47,0,47,0],[48,0,48,0],[49,0,49,0],[50,0,50,0],[51,0,51,0],[52,0,52,0],[53,0,53,0],[54,0,54,0],[55,0,55,0],[56,0,56,0],[57,0,57,0],[58,0,58,0],[59,0,59,0],[60,0,60,0],[61,0,61,0],[62,0,62,0],[63,0,63,0],[64,0,64,0],[65,0,65,0],[66,0,66,0],[67,0,67,0],[68,0,68,0],[69,0,69,0],[70,0,70,0],[71,0,71,0],[72,0,72,0],[73,2,73,0],[73,11,73,9,"getPathFromState"],[73,27,73,25,"getPathFromState"],[73,28,73,26,"state"],[73,33,73,31],[73,35,73,33,"_options"],[73,43,73,41],[73,45,73,43],[74,4,74,4],[74,11,74,11,"getPathDataFromState"],[74,31,74,31],[74,32,74,32,"state"],[74,37,74,37],[74,39,74,39,"_options"],[74,47,74,47],[74,48,74,48],[74,49,74,49,"path"],[74,53,74,53],[75,2,75,0],[76,2,76,0,"exports"],[76,9,76,7],[76,10,76,8,"default"],[76,17,76,15],[76,20,76,18,"getPathFromState"],[76,36,76,34],[77,2,77,0],[77,6,77,6,"formatToList"],[77,18,77,18],[77,21,77,22,"items"],[77,26,77,27],[77,30,77,32,"items"],[77,35,77,37],[77,36,77,38,"map"],[77,39,77,41],[77,40,77,43,"key"],[77,43,77,46],[77,47,77,51],[77,52,77,56,"key"],[77,55,77,59],[77,57,77,61],[77,58,77,62],[77,59,77,63,"join"],[77,63,77,67],[77,64,77,68],[77,68,77,72],[77,69,77,73],[78,2,78,0],[78,11,78,9,"validatePathConfig"],[78,29,78,27,"validatePathConfig"],[78,30,78,28,"config"],[78,36,78,34],[78,38,78,49],[79,4,78,49],[79,8,78,36,"root"],[79,12,78,40],[79,15,78,40,"arguments"],[79,24,78,40],[79,25,78,40,"length"],[79,31,78,40],[79,39,78,40,"arguments"],[79,48,78,40],[79,56,78,40,"undefined"],[79,65,78,40],[79,68,78,40,"arguments"],[79,77,78,40],[79,83,78,43],[79,87,78,47],[80,4,79,4],[80,8,79,10,"validKeys"],[80,17,79,19],[80,20,79,22],[80,21,79,23],[80,39,79,41],[80,41,79,43],[80,50,79,52],[80,51,79,53],[81,4,80,4],[81,8,80,8],[81,9,80,9,"root"],[81,13,80,13],[81,15,80,15],[82,6,81,8,"validKeys"],[82,15,81,17],[82,16,81,18,"push"],[82,20,81,22],[82,21,81,23],[82,27,81,29],[82,29,81,31],[82,36,81,38],[82,38,81,40],[82,49,81,51],[82,51,81,53],[82,58,81,60],[82,59,81,61],[83,4,82,4],[84,4,83,4],[84,8,83,10,"invalidKeys"],[84,19,83,21],[84,22,83,24,"Object"],[84,28,83,30],[84,29,83,31,"keys"],[84,33,83,35],[84,34,83,36,"config"],[84,40,83,42],[84,41,83,43],[84,42,83,44,"filter"],[84,48,83,50],[84,49,83,52,"key"],[84,52,83,55],[84,56,83,60],[84,57,83,61,"validKeys"],[84,66,83,70],[84,67,83,71,"includes"],[84,75,83,79],[84,76,83,80,"key"],[84,79,83,83],[84,80,83,84],[84,81,83,85],[85,4,84,4],[85,8,84,8,"invalidKeys"],[85,19,84,19],[85,20,84,20,"length"],[85,26,84,26],[85,28,84,28],[86,6,85,8],[86,12,85,14],[86,16,85,18,"Error"],[86,21,85,23],[86,22,85,24],[86,73,85,75,"formatToList"],[86,85,85,87],[86,86,85,88,"invalidKeys"],[86,97,85,99],[86,98,85,100],[86,215,85,217,"formatToList"],[86,227,85,229],[86,228,85,230,"validKeys"],[86,237,85,239],[86,238,85,240],[86,358,85,360],[86,359,85,361],[87,4,86,4],[88,4,87,4],[88,8,87,8,"config"],[88,14,87,14],[88,15,87,15,"screens"],[88,22,87,22],[88,24,87,24],[89,6,88,8,"Object"],[89,12,88,14],[89,13,88,15,"entries"],[89,20,88,22],[89,21,88,23,"config"],[89,27,88,29],[89,28,88,30,"screens"],[89,35,88,37],[89,36,88,38],[89,37,88,39,"forEach"],[89,44,88,46],[89,45,88,47,"_ref"],[89,49,88,47],[89,53,88,63],[90,8,88,63],[90,12,88,63,"_ref2"],[90,17,88,63],[90,20,88,63,"_slicedToArray"],[90,34,88,63],[90,35,88,63,"_ref"],[90,39,88,63],[91,10,88,49,"_"],[91,11,88,50],[91,14,88,50,"_ref2"],[91,19,88,50],[92,10,88,52,"value"],[92,15,88,57],[92,18,88,57,"_ref2"],[92,23,88,57],[93,8,89,12],[93,12,89,16],[93,19,89,23,"value"],[93,24,89,28],[93,29,89,33],[93,37,89,41],[93,39,89,43],[94,10,90,16,"validatePathConfig"],[94,28,90,34],[94,29,90,35,"value"],[94,34,90,40],[94,36,90,42],[94,41,90,47],[94,42,90,48],[95,8,91,12],[96,6,92,8],[96,7,92,9],[96,8,92,10],[97,4,93,4],[98,2,94,0],[99,2,95,0],[99,11,95,9,"getPathDataFromState"],[99,31,95,29,"getPathDataFromState"],[99,32,95,30,"state"],[99,37,95,35],[99,39,95,78],[100,4,95,78],[100,8,95,37,"_options"],[100,16,95,45],[100,19,95,45,"arguments"],[100,28,95,45],[100,29,95,45,"length"],[100,35,95,45],[100,43,95,45,"arguments"],[100,52,95,45],[100,60,95,45,"undefined"],[100,69,95,45],[100,72,95,45,"arguments"],[100,81,95,45],[100,87,95,48],[101,6,95,50,"screens"],[101,13,95,57],[101,15,95,59,"DEFAULT_SCREENS"],[102,4,95,75],[102,5,95,76],[103,4,96,4],[103,8,96,8,"state"],[103,13,96,13],[103,17,96,17],[103,21,96,21],[103,23,96,23],[104,6,97,8],[104,12,97,14,"Error"],[104,17,97,19],[104,18,97,20],[104,97,97,99],[104,98,97,100],[105,4,98,4],[106,4,99,4],[106,8,99,12,"preserveGroups"],[106,22,99,26],[106,25,99,66,"_options"],[106,33,99,74],[106,34,99,12,"preserveGroups"],[106,48,99,26],[107,6,99,28,"preserveDynamicRoutes"],[107,27,99,49],[107,30,99,66,"_options"],[107,38,99,74],[107,39,99,28,"preserveDynamicRoutes"],[107,60,99,49],[108,6,99,54,"options"],[108,13,99,61],[108,16,99,61,"_objectWithoutProperties"],[108,40,99,61],[108,41,99,66,"_options"],[108,49,99,74],[108,51,99,74,"_excluded"],[108,60,99,74],[109,4,100,4,"validatePathConfig"],[109,22,100,22],[109,23,100,23,"options"],[109,30,100,30],[109,31,100,31],[110,4,101,4],[111,4,102,4],[111,8,102,8,"Object"],[111,14,102,14],[111,15,102,15,"is"],[111,17,102,17],[111,18,102,18,"options"],[111,25,102,25],[111,26,102,26,"screens"],[111,33,102,33],[111,35,102,35,"DEFAULT_SCREENS"],[111,50,102,50],[111,51,102,51],[111,53,102,53],[112,6,103,8],[112,12,103,14,"Error"],[112,17,103,19],[112,18,103,20],[112,94,103,96],[112,95,103,97],[113,4,104,4],[114,4,105,4],[114,11,105,11,"getPathFromResolvedState"],[114,35,105,35],[114,36,105,36,"JSON"],[114,40,105,40],[114,41,105,41,"parse"],[114,46,105,46],[114,47,105,47,"JSON"],[114,51,105,51],[114,52,105,52,"stringify"],[114,61,105,61],[114,62,105,62,"state"],[114,67,105,67],[114,68,105,68],[114,69,105,69],[115,4,106,4],[116,4,107,4,"createNormalizedConfigs"],[116,27,107,27],[116,28,107,28,"options"],[116,35,107,35],[116,36,107,36,"screens"],[116,43,107,43],[116,44,107,44],[116,46,107,46],[117,6,107,48,"preserveGroups"],[117,20,107,62],[118,6,107,64,"preserveDynamicRoutes"],[119,4,107,86],[119,5,107,87],[119,6,107,88],[120,2,108,0],[121,2,109,0,"exports"],[121,9,109,7],[121,10,109,8,"getPathDataFromState"],[121,30,109,28],[121,33,109,31,"getPathDataFromState"],[121,53,109,51],[122,2,110,0],[122,11,110,9,"processParamsWithUserSettings"],[122,40,110,38,"processParamsWithUserSettings"],[122,41,110,39,"configItem"],[122,51,110,49],[122,53,110,51,"params"],[122,59,110,57],[122,61,110,59],[123,4,111,4],[123,8,111,10,"stringify"],[123,17,111,19],[123,20,111,22,"configItem"],[123,30,111,32],[123,32,111,34,"stringify"],[123,41,111,43],[124,4,112,4],[124,11,112,11,"Object"],[124,17,112,17],[124,18,112,18,"fromEntries"],[124,29,112,29],[124,30,112,30,"Object"],[124,36,112,36],[124,37,112,37,"entries"],[124,44,112,44],[124,45,112,45,"params"],[124,51,112,51],[124,52,112,52],[124,53,112,53,"map"],[124,56,112,56],[124,57,112,57,"_ref3"],[124,62,112,57],[124,66,112,75],[125,6,112,75],[125,10,112,75,"_ref4"],[125,15,112,75],[125,18,112,75,"_slicedToArray"],[125,32,112,75],[125,33,112,75,"_ref3"],[125,38,112,75],[126,8,112,59,"key"],[126,11,112,62],[126,14,112,62,"_ref4"],[126,19,112,62],[127,8,112,64,"value"],[127,13,112,69],[127,16,112,69,"_ref4"],[127,21,112,69],[128,6,113,8],[128,10,113,12,"key"],[128,13,113,15],[128,18,113,20],[128,26,113,28],[128,28,113,30],[129,8,114,12],[129,15,114,19],[129,16,114,20,"key"],[129,19,114,23],[129,21,114,25,"value"],[129,26,114,30],[129,27,114,31],[130,6,115,8],[131,6,116,8],[131,13,116,15],[131,14,117,12,"key"],[131,17,117,15],[132,6,118,12],[133,6,119,12,"stringify"],[133,15,119,21],[133,18,119,24,"key"],[133,21,119,27],[133,22,119,28],[133,25,120,18,"stringify"],[133,34,120,27],[133,35,120,28,"key"],[133,38,120,31],[133,39,120,32],[133,40,120,33,"value"],[133,45,120,38],[133,46,120,39],[134,6,121,18],[135,6,122,20,"Array"],[135,11,122,25],[135,12,122,26,"isArray"],[135,19,122,33],[135,20,122,34,"value"],[135,25,122,39],[135,26,122,40],[135,29,123,26,"value"],[135,34,123,31],[135,37,124,26,"String"],[135,43,124,32],[135,44,124,33,"value"],[135,49,124,38],[135,50,124,39],[135,51,125,9],[136,4,126,4],[136,5,126,5],[136,6,126,6],[136,7,126,7],[137,2,127,0],[138,2,128,0],[138,11,128,9,"deepEqual"],[138,20,128,18,"deepEqual"],[138,21,128,19,"a"],[138,22,128,20],[138,24,128,22,"b"],[138,25,128,23],[138,27,128,25],[139,4,129,4],[139,8,129,8,"a"],[139,9,129,9],[139,14,129,14,"b"],[139,15,129,15],[139,17,129,17],[140,6,130,8],[140,13,130,15],[140,17,130,19],[141,4,131,4],[142,4,132,4],[142,8,132,8,"Array"],[142,13,132,13],[142,14,132,14,"isArray"],[142,21,132,21],[142,22,132,22,"a"],[142,23,132,23],[142,24,132,24],[142,28,132,28,"Array"],[142,33,132,33],[142,34,132,34,"isArray"],[142,41,132,41],[142,42,132,42,"b"],[142,43,132,43],[142,44,132,44],[142,46,132,46],[143,6,133,8],[143,10,133,12,"a"],[143,11,133,13],[143,12,133,14,"length"],[143,18,133,20],[143,23,133,25,"b"],[143,24,133,26],[143,25,133,27,"length"],[143,31,133,33],[143,33,133,35],[144,8,134,12],[144,15,134,19],[144,20,134,24],[145,6,135,8],[146,6,136,8],[146,11,136,13],[146,15,136,17,"i"],[146,16,136,18],[146,19,136,21],[146,20,136,22],[146,22,136,24,"i"],[146,23,136,25],[146,26,136,28,"a"],[146,27,136,29],[146,28,136,30,"length"],[146,34,136,36],[146,36,136,38,"i"],[146,37,136,39],[146,39,136,41],[146,41,136,43],[147,8,137,12],[147,12,137,16],[147,13,137,17,"deepEqual"],[147,22,137,26],[147,23,137,27,"a"],[147,24,137,28],[147,25,137,29,"i"],[147,26,137,30],[147,27,137,31],[147,29,137,33,"b"],[147,30,137,34],[147,31,137,35,"i"],[147,32,137,36],[147,33,137,37],[147,34,137,38],[147,36,137,40],[148,10,138,16],[148,17,138,23],[148,22,138,28],[149,8,139,12],[150,6,140,8],[151,6,141,8],[151,13,141,15],[151,17,141,19],[152,4,142,4],[153,4,143,4],[153,8,143,8],[153,15,143,15,"a"],[153,16,143,16],[153,21,143,21],[153,29,143,29],[153,33,143,33],[153,40,143,40,"b"],[153,41,143,41],[153,46,143,46],[153,54,143,54],[153,56,143,56],[154,6,144,8],[154,10,144,14,"keysA"],[154,15,144,19],[154,18,144,22,"Object"],[154,24,144,28],[154,25,144,29,"keys"],[154,29,144,33],[154,30,144,34,"a"],[154,31,144,35],[154,32,144,36],[155,6,145,8],[155,10,145,14,"keysB"],[155,15,145,19],[155,18,145,22,"Object"],[155,24,145,28],[155,25,145,29,"keys"],[155,29,145,33],[155,30,145,34,"b"],[155,31,145,35],[155,32,145,36],[156,6,146,8],[156,10,146,12,"keysA"],[156,15,146,17],[156,16,146,18,"length"],[156,22,146,24],[156,27,146,29,"keysB"],[156,32,146,34],[156,33,146,35,"length"],[156,39,146,41],[156,41,146,43],[157,8,147,12],[157,15,147,19],[157,20,147,24],[158,6,148,8],[159,6,149,8],[159,11,149,13],[159,15,149,19,"key"],[159,18,149,22],[159,22,149,26,"keysA"],[159,27,149,31],[159,29,149,33],[160,8,150,12],[160,12,150,16],[160,13,150,17,"deepEqual"],[160,22,150,26],[160,23,150,27,"a"],[160,24,150,28],[160,25,150,29,"key"],[160,28,150,32],[160,29,150,33],[160,31,150,35,"b"],[160,32,150,36],[160,33,150,37,"key"],[160,36,150,40],[160,37,150,41],[160,38,150,42],[160,40,150,44],[161,10,151,16],[161,17,151,23],[161,22,151,28],[162,8,152,12],[163,6,153,8],[164,6,154,8],[164,13,154,15],[164,17,154,19],[165,4,155,4],[166,4,156,4],[166,11,156,11],[166,16,156,16],[167,2,157,0],[168,2,158,0,"exports"],[168,9,158,7],[168,10,158,8,"deepEqual"],[168,19,158,17],[168,22,158,20,"deepEqual"],[168,31,158,29],[169,2,159,0],[169,11,159,9,"walkConfigItems"],[169,26,159,24,"walkConfigItems"],[169,27,159,25,"route"],[169,32,159,30],[169,34,159,32,"focusedRoute"],[169,46,159,44],[169,48,159,46,"configs"],[169,55,159,53],[169,57,159,53,"_ref5"],[169,62,159,53],[169,64,159,83],[170,4,159,83],[170,8,159,57,"preserveDynamicRoutes"],[170,29,159,78],[170,32,159,78,"_ref5"],[170,37,159,78],[170,38,159,57,"preserveDynamicRoutes"],[170,59,159,78],[171,4,160,4],[172,4,161,4],[172,8,161,8],[172,9,161,9,"route"],[172,14,161,14],[172,15,161,15,"state"],[172,20,161,20],[172,24,161,24,"isInvalidParams"],[172,39,161,39],[172,40,161,40,"route"],[172,45,161,45],[172,46,161,46,"params"],[172,52,161,52],[172,53,161,53],[172,55,161,55],[173,6,162,8,"route"],[173,11,162,13],[173,12,162,14,"state"],[173,17,162,19],[173,20,162,22,"createFakeState"],[173,35,162,37],[173,36,162,38,"route"],[173,41,162,43],[173,42,162,44,"params"],[173,48,162,50],[173,49,162,51],[174,4,163,4],[175,4,164,4],[175,8,164,8,"pattern"],[175,15,164,15],[175,18,164,18],[175,22,164,22],[176,4,165,4],[176,8,165,8,"focusedParams"],[176,21,165,21],[177,4,166,4],[177,8,166,8,"hash"],[177,12,166,12],[178,4,167,4],[178,8,167,10,"collectedParams"],[178,23,167,25],[178,26,167,28],[178,27,167,29],[178,28,167,30],[179,4,168,4],[179,11,168,11,"route"],[179,16,168,16],[179,17,168,17,"name"],[179,21,168,21],[179,25,168,25,"configs"],[179,32,168,32],[179,34,168,34],[180,6,169,8],[180,10,169,14,"configItem"],[180,20,169,24],[180,23,169,27,"configs"],[180,30,169,34],[180,31,169,35,"route"],[180,36,169,40],[180,37,169,41,"name"],[180,41,169,45],[180,42,169,46],[181,6,170,8],[181,10,170,14,"inputPattern"],[181,22,170,26],[181,25,170,29,"configItem"],[181,35,170,39],[181,36,170,40,"pattern"],[181,43,170,47],[182,6,171,8],[182,10,171,12,"inputPattern"],[182,22,171,24],[182,26,171,28],[182,30,171,32],[182,32,171,34],[183,8,172,12],[184,8,173,12],[184,14,173,18],[184,18,173,22,"Error"],[184,23,173,27],[184,24,173,28],[184,65,173,69],[184,68,173,72,"route"],[184,73,173,77],[184,74,173,78,"name"],[184,78,173,82],[184,79,173,83],[185,6,174,8],[186,6,175,8,"pattern"],[186,13,175,15],[186,16,175,18,"inputPattern"],[186,28,175,30],[187,6,176,8],[187,10,176,12,"route"],[187,15,176,17],[187,16,176,18,"params"],[187,22,176,24],[187,24,176,26],[188,8,177,12],[188,12,177,16,"route"],[188,17,177,21],[188,18,177,22,"params"],[188,24,177,28],[188,25,177,29],[188,28,177,32],[188,29,177,33],[188,34,177,38,"undefined"],[188,43,177,47],[188,45,177,49],[189,10,178,16,"hash"],[189,14,178,20],[189,17,178,23,"route"],[189,22,178,28],[189,23,178,29,"params"],[189,29,178,35],[189,30,178,36],[189,33,178,39],[189,34,178,40],[190,10,179,16],[190,17,179,23,"route"],[190,22,179,28],[190,23,179,29,"params"],[190,29,179,35],[190,30,179,36],[190,33,179,39],[190,34,179,40],[191,8,180,12],[192,8,181,12],[192,12,181,18,"params"],[192,18,181,24],[192,21,181,27,"processParamsWithUserSettings"],[192,50,181,56],[192,51,181,57,"configItem"],[192,61,181,67],[192,63,181,69,"route"],[192,68,181,74],[192,69,181,75,"params"],[192,75,181,81],[192,76,181,82],[193,8,182,12],[193,12,182,16,"pattern"],[193,19,182,23],[193,24,182,28,"undefined"],[193,33,182,37],[193,37,182,41,"pattern"],[193,44,182,48],[193,49,182,53],[193,53,182,57],[193,55,182,59],[194,10,183,16,"Object"],[194,16,183,22],[194,17,183,23,"assign"],[194,23,183,29],[194,24,183,30,"collectedParams"],[194,39,183,45],[194,41,183,47,"params"],[194,47,183,53],[194,48,183,54],[195,8,184,12],[196,8,185,12],[196,12,185,16,"deepEqual"],[196,21,185,25],[196,22,185,26,"focusedRoute"],[196,34,185,38],[196,36,185,40,"route"],[196,41,185,45],[196,42,185,46],[196,44,185,48],[197,10,186,16],[197,14,186,20,"preserveDynamicRoutes"],[197,35,186,41],[197,37,186,43],[198,12,187,20,"focusedParams"],[198,25,187,33],[198,28,187,36,"params"],[198,34,187,42],[199,10,188,16],[199,11,188,17],[199,17,189,21],[200,12,190,20],[201,12,191,20],[202,12,192,20,"focusedParams"],[202,25,192,33],[202,28,192,36,"getParamsWithConventionsCollapsed"],[202,61,192,69],[202,62,192,70],[203,14,193,24,"params"],[203,20,193,30],[204,14,194,24,"pattern"],[204,21,194,31],[205,14,195,24,"routeName"],[205,23,195,33],[205,25,195,35,"route"],[205,30,195,40],[205,31,195,41,"name"],[206,12,196,20],[206,13,196,21],[206,14,196,22],[207,10,197,16],[208,8,198,12],[209,6,199,8],[210,6,200,8],[210,10,200,12],[210,11,200,13,"route"],[210,16,200,18],[210,17,200,19,"state"],[210,22,200,24],[210,26,200,28,"isInvalidParams"],[210,41,200,43],[210,42,200,44,"route"],[210,47,200,49],[210,48,200,50,"params"],[210,54,200,56],[210,55,200,57],[210,57,200,59],[211,8,201,12,"route"],[211,13,201,17],[211,14,201,18,"state"],[211,19,201,23],[211,22,201,26,"createFakeState"],[211,37,201,41],[211,38,201,42,"route"],[211,43,201,47],[211,44,201,48,"params"],[211,50,201,54],[211,51,201,55],[212,6,202,8],[213,6,203,8],[214,6,204,8],[214,10,204,12],[214,11,204,13,"configItem"],[214,21,204,23],[214,22,204,24,"screens"],[214,29,204,31],[214,33,204,35,"route"],[214,38,204,40],[214,39,204,41,"state"],[214,44,204,46],[214,49,204,51,"undefined"],[214,58,204,60],[214,60,204,62],[215,8,205,12],[215,12,205,16,"configItem"],[215,22,205,26],[215,23,205,27,"initialRouteName"],[215,39,205,43],[215,43,206,16,"configItem"],[215,53,206,26],[215,54,206,27,"screens"],[215,61,206,34],[215,65,207,16,"configItem"],[215,75,207,26],[215,76,207,27,"initialRouteName"],[215,92,207,43],[215,96,207,47,"configItem"],[215,106,207,57],[215,107,207,58,"screens"],[215,114,207,65],[215,118,208,16,"configItem"],[215,128,208,26],[215,129,208,27,"screens"],[215,136,208,34],[215,137,208,35,"configItem"],[215,147,208,45],[215,148,208,46,"initialRouteName"],[215,164,208,62],[215,165,208,63],[215,167,208,65,"pattern"],[215,174,208,72],[215,176,208,74],[216,10,209,16],[216,14,209,22,"initialRouteConfig"],[216,32,209,40],[216,35,209,43,"configItem"],[216,45,209,53],[216,46,209,54,"screens"],[216,53,209,61],[216,54,209,62,"configItem"],[216,64,209,72],[216,65,209,73,"initialRouteName"],[216,81,209,89],[216,82,209,90],[217,10,210,16],[218,10,211,16,"pattern"],[218,17,211,23],[218,20,211,26,"initialRouteConfig"],[218,38,211,44],[218,39,211,45,"pattern"],[218,46,211,52],[219,10,212,16],[219,14,212,20,"focusedParams"],[219,27,212,33],[219,29,212,35],[220,12,213,20],[220,16,213,24],[220,17,213,25,"preserveDynamicRoutes"],[220,38,213,46],[220,40,213,48],[221,14,214,24],[222,14,215,24],[223,14,216,24,"focusedParams"],[223,27,216,37],[223,30,216,40,"getParamsWithConventionsCollapsed"],[223,63,216,73],[223,64,216,74],[224,16,217,28,"params"],[224,22,217,34],[224,24,217,36,"focusedParams"],[224,37,217,49],[225,16,218,28,"pattern"],[225,23,218,35],[226,16,219,28,"routeName"],[226,25,219,37],[226,27,219,39,"route"],[226,32,219,44],[226,33,219,45,"name"],[227,14,220,24],[227,15,220,25],[227,16,220,26],[228,12,221,20],[229,10,222,16],[230,8,223,12],[231,8,224,12],[232,6,225,8],[233,6,226,8],[233,10,226,14,"index"],[233,15,226,19],[233,18,226,22,"route"],[233,23,226,27],[233,24,226,28,"state"],[233,29,226,33],[233,30,226,34,"index"],[233,35,226,39],[233,39,226,43,"route"],[233,44,226,48],[233,45,226,49,"state"],[233,50,226,54],[233,51,226,55,"routes"],[233,57,226,61],[233,58,226,62,"length"],[233,64,226,68],[233,67,226,71],[233,68,226,72],[234,6,227,8],[234,10,227,14,"nextRoute"],[234,19,227,23],[234,22,227,26,"route"],[234,27,227,31],[234,28,227,32,"state"],[234,33,227,37],[234,34,227,38,"routes"],[234,40,227,44],[234,41,227,45,"index"],[234,46,227,50],[234,47,227,51],[235,6,228,8],[235,10,228,14,"nestedScreens"],[235,23,228,27],[235,26,228,30,"configItem"],[235,36,228,40],[235,37,228,41,"screens"],[235,44,228,48],[236,6,229,8],[237,6,230,8],[237,10,230,12,"nestedScreens"],[237,23,230,25],[237,27,230,29,"nextRoute"],[237,36,230,38],[237,37,230,39,"name"],[237,41,230,43],[237,45,230,47,"nestedScreens"],[237,58,230,60],[237,60,230,62],[238,8,231,12,"route"],[238,13,231,17],[238,16,231,20,"nextRoute"],[238,25,231,29],[239,8,232,12,"configs"],[239,15,232,19],[239,18,232,22,"nestedScreens"],[239,31,232,35],[240,6,233,8],[240,7,233,9],[240,13,234,13],[241,8,235,12],[242,8,236,12],[243,6,237,8],[244,4,238,4],[245,4,239,4],[245,8,239,8,"pattern"],[245,15,239,15],[245,19,239,19],[245,23,239,23],[245,25,239,25],[246,6,240,8],[246,12,240,14],[246,16,240,18,"Error"],[246,21,240,23],[246,22,240,24],[246,53,240,55,"route"],[246,58,240,60],[246,59,240,61,"name"],[246,63,240,65],[246,82,240,84,"Object"],[246,88,240,90],[246,89,240,91,"keys"],[246,93,240,95],[246,94,240,96,"configs"],[246,101,240,103],[246,102,240,104],[246,103,240,105,"join"],[246,107,240,109],[246,108,240,110],[246,112,240,114],[246,113,240,115],[246,116,240,118],[246,117,240,119],[247,4,241,4],[248,4,242,4],[248,8,242,8,"pattern"],[248,15,242,15],[248,19,242,19],[248,20,242,20,"focusedParams"],[248,33,242,33],[248,37,242,37,"focusedRoute"],[248,49,242,49],[248,50,242,50,"params"],[248,56,242,56],[248,58,242,58],[249,6,243,8],[249,10,243,12,"preserveDynamicRoutes"],[249,31,243,33],[249,33,243,35],[250,8,244,12,"focusedParams"],[250,21,244,25],[250,24,244,28,"focusedRoute"],[250,36,244,40],[250,37,244,41,"params"],[250,43,244,47],[251,6,245,8],[251,7,245,9],[251,13,246,13],[252,8,247,12],[253,8,248,12],[254,8,249,12,"focusedParams"],[254,21,249,25],[254,24,249,28,"getParamsWithConventionsCollapsed"],[254,57,249,61],[254,58,249,62],[255,10,250,16,"params"],[255,16,250,22],[255,18,250,24,"focusedRoute"],[255,30,250,36],[255,31,250,37,"params"],[255,37,250,43],[256,10,251,16,"pattern"],[256,17,251,23],[257,10,252,16,"routeName"],[257,19,252,25],[257,21,252,27,"route"],[257,26,252,32],[257,27,252,33,"name"],[258,8,253,12],[258,9,253,13],[258,10,253,14],[259,6,254,8],[260,6,255,8,"Object"],[260,12,255,14],[260,13,255,15,"assign"],[260,19,255,21],[260,20,255,22,"focusedParams"],[260,33,255,35],[260,35,255,37,"collectedParams"],[260,50,255,52],[260,51,255,53],[261,4,256,4],[262,4,257,4],[262,11,257,11],[263,6,258,8,"pattern"],[263,13,258,15],[264,6,259,8,"nextRoute"],[264,15,259,17],[264,17,259,19,"route"],[264,22,259,24],[265,6,260,8,"focusedParams"],[265,19,260,21],[266,6,261,8,"hash"],[266,10,261,12],[267,6,262,8,"params"],[267,12,262,14],[267,14,262,16,"collectedParams"],[268,4,263,4],[268,5,263,5],[269,2,264,0],[270,2,265,0],[270,11,265,9,"getPathFromResolvedState"],[270,35,265,33,"getPathFromResolvedState"],[270,36,265,34,"state"],[270,41,265,39],[270,43,265,41,"configs"],[270,50,265,48],[270,52,265,48,"_ref6"],[270,57,265,48],[270,59,265,94],[271,4,265,94],[271,8,265,52,"preserveGroups"],[271,22,265,66],[271,25,265,66,"_ref6"],[271,30,265,66],[271,31,265,52,"preserveGroups"],[271,45,265,66],[272,6,265,68,"preserveDynamicRoutes"],[272,27,265,89],[272,30,265,89,"_ref6"],[272,35,265,89],[272,36,265,68,"preserveDynamicRoutes"],[272,57,265,89],[273,4,266,4],[273,8,266,8,"path"],[273,12,266,12],[273,15,266,15],[273,17,266,17],[274,4,267,4],[274,8,267,8,"current"],[274,15,267,15],[274,18,267,18,"state"],[274,23,267,23],[275,4,268,4],[275,8,268,8,"hash"],[275,12,268,12],[276,4,269,4],[276,8,269,10,"allParams"],[276,17,269,19],[276,20,269,22],[276,21,269,23],[276,22,269,24],[277,4,270,4],[277,11,270,11,"current"],[277,18,270,18],[277,20,270,20],[278,6,271,8,"path"],[278,10,271,12],[278,14,271,16],[278,17,271,19],[279,6,272,8],[280,6,273,8],[280,10,273,14,"route"],[280,15,273,19],[280,18,273,22,"current"],[280,25,273,29],[280,26,273,30,"routes"],[280,32,273,36],[280,33,273,37,"current"],[280,40,273,44],[280,41,273,45,"index"],[280,46,273,50],[280,50,273,54],[280,51,273,55],[280,52,273,56],[281,6,274,8],[282,6,275,8],[283,6,276,8],[283,10,276,12],[283,11,276,13,"route"],[283,16,276,18],[283,17,276,19,"state"],[283,22,276,24],[283,26,276,28,"isInvalidParams"],[283,41,276,43],[283,42,276,44,"route"],[283,47,276,49],[283,48,276,50,"params"],[283,54,276,56],[283,55,276,57],[283,57,276,59],[284,8,277,12,"route"],[284,13,277,17],[284,14,277,18,"state"],[284,19,277,23],[284,22,277,26,"createFakeState"],[284,37,277,41],[284,38,277,42,"route"],[284,43,277,47],[284,44,277,48,"params"],[284,50,277,54],[284,51,277,55],[285,6,278,8],[286,6,279,8],[286,10,279,8,"_walkConfigItems"],[286,26,279,8],[286,29,279,76,"walkConfigItems"],[286,44,279,91],[286,45,279,92,"route"],[286,50,279,97],[286,52,279,99,"getActiveRoute"],[286,66,279,113],[286,67,279,114,"current"],[286,74,279,121],[286,75,279,122],[286,77,279,124],[287,10,279,126],[287,13,279,129,"configs"],[288,8,279,137],[288,9,279,138],[288,11,279,140],[289,10,279,142,"preserveDynamicRoutes"],[290,8,279,164],[290,9,279,165],[290,10,279,166],[291,8,279,16,"pattern"],[291,15,279,23],[291,18,279,23,"_walkConfigItems"],[291,34,279,23],[291,35,279,16,"pattern"],[291,42,279,23],[292,8,279,25,"params"],[292,15,279,31],[292,18,279,31,"_walkConfigItems"],[292,34,279,31],[292,35,279,25,"params"],[292,41,279,31],[293,8,279,33,"nextRoute"],[293,17,279,42],[293,20,279,42,"_walkConfigItems"],[293,36,279,42],[293,37,279,33,"nextRoute"],[293,46,279,42],[294,8,279,44,"focusedParams"],[294,21,279,57],[294,24,279,57,"_walkConfigItems"],[294,40,279,57],[294,41,279,44,"focusedParams"],[294,54,279,57],[295,8,279,65,"$hash"],[295,13,279,70],[295,16,279,70,"_walkConfigItems"],[295,32,279,70],[295,33,279,59,"hash"],[295,37,279,63],[296,6,280,8],[296,10,280,12,"$hash"],[296,15,280,17],[296,17,280,19],[297,8,281,12,"hash"],[297,12,281,16],[297,15,281,19,"$hash"],[297,20,281,24],[298,6,282,8],[299,6,283,8,"Object"],[299,12,283,14],[299,13,283,15,"assign"],[299,19,283,21],[299,20,283,22,"allParams"],[299,29,283,31],[299,31,283,33,"params"],[299,38,283,39],[299,39,283,40],[300,6,284,8,"path"],[300,10,284,12],[300,14,284,16,"getPathWithConventionsCollapsed"],[300,45,284,47],[300,46,284,48],[301,8,285,12,"pattern"],[301,15,285,19],[302,8,286,12,"routePath"],[302,17,286,21],[302,19,286,23,"nextRoute"],[302,28,286,32],[302,29,286,33,"path"],[302,33,286,37],[303,8,287,12,"params"],[303,14,287,18],[303,16,287,20,"allParams"],[303,25,287,29],[304,8,288,12,"initialRouteName"],[304,24,288,28],[304,26,288,30,"configs"],[304,33,288,37],[304,34,288,38,"nextRoute"],[304,43,288,47],[304,44,288,48,"name"],[304,48,288,52],[304,49,288,53],[304,51,288,55,"initialRouteName"],[304,67,288,71],[305,8,289,12,"preserveGroups"],[305,22,289,26],[306,8,290,12,"preserveDynamicRoutes"],[307,6,291,8],[307,7,291,9],[307,8,291,10],[308,6,292,8],[308,10,292,12,"nextRoute"],[308,19,292,21],[308,20,292,22,"state"],[308,25,292,27],[309,6,293,12],[310,6,294,12],[311,6,295,12],[312,6,296,12],[313,6,297,12,"configs"],[313,13,297,19],[313,14,297,20,"nextRoute"],[313,23,297,29],[313,24,297,30,"state"],[313,29,297,35],[313,30,297,36,"routes"],[313,36,297,42],[313,39,297,45,"nextRoute"],[313,48,297,54],[313,49,297,55,"state"],[313,54,297,60],[313,56,297,62,"index"],[313,61,297,67],[313,65,297,71],[313,66,297,72],[313,67,297,73],[313,69,297,75,"name"],[313,73,297,79],[313,74,297,80],[313,76,297,82],[314,8,298,12],[315,8,299,12,"current"],[315,15,299,19],[315,18,299,22,"nextRoute"],[315,27,299,31],[315,28,299,32,"state"],[315,33,299,37],[316,6,300,8],[316,7,300,9],[316,13,301,13],[317,8,302,12],[318,8,303,12],[319,8,304,12],[319,12,304,16,"focusedParams"],[319,25,304,29],[319,27,304,31],[320,10,305,16],[320,15,305,21],[320,19,305,27,"param"],[320,24,305,32],[320,28,305,36,"focusedParams"],[320,41,305,49],[320,43,305,51],[321,12,306,20],[322,12,307,20],[322,16,307,24,"focusedParams"],[322,29,307,37],[322,30,307,38,"param"],[322,35,307,43],[322,36,307,44],[322,41,307,49],[322,52,307,60],[322,54,307,62],[323,14,308,24],[324,14,309,24],[324,21,309,31,"focusedParams"],[324,34,309,44],[324,35,309,45,"param"],[324,40,309,50],[324,41,309,51],[325,12,310,20],[326,10,311,16],[327,10,312,16],[327,14,312,22,"params"],[327,22,312,28],[327,25,312,31],[327,29,312,35,"URLSearchParams"],[327,44,312,50],[327,45,312,51,"Object"],[327,51,312,57],[327,52,312,58,"entries"],[327,59,312,65],[327,60,312,66,"focusedParams"],[327,73,312,79],[327,74,312,80],[327,75,312,81,"flatMap"],[327,82,312,88],[327,83,312,89,"_ref7"],[327,88,312,89],[327,92,312,108],[328,12,312,108],[328,16,312,108,"_ref8"],[328,21,312,108],[328,24,312,108,"_slicedToArray"],[328,38,312,108],[328,39,312,108,"_ref7"],[328,44,312,108],[329,14,312,91,"key"],[329,17,312,94],[329,20,312,94,"_ref8"],[329,25,312,94],[330,14,312,96,"values"],[330,20,312,102],[330,23,312,102,"_ref8"],[330,28,312,102],[331,12,313,20],[331,19,313,27,"Array"],[331,24,313,32],[331,25,313,33,"isArray"],[331,32,313,40],[331,33,313,41,"values"],[331,39,313,47],[331,40,313,48],[331,43,313,51,"values"],[331,49,313,57],[331,50,313,58,"map"],[331,53,313,61],[331,54,313,63,"value"],[331,59,313,68],[331,63,313,73],[331,64,313,74,"key"],[331,67,313,77],[331,69,313,79,"value"],[331,74,313,84],[331,75,313,85],[331,76,313,86],[331,79,313,89],[331,80,313,90],[331,81,313,91,"key"],[331,84,313,94],[331,86,313,96,"values"],[331,92,313,102],[331,93,313,103],[331,94,313,104],[332,10,314,16],[332,11,314,17],[332,12,314,18],[332,13,314,19],[333,10,315,16],[333,14,315,22,"query"],[333,19,315,27],[333,22,315,30,"params"],[333,30,315,36],[333,31,315,37,"toString"],[333,39,315,45],[333,40,315,46],[333,41,315,47],[334,10,316,16],[334,14,316,20,"query"],[334,19,316,25],[334,21,316,27],[335,12,317,20,"path"],[335,16,317,24],[335,20,317,28],[335,24,317,32,"query"],[335,29,317,37],[335,31,317,39],[336,10,318,16],[337,8,319,12],[338,8,320,12],[339,6,321,8],[340,4,322,4],[341,4,323,4],[341,8,323,8,"hash"],[341,12,323,12],[341,14,323,14],[342,6,324,8,"allParams"],[342,15,324,17],[342,16,324,18],[342,19,324,21],[342,20,324,22],[342,23,324,25,"hash"],[342,27,324,29],[343,6,325,8,"path"],[343,10,325,12],[343,14,325,16],[343,18,325,20,"hash"],[343,22,325,24],[343,24,325,26],[344,4,326,4],[345,4,327,4],[345,8,327,10,"params"],[345,14,327,16],[345,17,327,19,"decodeParams"],[345,29,327,31],[345,30,327,32,"allParams"],[345,39,327,41],[345,40,327,42],[346,4,328,4],[346,11,328,11],[347,6,328,13,"path"],[347,10,328,17],[347,12,328,19,"appendBaseUrl"],[347,25,328,32],[347,26,328,33,"basicSanitizePath"],[347,43,328,50],[347,44,328,51,"path"],[347,48,328,55],[347,49,328,56],[347,50,328,57],[348,6,328,59,"params"],[349,4,328,66],[349,5,328,67],[350,2,329,0],[351,2,330,0],[351,11,330,9,"decodeParams"],[351,23,330,21,"decodeParams"],[351,24,330,22,"params"],[351,30,330,28],[351,32,330,30],[352,4,331,4],[352,8,331,10,"parsed"],[352,14,331,16],[352,17,331,19],[352,18,331,20],[352,19,331,21],[353,4,332,4],[353,13,332,4,"_ref9"],[353,18,332,4],[353,22,332,31,"Object"],[353,28,332,37],[353,29,332,38,"entries"],[353,36,332,45],[353,37,332,46,"params"],[353,43,332,52],[353,44,332,53],[353,46,332,55],[354,6,332,55],[354,10,332,55,"_ref10"],[354,16,332,55],[354,19,332,55,"_slicedToArray"],[354,33,332,55],[354,34,332,55,"_ref9"],[354,39,332,55],[355,6,332,55],[355,10,332,16,"key"],[355,13,332,19],[355,16,332,19,"_ref10"],[355,22,332,19],[356,6,332,19],[356,10,332,21,"value"],[356,15,332,26],[356,18,332,26,"_ref10"],[356,24,332,26],[357,6,333,8],[357,10,333,12],[358,8,334,12],[358,12,334,16,"key"],[358,15,334,19],[358,20,334,24],[358,28,334,32],[358,32,334,36],[358,39,334,43,"value"],[358,44,334,48],[358,49,334,53],[358,57,334,61],[358,59,334,63],[359,10,335,16,"parsed"],[359,16,335,22],[359,17,335,23,"key"],[359,20,335,26],[359,21,335,27],[359,24,335,30,"decodeParams"],[359,36,335,42],[359,37,335,43,"value"],[359,42,335,48],[359,43,335,49],[360,8,336,12],[360,9,336,13],[360,15,337,17],[360,19,337,21,"Array"],[360,24,337,26],[360,25,337,27,"isArray"],[360,32,337,34],[360,33,337,35,"value"],[360,38,337,40],[360,39,337,41],[360,41,337,43],[361,10,338,16,"parsed"],[361,16,338,22],[361,17,338,23,"key"],[361,20,338,26],[361,21,338,27],[361,24,338,30,"value"],[361,29,338,35],[361,30,338,36,"map"],[361,33,338,39],[361,34,338,41,"v"],[361,35,338,42],[361,39,338,47,"decodeURIComponent"],[361,57,338,65],[361,58,338,66,"v"],[361,59,338,67],[361,60,338,68],[361,61,338,69],[362,8,339,12],[362,9,339,13],[362,15,340,17],[363,10,341,16,"parsed"],[363,16,341,22],[363,17,341,23,"key"],[363,20,341,26],[363,21,341,27],[363,24,341,30,"decodeURIComponent"],[363,42,341,48],[363,43,341,49,"value"],[363,48,341,54],[363,49,341,55],[364,8,342,12],[365,6,343,8],[365,7,343,9],[365,8,344,8],[365,14,344,14],[366,8,345,12,"parsed"],[366,14,345,18],[366,15,345,19,"key"],[366,18,345,22],[366,19,345,23],[366,22,345,26,"value"],[366,27,345,31],[367,6,346,8],[368,4,347,4],[369,4,348,4],[369,11,348,11,"parsed"],[369,17,348,17],[370,2,349,0],[371,2,350,0,"exports"],[371,9,350,7],[371,10,350,8,"decodeParams"],[371,22,350,20],[371,25,350,23,"decodeParams"],[371,37,350,35],[372,2,351,0],[372,11,351,9,"getPathWithConventionsCollapsed"],[372,42,351,40,"getPathWithConventionsCollapsed"],[372,43,351,40,"_ref11"],[372,49,351,40],[372,51,351,131],[373,4,351,131],[373,8,351,43,"pattern"],[373,15,351,50],[373,18,351,50,"_ref11"],[373,24,351,50],[373,25,351,43,"pattern"],[373,32,351,50],[374,6,351,52,"routePath"],[374,15,351,61],[374,18,351,61,"_ref11"],[374,24,351,61],[374,25,351,52,"routePath"],[374,34,351,61],[375,6,351,63,"params"],[375,12,351,69],[375,15,351,69,"_ref11"],[375,21,351,69],[375,22,351,63,"params"],[375,28,351,69],[376,6,351,71,"preserveGroups"],[376,20,351,85],[376,23,351,85,"_ref11"],[376,29,351,85],[376,30,351,71,"preserveGroups"],[376,44,351,85],[377,6,351,87,"preserveDynamicRoutes"],[377,27,351,108],[377,30,351,108,"_ref11"],[377,36,351,108],[377,37,351,87,"preserveDynamicRoutes"],[377,58,351,108],[378,6,351,110,"initialRouteName"],[378,22,351,126],[378,25,351,126,"_ref11"],[378,31,351,126],[378,32,351,110,"initialRouteName"],[378,48,351,126],[379,4,352,4],[379,8,352,10,"segments"],[379,16,352,18],[379,19,352,21,"pattern"],[379,26,352,28],[379,27,352,29,"split"],[379,32,352,34],[379,33,352,35],[379,36,352,38],[379,37,352,39],[380,4,353,4],[380,11,353,11,"segments"],[380,19,353,19],[380,20,354,9,"map"],[380,23,354,12],[380,24,354,13],[380,25,354,14,"p"],[380,26,354,15],[380,28,354,17,"i"],[380,29,354,18],[380,34,354,23],[381,6,355,8],[381,10,355,14,"name"],[381,14,355,18],[381,17,355,21,"getParamName"],[381,29,355,33],[381,30,355,34,"p"],[381,31,355,35],[381,32,355,36],[382,6,356,8],[383,6,357,8],[384,6,358,8],[385,6,359,8],[385,10,359,12,"p"],[385,11,359,13],[385,12,359,14,"startsWith"],[385,22,359,24],[385,23,359,25],[385,26,359,28],[385,27,359,29],[385,29,359,31],[386,8,360,12],[386,12,360,16,"preserveDynamicRoutes"],[386,33,360,37],[386,35,360,39],[387,10,361,16],[387,14,361,20,"name"],[387,18,361,24],[387,23,361,29],[387,34,361,40],[387,36,361,42],[388,12,362,20],[388,19,362,27],[388,31,362,39],[389,10,363,16],[390,10,364,16],[390,17,364,23],[390,24,364,30,"name"],[390,28,364,34],[390,31,364,37],[391,8,365,12],[392,8,366,12],[392,12,366,16,"params"],[392,18,366,22],[392,19,366,23,"name"],[392,23,366,27],[392,24,366,28],[392,26,366,30],[393,10,367,16],[393,14,367,20,"Array"],[393,19,367,25],[393,20,367,26,"isArray"],[393,27,367,33],[393,28,367,34,"params"],[393,34,367,40],[393,35,367,41,"name"],[393,39,367,45],[393,40,367,46],[393,41,367,47],[393,43,367,49],[394,12,368,20],[394,19,368,27,"params"],[394,25,368,33],[394,26,368,34,"name"],[394,30,368,38],[394,31,368,39],[394,32,368,40,"join"],[394,36,368,44],[394,37,368,45],[394,40,368,48],[394,41,368,49],[395,10,369,16],[396,10,370,16],[396,17,370,23,"params"],[396,23,370,29],[396,24,370,30,"name"],[396,28,370,34],[396,29,370,35],[397,8,371,12],[398,8,372,12],[398,12,372,16,"i"],[398,13,372,17],[398,18,372,22],[398,19,372,23],[398,21,372,25],[399,10,373,16],[400,10,374,16],[400,17,374,23,"routePath"],[400,26,374,32],[401,8,375,12],[402,8,376,12],[403,8,377,12],[404,8,378,12],[405,8,379,12],[405,15,379,19,"routePath"],[405,24,379,28],[405,26,380,18,"split"],[405,31,380,23],[405,32,380,24],[405,35,380,27],[405,36,380,28],[405,37,381,17,"slice"],[405,42,381,22],[405,43,381,23,"i"],[405,44,381,24],[405,47,381,27],[405,48,381,28],[405,49,381,29],[405,50,382,17,"join"],[405,54,382,21],[405,55,382,22],[405,58,382,25],[405,59,382,26],[406,6,383,8],[407,6,384,8],[408,6,385,8],[408,10,385,12,"p"],[408,11,385,13],[408,12,385,14,"startsWith"],[408,22,385,24],[408,23,385,25],[408,26,385,28],[408,27,385,29],[408,29,385,31],[409,8,386,12],[409,12,386,16,"preserveDynamicRoutes"],[409,33,386,37],[409,35,386,39],[410,10,387,16],[410,17,387,23],[410,21,387,27,"name"],[410,25,387,31],[410,28,387,34],[411,8,388,12],[412,8,389,12],[413,8,390,12],[413,15,390,19,"params"],[413,21,390,25],[413,22,390,26,"name"],[413,26,390,30],[413,27,390,31],[414,6,391,8],[415,6,392,8],[415,10,392,12],[415,11,392,13,"preserveGroups"],[415,25,392,27],[415,29,392,31],[415,30,392,32],[415,31,392,33],[415,33,392,35,"matchers_1"],[415,43,392,45],[415,44,392,46,"matchGroupName"],[415,58,392,60],[415,60,392,62,"p"],[415,61,392,63],[415,62,392,64],[415,66,392,68],[415,70,392,72],[415,72,392,74],[416,8,393,12],[417,8,394,12],[418,8,395,12],[419,8,396,12],[419,12,396,16,"segments"],[419,20,396,24],[419,21,396,25,"length"],[419,27,396,31],[419,30,396,34],[419,31,396,35],[419,36,396,40,"i"],[419,37,396,41],[419,39,396,43],[420,10,397,16],[420,14,397,20,"initialRouteName"],[420,30,397,36],[420,32,397,38],[421,12,398,20],[422,12,399,20],[422,16,399,24,"segmentMatchesConvention"],[422,40,399,48],[422,41,399,49,"initialRouteName"],[422,57,399,65],[422,58,399,66],[422,60,399,68],[423,14,400,24],[423,21,400,31],[423,23,400,33],[424,12,401,20],[425,12,402,20],[425,19,402,27,"encodeURIComponentPreservingBrackets"],[425,55,402,63],[425,56,402,64,"initialRouteName"],[425,72,402,80],[425,73,402,81],[426,10,403,16],[427,8,404,12],[428,8,405,12],[428,15,405,19],[428,17,405,21],[429,6,406,8],[430,6,407,8],[431,6,408,8],[431,13,408,15,"encodeURIComponentPreservingBrackets"],[431,49,408,51],[431,50,408,52,"p"],[431,51,408,53],[431,52,408,54],[432,4,409,4],[432,5,409,5],[432,6,409,6],[432,7,410,9,"map"],[432,10,410,12],[432,11,410,14,"v"],[432,12,410,15],[432,16,410,20,"v"],[432,17,410,21],[432,21,410,25],[432,23,410,27],[432,24,410,28],[432,25,411,9,"join"],[432,29,411,13],[432,30,411,14],[432,33,411,17],[432,34,411,18],[433,2,412,0],[434,2,413,0],[435,2,414,0],[435,11,414,9,"getParamsWithConventionsCollapsed"],[435,44,414,42,"getParamsWithConventionsCollapsed"],[435,45,414,42,"_ref12"],[435,51,414,42],[435,53,414,76],[436,4,414,76],[436,8,414,45,"pattern"],[436,15,414,52],[436,18,414,52,"_ref12"],[436,24,414,52],[436,25,414,45,"pattern"],[436,32,414,52],[437,6,414,54,"routeName"],[437,15,414,63],[437,18,414,63,"_ref12"],[437,24,414,63],[437,25,414,54,"routeName"],[437,34,414,63],[438,6,414,65,"params"],[438,12,414,71],[438,15,414,71,"_ref12"],[438,21,414,71],[438,22,414,65,"params"],[438,28,414,71],[439,4,415,4],[439,8,415,10,"processedParams"],[439,23,415,25],[439,26,415,28],[440,6,415,30],[440,9,415,33,"params"],[441,4,415,40],[441,5,415,41],[442,4,416,4],[443,4,417,4],[443,8,417,10,"segments"],[443,16,417,18],[443,19,417,21,"pattern"],[443,26,417,28],[443,27,417,29,"split"],[443,32,417,34],[443,33,417,35],[443,36,417,38],[443,37,417,39],[444,4,418,4],[445,4,419,4,"segments"],[445,12,419,12],[445,13,420,9,"filter"],[445,19,420,15],[445,20,420,17,"segment"],[445,27,420,24],[445,31,420,29,"segment"],[445,38,420,36],[445,39,420,37,"startsWith"],[445,49,420,47],[445,50,420,48],[445,53,420,51],[445,54,420,52],[445,55,420,53],[445,56,421,9,"forEach"],[445,63,421,16],[445,64,421,18,"segment"],[445,71,421,25],[445,75,421,30],[446,6,422,8],[446,10,422,14,"name"],[446,14,422,18],[446,17,422,21,"getParamName"],[446,29,422,33],[446,30,422,34,"segment"],[446,37,422,41],[446,38,422,42],[447,6,423,8],[447,13,423,15,"processedParams"],[447,28,423,30],[447,29,423,31,"name"],[447,33,423,35],[447,34,423,36],[448,4,424,4],[448,5,424,5],[448,6,424,6],[449,4,425,4],[450,4,426,4],[450,8,426,8,"segments"],[450,16,426,16],[450,17,426,17,"some"],[450,21,426,21],[450,22,426,23,"segment"],[450,29,426,30],[450,33,426,35,"segment"],[450,40,426,42],[450,41,426,43,"startsWith"],[450,51,426,53],[450,52,426,54],[450,55,426,57],[450,56,426,58],[450,57,426,59],[450,59,426,61],[451,6,427,8],[452,6,428,8],[452,10,428,14,"name"],[452,14,428,18],[452,17,428,21],[452,18,428,22],[452,19,428,23],[452,21,428,25,"matchers_1"],[452,31,428,35],[452,32,428,36,"testNotFound"],[452,44,428,48],[452,46,428,50,"routeName"],[452,55,428,59],[452,56,428,60],[452,59,429,14],[452,70,429,25],[452,73,430,14],[452,74,430,15],[452,75,430,16],[452,77,430,18,"matchers_1"],[452,87,430,28],[452,88,430,29,"matchDeepDynamicRouteName"],[452,113,430,54],[452,115,430,56,"routeName"],[452,124,430,65],[452,125,430,66],[452,129,430,70,"routeName"],[452,138,430,79],[453,6,431,8],[453,13,431,15,"processedParams"],[453,28,431,30],[453,29,431,31,"name"],[453,33,431,35],[453,34,431,36],[454,4,432,4],[455,4,433,4],[455,11,433,11,"processedParams"],[455,26,433,26],[456,2,434,0],[457,2,435,0],[458,2,436,0],[458,11,436,9,"basicSanitizePath"],[458,28,436,26,"basicSanitizePath"],[458,29,436,27,"path"],[458,33,436,31],[458,35,436,33],[459,4,437,4],[460,4,438,4],[460,8,438,10,"simplifiedPath"],[460,22,438,24],[460,25,438,27,"path"],[460,29,438,31],[460,30,438,32,"replace"],[460,37,438,39],[460,38,438,40],[460,44,438,46],[460,46,438,48],[460,49,438,51],[460,50,438,52],[461,4,439,4],[461,8,439,8,"simplifiedPath"],[461,22,439,22],[461,23,439,23,"length"],[461,29,439,29],[461,33,439,33],[461,34,439,34],[461,36,439,36],[462,6,440,8],[462,13,440,15,"simplifiedPath"],[462,27,440,29],[463,4,441,4],[464,4,442,4],[465,4,443,4],[465,11,443,11,"simplifiedPath"],[465,25,443,25],[465,26,443,26,"replace"],[465,33,443,33],[465,34,443,34],[465,39,443,39],[465,41,443,41],[465,43,443,43],[465,44,443,44],[466,2,444,0],[467,2,445,0],[468,2,446,0],[469,2,447,0],[469,11,447,9,"isInvalidParams"],[469,26,447,24,"isInvalidParams"],[469,27,447,25,"params"],[469,33,447,31],[469,35,447,33],[470,4,448,4],[470,8,448,8],[470,9,448,9,"params"],[470,15,448,15],[470,17,448,17],[471,6,449,8],[471,13,449,15],[471,18,449,20],[472,4,450,4],[473,4,451,4],[473,8,451,8],[473,16,451,16],[473,20,451,20,"params"],[473,26,451,26],[473,30,451,30],[473,37,451,37,"params"],[473,43,451,43],[473,44,451,44,"params"],[473,50,451,50],[473,55,451,55],[473,63,451,63],[473,67,451,67],[473,68,451,68],[473,69,451,69,"params"],[473,75,451,75],[473,76,451,76,"params"],[473,82,451,82],[473,84,451,84],[474,6,452,8],[474,13,452,15],[474,17,452,19],[475,4,453,4],[476,4,454,4],[476,11,454,12],[476,20,454,21],[476,24,454,25,"params"],[476,30,454,31],[476,34,455,8],[476,41,455,15,"params"],[476,47,455,21],[476,48,455,22,"initial"],[476,55,455,29],[476,60,455,34],[476,69,455,43],[477,4,456,8],[478,4,457,8],[478,12,457,16],[478,16,457,20,"params"],[478,22,457,26],[479,2,458,0],[480,2,459,0],[480,6,459,6,"getParamName"],[480,18,459,18],[480,21,459,22,"pattern"],[480,28,459,29],[480,32,459,34,"pattern"],[480,39,459,41],[480,40,459,42,"replace"],[480,47,459,49],[480,48,459,50],[480,55,459,57],[480,57,459,59],[480,59,459,61],[480,60,459,62],[480,61,459,63,"replace"],[480,68,459,70],[480,69,459,71],[480,74,459,76],[480,76,459,78],[480,78,459,80],[480,79,459,81],[481,2,460,0],[481,6,460,6,"joinPaths"],[481,15,460,15],[481,18,460,18],[481,27,460,18,"joinPaths"],[481,28,460,18],[482,4,460,18],[482,13,460,18,"_len"],[482,17,460,18],[482,20,460,18,"arguments"],[482,29,460,18],[482,30,460,18,"length"],[482,36,460,18],[482,38,460,22,"paths"],[482,43,460,27],[482,50,460,27,"Array"],[482,55,460,27],[482,56,460,27,"_len"],[482,60,460,27],[482,63,460,27,"_key"],[482,67,460,27],[482,73,460,27,"_key"],[482,77,460,27],[482,80,460,27,"_len"],[482,84,460,27],[482,86,460,27,"_key"],[482,90,460,27],[483,6,460,22,"paths"],[483,11,460,27],[483,12,460,27,"_key"],[483,16,460,27],[483,20,460,27,"arguments"],[483,29,460,27],[483,30,460,27,"_key"],[483,34,460,27],[484,4,460,27],[485,4,460,27],[485,11,460,32],[485,13,460,34],[485,14,461,5,"concat"],[485,20,461,11],[485,21,461,12],[485,24,461,15,"paths"],[485,29,461,20],[485,30,461,21,"map"],[485,33,461,24],[485,34,461,26,"p"],[485,35,461,27],[485,39,461,32,"p"],[485,40,461,33],[485,41,461,34,"split"],[485,46,461,39],[485,47,461,40],[485,50,461,43],[485,51,461,44],[485,52,461,45],[485,53,461,46],[485,54,462,5,"filter"],[485,60,462,11],[485,61,462,12,"Boolean"],[485,68,462,19],[485,69,462,20],[485,70,463,5,"join"],[485,74,463,9],[485,75,463,10],[485,78,463,13],[485,79,463,14],[486,2,463,14],[487,2,464,0],[487,6,464,6,"createConfigItem"],[487,22,464,22],[487,25,464,25,"createConfigItem"],[487,26,464,26,"config"],[487,32,464,32],[487,34,464,34,"parentPattern"],[487,47,464,47],[487,52,464,52],[488,4,465,4],[488,8,465,8],[488,15,465,15,"config"],[488,21,465,21],[488,26,465,26],[488,34,465,34],[488,36,465,36],[489,6,466,8],[490,6,467,8],[490,10,467,14,"pattern"],[490,18,467,21],[490,21,467,24,"parentPattern"],[490,34,467,37],[490,37,467,40,"joinPaths"],[490,46,467,49],[490,47,467,50,"parentPattern"],[490,60,467,63],[490,62,467,65,"config"],[490,68,467,71],[490,69,467,72],[490,72,467,75,"config"],[490,78,467,81],[491,6,468,8],[491,13,468,15],[492,8,468,17,"pattern"],[492,15,468,24],[492,17,468,17,"pattern"],[493,6,468,25],[493,7,468,26],[494,4,469,4],[495,4,470,4],[495,8,470,8,"config"],[495,14,470,14],[495,15,470,15,"exact"],[495,20,470,20],[495,24,470,24,"config"],[495,30,470,30],[495,31,470,31,"path"],[495,35,470,35],[495,40,470,40,"undefined"],[495,49,470,49],[495,51,470,51],[496,6,471,8],[496,12,471,14],[496,16,471,18,"Error"],[496,21,471,23],[496,22,471,24],[496,172,471,174],[496,173,471,175],[497,4,472,4],[498,4,473,4],[499,4,474,4],[500,4,475,4],[500,8,475,10,"pattern"],[500,15,475,17],[500,18,475,20,"config"],[500,24,475,26],[500,25,475,27,"exact"],[500,30,475,32],[500,35,475,37],[500,39,475,41],[500,42,475,44,"joinPaths"],[500,51,475,53],[500,52,475,54,"parentPattern"],[500,65,475,67],[500,69,475,71],[500,71,475,73],[500,73,475,75,"config"],[500,79,475,81],[500,80,475,82,"path"],[500,84,475,86],[500,88,475,90],[500,90,475,92],[500,91,475,93],[500,94,475,96,"config"],[500,100,475,102],[500,101,475,103,"path"],[500,105,475,107],[500,109,475,111],[500,111,475,113],[501,4,476,4],[501,8,476,10,"screens"],[501,15,476,17],[501,18,476,20,"config"],[501,24,476,26],[501,25,476,27,"screens"],[501,32,476,34],[501,35,476,37,"createNormalizedConfigs"],[501,58,476,60],[501,59,476,61,"config"],[501,65,476,67],[501,66,476,68,"screens"],[501,73,476,75],[501,75,476,77,"pattern"],[501,82,476,84],[501,83,476,85],[501,86,476,88,"undefined"],[501,95,476,97],[502,4,477,4],[502,11,477,11],[503,6,478,8],[504,6,479,8,"pattern"],[504,13,479,15],[504,15,479,17,"pattern"],[504,22,479,24],[504,24,479,26,"split"],[504,29,479,31],[504,30,479,32],[504,33,479,35],[504,34,479,36],[504,35,479,37,"filter"],[504,41,479,43],[504,42,479,44,"Boolean"],[504,49,479,51],[504,50,479,52],[504,51,479,53,"join"],[504,55,479,57],[504,56,479,58],[504,59,479,61],[504,60,479,62],[505,6,480,8,"stringify"],[505,15,480,17],[505,17,480,19,"config"],[505,23,480,25],[505,24,480,26,"stringify"],[505,33,480,35],[506,6,481,8,"screens"],[506,13,481,15],[507,6,482,8,"initialRouteName"],[507,22,482,24],[507,24,482,26,"config"],[507,30,482,32],[507,31,482,33,"initialRouteName"],[508,4,483,4],[508,5,483,5],[509,2,484,0],[509,3,484,1],[510,2,485,0],[510,6,485,6,"createNormalizedConfigs"],[510,29,485,29],[510,32,485,32,"createNormalizedConfigs"],[510,33,485,33,"options"],[510,40,485,40],[510,42,485,42,"pattern"],[510,49,485,49],[510,54,485,54,"Object"],[510,60,485,60],[510,61,485,61,"fromEntries"],[510,72,485,72],[510,73,485,73,"Object"],[510,79,485,79],[510,80,485,80,"entries"],[510,87,485,87],[510,88,485,88,"options"],[510,95,485,95],[510,96,485,96],[510,97,485,97,"map"],[510,100,485,100],[510,101,485,101,"_ref13"],[510,107,485,101],[511,4,485,101],[511,8,485,101,"_ref14"],[511,14,485,101],[511,17,485,101,"_slicedToArray"],[511,31,485,101],[511,32,485,101,"_ref13"],[511,38,485,101],[512,6,485,103,"name"],[512,10,485,107],[512,13,485,107,"_ref14"],[512,19,485,107],[513,6,485,109,"c"],[513,7,485,110],[513,10,485,110,"_ref14"],[513,16,485,110],[514,4,485,110],[514,11,485,116],[514,12,485,117,"name"],[514,16,485,121],[514,18,485,123,"createConfigItem"],[514,34,485,139],[514,35,485,140,"c"],[514,36,485,141],[514,38,485,143,"pattern"],[514,45,485,150],[514,46,485,151],[514,47,485,152],[515,2,485,152],[515,4,485,153],[515,5,485,154],[516,2,486,0],[516,11,486,9,"appendBaseUrl"],[516,24,486,22,"appendBaseUrl"],[516,25,486,23,"path"],[516,29,486,27],[516,31,486,66],[517,4,486,66],[517,8,486,29,"baseUrl"],[517,15,486,36],[517,18,486,36,"arguments"],[517,27,486,36],[517,28,486,36,"length"],[517,34,486,36],[517,42,486,36,"arguments"],[517,51,486,36],[517,59,486,36,"undefined"],[517,68,486,36],[517,71,486,36,"arguments"],[517,80,486,36],[518,4,487,4],[518,8,487,8,"process"],[518,15,487,15],[518,16,487,16,"env"],[518,19,487,19],[518,20,487,20,"NODE_ENV"],[518,28,487,28],[518,33,487,33],[518,46,487,46],[518,48,487,48],[519,6,488,8],[519,10,488,12,"baseUrl"],[519,17,488,19],[519,19,488,21],[520,8,489,12],[520,15,489,19],[520,19,489,23,"baseUrl"],[520,26,489,30],[520,27,489,31,"replace"],[520,34,489,38],[520,35,489,39],[520,41,489,45],[520,43,489,47],[520,45,489,49],[520,46,489,50],[520,47,489,51,"replace"],[520,54,489,58],[520,55,489,59],[520,60,489,64],[520,62,489,66],[520,64,489,68],[520,65,489,69],[520,68,489,72,"path"],[520,72,489,76],[520,74,489,78],[521,6,490,8],[522,4,491,4],[523,4,492,4],[523,11,492,11,"path"],[523,15,492,15],[524,2,493,0],[525,2,494,0,"exports"],[525,9,494,7],[525,10,494,8,"appendBaseUrl"],[525,23,494,21],[525,26,494,24,"appendBaseUrl"],[525,39,494,37],[526,0,494,38],[526,3]],"functionMap":{"names":["<global>","getActiveRoute","createFakeState","segmentMatchesConvention","encodeURIComponentPreservingBrackets","getPathFromState","formatToList","items.map$argument_0","validatePathConfig","Object.keys.filter$argument_0","Object.entries.forEach$argument_0","getPathDataFromState","processParamsWithUserSettings","Object.entries.map$argument_0","deepEqual","walkConfigItems","getPathFromResolvedState","Object.entries.flatMap$argument_0","values.map$argument_0","decodeParams","value.map$argument_0","getPathWithConventionsCollapsed","segments.map$argument_0","segments.map.map$argument_0","getParamsWithConventionsCollapsed","segments.filter$argument_0","segments.filter.forEach$argument_0","segments.some$argument_0","basicSanitizePath","isInvalidParams","getParamName","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","appendBaseUrl"],"mappings":"AAA;uBCK;CDW;AEC;CFgB;AGC;CHK;AIC;CJE;AK8B;CLE;qBME,qBC,mBD,YN;AQC;mDCK,iCD;+CEK;SFI;CRE;AWC;CXa;AYE;yDCE;KDc;CZC;AcC;Cd6B;AeE;CfyG;AgBC;yFC+C;8DCC,uBD;iBDC;ChBe;AmBC;wCCQ,4BD;CnBW;AqBE;aCG;KDuD;aEC,cF;CrBE;AwBE;gBCM,oCD;iBEC;KFG;sBGE,oCH;CxBQ;A4BE;C5BQ;A6BG;C7BW;qB8BC,4D9B;kB+BC;yBCC,mBD;c/BE;yBiCC;CjCoB;gCkCC,qErB,mDqB,ElC;AmCC;CnCO"}},"type":"js/module"}]}