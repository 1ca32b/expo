{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":175,"column":32,"index":7839}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":175,"column":32,"index":7839}}],"key":"8I802z/QkQYw0PV6ZCqhBNDwn0Q="}},{"name":"expo-modules-core","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"ka0FS6s7ZmvhJq+hEjGkLLrGpyo="}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"KK+yT+oF8ktP56kCbQmPR1OEhiQ="}},{"name":"./Font.types","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"K4Hyp3e8pgPTo4cphMtfc9wmlHI="}},{"name":"./FontLoader","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"2OEhiAaqBQmRJPh1zT+UzMquCjU="}},{"name":"./memory","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"20DdMTJ0uD+COOCv6dU8SL9WsuY="}},{"name":"./server","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"wlSMlCoN7PgGuESmqgTQx6Vo3JE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _Font.FontDisplay;\n    }\n  });\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.processFontFamily = processFontFamily;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  var _asyncToGenerator2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/asyncToGenerator\"));\n  var _expoModulesCore = _$$_REQUIRE(_dependencyMap[2], \"expo-modules-core\");\n  var _ExpoFontLoader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./ExpoFontLoader\"));\n  var _Font = _$$_REQUIRE(_dependencyMap[4], \"./Font.types\");\n  var _FontLoader = _$$_REQUIRE(_dependencyMap[5], \"./FontLoader\");\n  var _memory = _$$_REQUIRE(_dependencyMap[6], \"./memory\");\n  var _server = _$$_REQUIRE(_dependencyMap[7], \"./server\");\n  // @needsAudit\n  /**\n   * Used to transform font family names to the scoped name. This does not need to\n   * be called in standalone or bare apps, but it will return unscoped font family\n   * names if it is called in those contexts.\n   *\n   * @param fontFamily Name of font to process.\n   * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n   * @deprecated This method is not needed anymore and will be removed in the future.\n   */\n  function processFontFamily(fontFamily) {\n    return fontFamily;\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      return (0, _memory.isLoadedInCache)(fontFamily) || !!_ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return _ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(name => (0, _server.registerStaticFont)(name, fontMap[name]));\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      // we consult the native module to see if the font is already loaded\n      // this is slower than checking the cache but can help avoid loading the same font n times\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          (0, _memory.markLoaded)(fontFamily);\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {\n      if (!_ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      (0, _memory.purgeCache)();\n      yield _ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {\n      if (!_ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      if (!fontFamily) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      yield _ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":213,"map":[[20,2,1,0],[20,6,1,0,"_expoModulesCore"],[20,22,1,0],[20,25,1,0,"_$$_REQUIRE"],[20,36,1,0],[20,37,1,0,"_dependencyMap"],[20,51,1,0],[21,2,2,0],[21,6,2,0,"_ExpoFontLoader"],[21,21,2,0],[21,24,2,0,"_interopRequireDefault"],[21,46,2,0],[21,47,2,0,"_$$_REQUIRE"],[21,58,2,0],[21,59,2,0,"_dependencyMap"],[21,73,2,0],[22,2,3,0],[22,6,3,0,"_Font"],[22,11,3,0],[22,14,3,0,"_$$_REQUIRE"],[22,25,3,0],[22,26,3,0,"_dependencyMap"],[22,40,3,0],[23,2,4,0],[23,6,4,0,"_FontLoader"],[23,17,4,0],[23,20,4,0,"_$$_REQUIRE"],[23,31,4,0],[23,32,4,0,"_dependencyMap"],[23,46,4,0],[24,2,5,0],[24,6,5,0,"_memory"],[24,13,5,0],[24,16,5,0,"_$$_REQUIRE"],[24,27,5,0],[24,28,5,0,"_dependencyMap"],[24,42,5,0],[25,2,6,0],[25,6,6,0,"_server"],[25,13,6,0],[25,16,6,0,"_$$_REQUIRE"],[25,27,6,0],[25,28,6,0,"_dependencyMap"],[25,42,6,0],[26,2,7,0],[27,2,8,0],[28,0,9,0],[29,0,10,0],[30,0,11,0],[31,0,12,0],[32,0,13,0],[33,0,14,0],[34,0,15,0],[35,0,16,0],[36,2,17,7],[36,11,17,16,"processFontFamily"],[36,28,17,33,"processFontFamily"],[36,29,17,34,"fontFamily"],[36,39,17,44],[36,41,17,46],[37,4,18,4],[37,11,18,11,"fontFamily"],[37,21,18,21],[38,2,19,0],[39,2,20,0],[40,2,21,0],[41,0,22,0],[42,0,23,0],[43,0,24,0],[44,0,25,0],[45,0,26,0],[46,2,27,7],[46,11,27,16,"isLoaded"],[46,19,27,24,"isLoaded"],[46,20,27,25,"fontFamily"],[46,30,27,35],[46,32,27,37],[47,4,28,4],[47,8,28,8,"Platform"],[47,33,28,16],[47,34,28,17,"OS"],[47,36,28,19],[47,41,28,24],[47,46,28,29],[47,48,28,31],[48,6,29,8],[48,13,29,15],[48,17,29,15,"isLoadedInCache"],[48,40,29,30],[48,42,29,31,"fontFamily"],[48,52,29,41],[48,53,29,42],[48,57,29,46],[48,58,29,47],[48,59,29,48,"ExpoFontLoader"],[48,82,29,62],[48,83,29,63,"isLoaded"],[48,91,29,71],[48,92,29,72,"fontFamily"],[48,102,29,82],[48,103,29,83],[49,4,30,4],[50,4,31,4],[50,11,31,11],[50,15,31,11,"isLoadedNative"],[50,37,31,25],[50,39,31,26,"fontFamily"],[50,49,31,36],[50,50,31,37],[51,2,32,0],[52,2,33,0],[53,0,34,0],[54,0,35,0],[55,0,36,0],[56,0,37,0],[57,0,38,0],[58,2,39,7],[58,11,39,16,"getLoadedFonts"],[58,25,39,30,"getLoadedFonts"],[58,26,39,30],[58,28,39,33],[59,4,40,4],[59,11,40,11,"ExpoFontLoader"],[59,34,40,25],[59,35,40,26,"getLoadedFonts"],[59,49,40,40],[59,50,40,41],[59,51,40,42],[60,2,41,0],[61,2,42,0],[62,2,43,0],[63,0,44,0],[64,0,45,0],[65,0,46,0],[66,0,47,0],[67,0,48,0],[68,2,49,7],[68,11,49,16,"isLoading"],[68,20,49,25,"isLoading"],[68,21,49,26,"fontFamily"],[68,31,49,36],[68,33,49,38],[69,4,50,4],[69,11,50,11,"fontFamily"],[69,21,50,21],[69,25,50,25,"loadPromises"],[69,45,50,37],[70,2,51,0],[71,2,52,0],[72,2,53,0],[73,0,54,0],[74,0,55,0],[75,0,56,0],[76,0,57,0],[77,0,58,0],[78,0,59,0],[79,0,60,0],[80,0,61,0],[81,0,62,0],[82,0,63,0],[83,0,64,0],[84,0,65,0],[85,0,66,0],[86,2,67,7],[86,11,67,16,"loadAsync"],[86,20,67,25,"loadAsync"],[86,21,67,26,"fontFamilyOrFontMap"],[86,40,67,45],[86,42,67,47,"source"],[86,48,67,53],[86,50,67,55],[87,4,68,4],[88,4,69,4],[89,4,70,4],[90,4,71,4],[90,8,71,10,"isServer"],[90,16,71,18],[90,19,71,21,"Platform"],[90,44,71,29],[90,45,71,30,"OS"],[90,47,71,32],[90,52,71,37],[90,57,71,42],[90,61,71,46],[90,68,71,53,"window"],[90,74,71,59],[90,79,71,64],[90,90,71,75],[91,4,72,4],[91,8,72,8],[91,15,72,15,"fontFamilyOrFontMap"],[91,34,72,34],[91,39,72,39],[91,47,72,47],[91,49,72,49],[92,6,73,8],[92,10,73,12,"source"],[92,16,73,18],[92,18,73,20],[93,8,74,12],[93,15,74,19,"Promise"],[93,22,74,26],[93,23,74,27,"reject"],[93,29,74,33],[93,30,74,34],[93,34,74,38,"CodedError"],[93,61,74,48],[93,62,74,49],[93,76,74,63],[93,78,74,65],[93,132,74,119,"source"],[93,138,74,125],[93,244,74,231],[93,245,74,232],[93,246,74,233],[94,6,75,8],[95,6,76,8],[95,10,76,14,"fontMap"],[95,17,76,21],[95,20,76,24,"fontFamilyOrFontMap"],[95,39,76,43],[96,6,77,8],[96,10,77,14,"names"],[96,15,77,19],[96,18,77,22,"Object"],[96,24,77,28],[96,25,77,29,"keys"],[96,29,77,33],[96,30,77,34,"fontMap"],[96,37,77,41],[96,38,77,42],[97,6,78,8],[97,10,78,12,"isServer"],[97,18,78,20],[97,20,78,22],[98,8,79,12,"names"],[98,13,79,17],[98,14,79,18,"map"],[98,17,79,21],[98,18,79,23,"name"],[98,22,79,27],[98,26,79,32],[98,30,79,32,"registerStaticFont"],[98,56,79,50],[98,58,79,51,"name"],[98,62,79,55],[98,64,79,57,"fontMap"],[98,71,79,64],[98,72,79,65,"name"],[98,76,79,69],[98,77,79,70],[98,78,79,71],[98,79,79,72],[99,8,80,12],[99,15,80,19,"Promise"],[99,22,80,26],[99,23,80,27,"resolve"],[99,30,80,34],[99,31,80,35],[99,32,80,36],[100,6,81,8],[101,6,82,8],[101,13,82,15,"Promise"],[101,20,82,22],[101,21,82,23,"all"],[101,24,82,26],[101,25,82,27,"names"],[101,30,82,32],[101,31,82,33,"map"],[101,34,82,36],[101,35,82,38,"name"],[101,39,82,42],[101,43,82,47,"loadFontInNamespaceAsync"],[101,67,82,71],[101,68,82,72,"name"],[101,72,82,76],[101,74,82,78,"fontMap"],[101,81,82,85],[101,82,82,86,"name"],[101,86,82,90],[101,87,82,91],[101,88,82,92],[101,89,82,93],[101,90,82,94],[101,91,82,95,"then"],[101,95,82,99],[101,96,82,100],[101,102,82,106],[101,103,82,108],[101,104,82,109],[101,105,82,110],[102,4,83,4],[103,4,84,4],[103,8,84,8,"isServer"],[103,16,84,16],[103,18,84,18],[104,6,85,8],[104,10,85,8,"registerStaticFont"],[104,36,85,26],[104,38,85,27,"fontFamilyOrFontMap"],[104,57,85,46],[104,59,85,48,"source"],[104,65,85,54],[104,66,85,55],[105,6,86,8],[105,13,86,15,"Promise"],[105,20,86,22],[105,21,86,23,"resolve"],[105,28,86,30],[105,29,86,31],[105,30,86,32],[106,4,87,4],[107,4,88,4],[107,11,88,11,"loadFontInNamespaceAsync"],[107,35,88,35],[107,36,88,36,"fontFamilyOrFontMap"],[107,55,88,55],[107,57,88,57,"source"],[107,63,88,63],[107,64,88,64],[108,2,89,0],[109,2,89,1],[109,11,90,15,"loadFontInNamespaceAsync"],[109,35,90,39,"loadFontInNamespaceAsync"],[109,36,90,39,"_x"],[109,38,90,39],[109,40,90,39,"_x2"],[109,43,90,39],[110,4,90,39],[110,11,90,39,"_loadFontInNamespaceAsync"],[110,36,90,39],[110,37,90,39,"apply"],[110,42,90,39],[110,49,90,39,"arguments"],[110,58,90,39],[111,2,90,39],[111,4,118,0],[112,2,119,0],[113,0,120,0],[114,0,121,0],[115,0,122,0],[116,2,119,0],[116,11,119,0,"_loadFontInNamespaceAsync"],[116,37,119,0],[117,4,119,0,"_loadFontInNamespaceAsync"],[117,29,119,0],[117,36,119,0,"_asyncToGenerator2"],[117,54,119,0],[117,55,119,0,"default"],[117,62,119,0],[117,64,90,0],[117,75,90,40,"fontFamily"],[117,85,90,50],[117,87,90,52,"source"],[117,93,90,58],[117,95,90,60],[118,6,91,4],[118,10,91,8],[118,11,91,9,"source"],[118,17,91,15],[118,19,91,17],[119,8,92,8],[119,14,92,14],[119,18,92,18,"CodedError"],[119,45,92,28],[119,46,92,29],[119,63,92,46],[119,65,92,48],[119,114,92,97,"fontFamily"],[119,124,92,107],[119,130,92,113,"source"],[119,136,92,119],[119,206,92,189,"fontFamily"],[119,216,92,199],[119,219,92,202],[119,220,92,203],[120,6,93,4],[121,6,94,4],[122,6,95,4],[123,6,96,4],[123,10,96,8,"isLoaded"],[123,18,96,16],[123,19,96,17,"fontFamily"],[123,29,96,27],[123,30,96,28],[123,32,96,30],[124,8,97,8],[125,6,98,4],[126,6,99,4],[126,10,99,8,"loadPromises"],[126,30,99,20],[126,31,99,21,"hasOwnProperty"],[126,45,99,35],[126,46,99,36,"fontFamily"],[126,56,99,46],[126,57,99,47],[126,59,99,49],[127,8,100,8],[127,15,100,15,"loadPromises"],[127,35,100,27],[127,36,100,28,"fontFamily"],[127,46,100,38],[127,47,100,39],[128,6,101,4],[129,6,102,4],[130,6,103,4],[131,6,104,4],[132,6,105,4],[133,6,106,4],[133,10,106,10,"asset"],[133,15,106,15],[133,18,106,18],[133,22,106,18,"getAssetForSource"],[133,51,106,35],[133,53,106,36,"source"],[133,59,106,42],[133,60,106,43],[134,6,107,4,"loadPromises"],[134,26,107,16],[134,27,107,17,"fontFamily"],[134,37,107,27],[134,38,107,28],[134,41,107,31],[134,45,107,31,"_asyncToGenerator2"],[134,63,107,31],[134,64,107,31,"default"],[134,71,107,31],[134,73,107,32],[134,86,107,44],[135,8,108,8],[135,12,108,12],[136,10,109,12],[136,16,109,18],[136,20,109,18,"loadSingleFontAsync"],[136,51,109,37],[136,53,109,38,"fontFamily"],[136,63,109,48],[136,65,109,50,"asset"],[136,70,109,55],[136,71,109,56],[137,10,110,12],[137,14,110,12,"markLoaded"],[137,32,110,22],[137,34,110,23,"fontFamily"],[137,44,110,33],[137,45,110,34],[138,8,111,8],[138,9,111,9],[138,18,112,16],[139,10,113,12],[139,17,113,19,"loadPromises"],[139,37,113,31],[139,38,113,32,"fontFamily"],[139,48,113,42],[139,49,113,43],[140,8,114,8],[141,6,115,4],[141,7,115,5],[141,9,115,7],[141,10,115,8],[142,6,116,4],[142,12,116,10,"loadPromises"],[142,32,116,22],[142,33,116,23,"fontFamily"],[142,43,116,33],[142,44,116,34],[143,4,117,0],[143,5,117,1],[144,4,117,1],[144,11,117,1,"_loadFontInNamespaceAsync"],[144,36,117,1],[144,37,117,1,"apply"],[144,42,117,1],[144,49,117,1,"arguments"],[144,58,117,1],[145,2,117,1],[146,2,117,1],[146,11,123,22,"unloadAllAsync"],[146,25,123,36,"unloadAllAsync"],[146,26,123,36],[147,4,123,36],[147,11,123,36,"_unloadAllAsync"],[147,26,123,36],[147,27,123,36,"apply"],[147,32,123,36],[147,39,123,36,"arguments"],[147,48,123,36],[148,2,123,36],[148,4,133,0],[149,2,134,0],[150,0,135,0],[151,0,136,0],[152,0,137,0],[153,0,138,0],[154,0,139,0],[155,0,140,0],[156,0,141,0],[157,0,142,0],[158,2,134,0],[158,11,134,0,"_unloadAllAsync"],[158,27,134,0],[159,4,134,0,"_unloadAllAsync"],[159,19,134,0],[159,26,134,0,"_asyncToGenerator2"],[159,44,134,0],[159,45,134,0,"default"],[159,52,134,0],[159,54,123,7],[159,67,123,39],[160,6,124,4],[160,10,124,8],[160,11,124,9,"ExpoFontLoader"],[160,34,124,23],[160,35,124,24,"unloadAllAsync"],[160,49,124,38],[160,51,124,40],[161,8,125,8],[161,14,125,14],[161,18,125,18,"UnavailabilityError"],[161,54,125,37],[161,55,125,38],[161,66,125,49],[161,68,125,51],[161,84,125,67],[161,85,125,68],[162,6,126,4],[163,6,127,4],[163,10,127,8,"Object"],[163,16,127,14],[163,17,127,15,"keys"],[163,21,127,19],[163,22,127,20,"loadPromises"],[163,42,127,32],[163,43,127,33],[163,44,127,34,"length"],[163,50,127,40],[163,52,127,42],[164,8,128,8],[164,14,128,14],[164,18,128,18,"CodedError"],[164,45,128,28],[164,46,128,29],[164,58,128,41],[164,60,128,43],[164,112,128,95,"Object"],[164,118,128,101],[164,119,128,102,"keys"],[164,123,128,106],[164,124,128,107,"loadPromises"],[164,144,128,119],[164,145,128,120],[164,146,128,121,"join"],[164,150,128,125],[164,151,128,126],[164,155,128,130],[164,156,128,131],[164,158,128,133],[164,159,128,134],[165,6,129,4],[166,6,130,4],[166,10,130,4,"purgeCache"],[166,28,130,14],[166,30,130,15],[166,31,130,16],[167,6,131,4],[167,12,131,10,"ExpoFontLoader"],[167,35,131,24],[167,36,131,25,"unloadAllAsync"],[167,50,131,39],[167,51,131,40],[167,52,131,41],[168,4,132,0],[168,5,132,1],[169,4,132,1],[169,11,132,1,"_unloadAllAsync"],[169,26,132,1],[169,27,132,1,"apply"],[169,32,132,1],[169,39,132,1,"arguments"],[169,48,132,1],[170,2,132,1],[171,2,132,1],[171,11,143,22,"unloadAsync"],[171,22,143,33,"unloadAsync"],[171,23,143,33,"_x3"],[171,26,143,33],[171,28,143,33,"_x4"],[171,31,143,33],[172,4,143,33],[172,11,143,33,"_unloadAsync"],[172,23,143,33],[172,24,143,33,"apply"],[172,29,143,33],[172,36,143,33,"arguments"],[172,45,143,33],[173,2,143,33],[174,2,143,33],[174,11,143,33,"_unloadAsync"],[174,24,143,33],[175,4,143,33,"_unloadAsync"],[175,16,143,33],[175,23,143,33,"_asyncToGenerator2"],[175,41,143,33],[175,42,143,33,"default"],[175,49,143,33],[175,51,143,7],[175,62,143,34,"fontFamilyOrFontMap"],[175,81,143,53],[175,83,143,55,"options"],[175,90,143,62],[175,92,143,64],[176,6,144,4],[176,10,144,8],[176,11,144,9,"ExpoFontLoader"],[176,34,144,23],[176,35,144,24,"unloadAsync"],[176,46,144,35],[176,48,144,37],[177,8,145,8],[177,14,145,14],[177,18,145,18,"UnavailabilityError"],[177,54,145,37],[177,55,145,38],[177,66,145,49],[177,68,145,51],[177,81,145,64],[177,82,145,65],[178,6,146,4],[179,6,147,4],[179,10,147,8],[179,17,147,15,"fontFamilyOrFontMap"],[179,36,147,34],[179,41,147,39],[179,49,147,47],[179,51,147,49],[180,8,148,8],[180,12,148,12,"options"],[180,19,148,19],[180,21,148,21],[181,10,149,12],[181,16,149,18],[181,20,149,22,"CodedError"],[181,47,149,32],[181,48,149,33],[181,62,149,47],[181,64,149,49],[181,119,149,104,"options"],[181,126,149,111],[181,234,149,219],[181,235,149,220],[182,8,150,8],[183,8,151,8],[183,12,151,14,"fontMap"],[183,19,151,21],[183,22,151,24,"fontFamilyOrFontMap"],[183,41,151,43],[184,8,152,8],[184,12,152,14,"names"],[184,17,152,19],[184,20,152,22,"Object"],[184,26,152,28],[184,27,152,29,"keys"],[184,31,152,33],[184,32,152,34,"fontMap"],[184,39,152,41],[184,40,152,42],[185,8,153,8],[185,14,153,14,"Promise"],[185,21,153,21],[185,22,153,22,"all"],[185,25,153,25],[185,26,153,26,"names"],[185,31,153,31],[185,32,153,32,"map"],[185,35,153,35],[185,36,153,37,"name"],[185,40,153,41],[185,44,153,46,"unloadFontInNamespaceAsync"],[185,70,153,72],[185,71,153,73,"name"],[185,75,153,77],[185,77,153,79,"fontMap"],[185,84,153,86],[185,85,153,87,"name"],[185,89,153,91],[185,90,153,92],[185,91,153,93],[185,92,153,94],[185,93,153,95],[186,8,154,8],[187,6,155,4],[188,6,156,4],[188,19,156,17,"unloadFontInNamespaceAsync"],[188,45,156,43],[188,46,156,44,"fontFamilyOrFontMap"],[188,65,156,63],[188,67,156,65,"options"],[188,74,156,72],[188,75,156,73],[189,4,157,0],[189,5,157,1],[190,4,157,1],[190,11,157,1,"_unloadAsync"],[190,23,157,1],[190,24,157,1,"apply"],[190,29,157,1],[190,36,157,1,"arguments"],[190,45,157,1],[191,2,157,1],[192,2,157,1],[192,11,158,15,"unloadFontInNamespaceAsync"],[192,37,158,41,"unloadFontInNamespaceAsync"],[192,38,158,41,"_x5"],[192,41,158,41],[192,43,158,41,"_x6"],[192,46,158,41],[193,4,158,41],[193,11,158,41,"_unloadFontInNamespaceAsync"],[193,38,158,41],[193,39,158,41,"apply"],[193,44,158,41],[193,51,158,41,"arguments"],[193,60,158,41],[194,2,158,41],[195,2,158,41],[195,11,158,41,"_unloadFontInNamespaceAsync"],[195,39,158,41],[196,4,158,41,"_unloadFontInNamespaceAsync"],[196,31,158,41],[196,38,158,41,"_asyncToGenerator2"],[196,56,158,41],[196,57,158,41,"default"],[196,64,158,41],[196,66,158,0],[196,77,158,42,"fontFamily"],[196,87,158,52],[196,89,158,54,"options"],[196,96,158,61],[196,98,158,63],[197,6,159,4],[197,10,159,8],[197,11,159,9,"isLoaded"],[197,19,159,17],[197,20,159,18,"fontFamily"],[197,30,159,28],[197,31,159,29],[197,33,159,31],[198,8,160,8],[199,6,161,4],[199,7,161,5],[199,13,162,9],[200,8,163,8],[200,12,163,8,"purgeFontFamilyFromCache"],[200,44,163,32],[200,46,163,33,"fontFamily"],[200,56,163,43],[200,57,163,44],[201,6,164,4],[202,6,165,4],[203,6,166,4],[204,6,167,4],[205,6,168,4],[206,6,169,4],[206,10,169,8],[206,11,169,9,"fontFamily"],[206,21,169,19],[206,23,169,21],[207,8,170,8],[207,14,170,14],[207,18,170,18,"CodedError"],[207,45,170,28],[207,46,170,29],[207,63,170,46],[207,65,170,48],[207,94,170,77],[207,95,170,78],[208,6,171,4],[209,6,172,4],[209,12,172,10,"ExpoFontLoader"],[209,35,172,24],[209,36,172,25,"unloadAsync"],[209,47,172,36],[209,48,172,37,"fontFamily"],[209,58,172,47],[209,60,172,49,"options"],[209,67,172,56],[209,68,172,57],[210,4,173,0],[210,5,173,1],[211,4,173,1],[211,11,173,1,"_unloadFontInNamespaceAsync"],[211,38,173,1],[211,39,173,1,"apply"],[211,44,173,1],[211,51,173,1,"arguments"],[211,60,173,1],[212,2,173,1],[213,0,173,1],[213,3]],"functionMap":{"names":["<global>","processFontFamily","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCgB;CDE;OEQ;CFK;OGO;CHE;OIQ;CJE;OKgB;sBCY,iDD;qCCG,uDD,QE,SF;CLO;AQC;gCCiB;KDQ;CRE;OUM;CVS;OWW;oCLU,yDK;CXI;AYC;CZe"}},"type":"js/module"}]}