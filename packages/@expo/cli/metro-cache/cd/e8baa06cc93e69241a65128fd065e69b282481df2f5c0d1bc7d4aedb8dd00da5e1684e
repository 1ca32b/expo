{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":33,"column":0,"index":1010}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"exportNames":["*"],"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":33,"column":0,"index":1010}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = validatePathConfig;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var formatToList = items => items.map(key => `- ${key}`).join('\\n');\n  function validatePathConfig(config) {\n    var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var validKeys = ['initialRouteName', 'screens'];\n    if (!root) {\n      validKeys.push('path', 'exact', 'stringify', 'parse');\n    }\n    var invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n    if (invalidKeys.length) {\n      throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n    }\n    if (config.screens) {\n      Object.entries(config.screens).forEach(_ref => {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n          _ = _ref2[0],\n          value = _ref2[1];\n        if (typeof value !== 'string') {\n          validatePathConfig(value, false);\n        }\n      });\n    }\n  }\n});","lineCount":30,"map":[[8,2,1,0],[8,6,1,6,"formatToList"],[8,18,1,18],[8,21,1,22,"items"],[8,26,1,37],[8,30,2,2,"items"],[8,35,2,7],[8,36,2,8,"map"],[8,39,2,11],[8,40,2,13,"key"],[8,43,2,16],[8,47,2,21],[8,52,2,26,"key"],[8,55,2,29],[8,57,2,31],[8,58,2,32],[8,59,2,33,"join"],[8,63,2,37],[8,64,2,38],[8,68,2,42],[8,69,2,43],[9,2,4,15],[9,11,4,24,"validatePathConfig"],[9,29,4,42,"validatePathConfig"],[9,30,4,43,"config"],[9,36,4,54],[9,38,4,69],[10,4,4,69],[10,8,4,56,"root"],[10,12,4,60],[10,15,4,60,"arguments"],[10,24,4,60],[10,25,4,60,"length"],[10,31,4,60],[10,39,4,60,"arguments"],[10,48,4,60],[10,56,4,60,"undefined"],[10,65,4,60],[10,68,4,60,"arguments"],[10,77,4,60],[10,83,4,63],[10,87,4,67],[11,4,5,2],[11,8,5,8,"validKeys"],[11,17,5,17],[11,20,5,20],[11,21,5,21],[11,39,5,39],[11,41,5,41],[11,50,5,50],[11,51,5,51],[12,4,7,2],[12,8,7,6],[12,9,7,7,"root"],[12,13,7,11],[12,15,7,13],[13,6,8,4,"validKeys"],[13,15,8,13],[13,16,8,14,"push"],[13,20,8,18],[13,21,8,19],[13,27,8,25],[13,29,8,27],[13,36,8,34],[13,38,8,36],[13,49,8,47],[13,51,8,49],[13,58,8,56],[13,59,8,57],[14,4,9,2],[15,4,11,2],[15,8,11,8,"invalidKeys"],[15,19,11,19],[15,22,11,22,"Object"],[15,28,11,28],[15,29,11,29,"keys"],[15,33,11,33],[15,34,11,34,"config"],[15,40,11,40],[15,41,11,41],[15,42,11,42,"filter"],[15,48,11,48],[15,49,12,5,"key"],[15,52,12,8],[15,56,12,13],[15,57,12,14,"validKeys"],[15,66,12,23],[15,67,12,24,"includes"],[15,75,12,32],[15,76,12,33,"key"],[15,79,12,36],[15,80,13,2],[15,81,13,3],[16,4,15,2],[16,8,15,6,"invalidKeys"],[16,19,15,17],[16,20,15,18,"length"],[16,26,15,24],[16,28,15,26],[17,6,16,4],[17,12,16,10],[17,16,16,14,"Error"],[17,21,16,19],[17,22,17,6],[17,73,17,57,"formatToList"],[17,85,17,69],[17,86,18,8,"invalidKeys"],[17,97,19,6],[17,98,19,7],[17,215,19,124,"formatToList"],[17,227,19,136],[17,228,20,8,"validKeys"],[17,237,21,6],[17,238,21,7],[17,358,22,4],[17,359,22,5],[18,4,23,2],[19,4,25,2],[19,8,25,6,"config"],[19,14,25,12],[19,15,25,13,"screens"],[19,22,25,20],[19,24,25,22],[20,6,26,4,"Object"],[20,12,26,10],[20,13,26,11,"entries"],[20,20,26,18],[20,21,26,19,"config"],[20,27,26,25],[20,28,26,26,"screens"],[20,35,26,33],[20,36,26,34],[20,37,26,35,"forEach"],[20,44,26,42],[20,45,26,43,"_ref"],[20,49,26,43],[20,53,26,59],[21,8,26,59],[21,12,26,59,"_ref2"],[21,17,26,59],[21,24,26,59,"_slicedToArray2"],[21,39,26,59],[21,40,26,59,"default"],[21,47,26,59],[21,49,26,59,"_ref"],[21,53,26,59],[22,10,26,45,"_"],[22,11,26,46],[22,14,26,46,"_ref2"],[22,19,26,46],[23,10,26,48,"value"],[23,15,26,53],[23,18,26,53,"_ref2"],[23,23,26,53],[24,8,27,6],[24,12,27,10],[24,19,27,17,"value"],[24,24,27,22],[24,29,27,27],[24,37,27,35],[24,39,27,37],[25,10,28,8,"validatePathConfig"],[25,28,28,26],[25,29,28,27,"value"],[25,34,28,32],[25,36,28,34],[25,41,28,39],[25,42,28,40],[26,8,29,6],[27,6,30,4],[27,7,30,5],[27,8,30,6],[28,4,31,2],[29,2,32,0],[30,0,32,1],[30,3]],"functionMap":{"names":["<global>","formatToList","items.map$argument_0","validatePathConfig","Object.keys.filter$argument_0","Object.entries.forEach$argument_0"],"mappings":"AAA,qBC;YCC,mBD,YD;eGE;ICQ,iCD;2CEc;KFI;CHE"}},"type":"js/module"}]}