{"version":3,"file":"useScrollOnSelect.js","sourceRoot":"","sources":["../../../src/ui/NativeBottomTabs/useScrollOnSelect.tsx"],"names":[],"mappings":";;AAYA,8CA6CC;AAzDD,yDAAiE;AACjE,iCAAyD;AAEzD,mFAAmE;AAEnE,uDAAoD;AAOpD,SAAgB,iBAAiB,CAAC,IAAW;IAC3C,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;IAC3C,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAClD,MAAM,aAAa,GAAG,IAAA,cAAM,EAAa,IAAI,CAAC,CAAC;IAE/C,MAAM,MAAM,GAAG,IAAA,kDAAiB,GAAE,CAAC;IACnC,MAAM,YAAY,GAAG,UAAU,IAAI,8BAAmB,CAAC,CAAC,CAAC,CAAC,IAAA,WAAG,EAAC,8BAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7F,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC;IAEtE,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAE,CAAC;IAEnC,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,aAAa,GAAG,UAAU,CAAC;QAC/B,OAAO,aAAa,IAAI,aAAa,CAAC,QAAQ,EAAE,EAAE,IAAI,KAAK,KAAK,EAAE,CAAC;YACjE,aAAa,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,MAAM,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC,aAAoB,EAAE,GAAG,EAAE;YACvE,IAAI,SAAS,IAAI,aAAa,CAAC,OAAO,EAAE,CAAC;gBACvC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;YACnE,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;IACrB,CAAC,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;IAErD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,aAAa,GAAG,GAAG,EAAE;YACzB,YAAY,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,CAAC;QACF,MAAM,YAAY,GAAG,GAAG,EAAE;YACxB,YAAY,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC,CAAC;QACF,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC7C,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC/C,OAAO,GAAG,EAAE;YACV,UAAU,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAChD,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,OAAO;QACL,aAAa;KACd,CAAC;AACJ,CAAC","sourcesContent":["import { HeaderHeightContext } from '@react-navigation/elements';\nimport { use, useEffect, useRef, useState } from 'react';\nimport { ScrollView } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport { useNavigation } from '../../useNavigation';\n\ninterface Args {\n  noInset?: boolean;\n  withHeader?: boolean;\n}\n\nexport function useScrollOnSelect(args?: Args) {\n  const { noInset, withHeader } = args ?? {};\n  const [isFocused, setIsFocused] = useState(false);\n  const scrollViewRef = useRef<ScrollView>(null);\n\n  const insets = useSafeAreaInsets();\n  const headerHeight = withHeader && HeaderHeightContext ? (use(HeaderHeightContext) ?? 0) : 0;\n  const topInset = noInset ? 0 : withHeader ? headerHeight : insets.top;\n\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    let tabNavigation = navigation;\n    while (tabNavigation && tabNavigation.getState()?.type !== 'tab') {\n      tabNavigation = tabNavigation.getParent();\n    }\n    if (!tabNavigation) {\n      return;\n    }\n    const unsubscribe = tabNavigation.addListener('tabSelected' as any, () => {\n      if (isFocused && scrollViewRef.current) {\n        scrollViewRef.current.scrollTo({ y: -topInset, animated: true });\n      }\n    });\n    return unsubscribe;\n  }, [navigation, isFocused, scrollViewRef, topInset]);\n\n  useEffect(() => {\n    const handleFocused = () => {\n      setIsFocused(true);\n    };\n    const handleBlured = () => {\n      setIsFocused(false);\n    };\n    navigation.addListener('blur', handleBlured);\n    navigation.addListener('focus', handleFocused);\n    return () => {\n      navigation.removeListener('blur', handleBlured);\n      navigation.removeListener('focus', handleFocused);\n    };\n  }, [navigation]);\n\n  return {\n    scrollViewRef,\n  };\n}\n"]}