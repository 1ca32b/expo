{"version":3,"file":"useScrollOnSelect.js","sourceRoot":"","sources":["../../../src/ui/NativeBottomTabs/useScrollOnSelect.tsx"],"names":[],"mappings":";;AAiBA,8CAkCC;AAlDD,iCAAoD;AAgBpD,SAAgB,iBAAiB,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAQ;IAC9D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAClD,MAAM,aAAa,GAAG,IAAA,cAAM,EAAa,IAAI,CAAC,CAAC;IAE/C,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,iBAAiB,GAAG,GAAG,EAAE;YAC7B,IAAI,SAAS,IAAI,aAAa,CAAC,OAAO,EAAE,CAAC;gBACvC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;YACnE,CAAC;QACH,CAAC,CAAC;QACF,UAAU,CAAC,WAAW,CAAC,aAAoB,EAAE,iBAAiB,CAAC,CAAC;QAChE,OAAO,GAAG,EAAE;YACV,UAAU,CAAC,cAAc,CAAC,aAAoB,EAAE,iBAAiB,CAAC,CAAC;QACrE,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;IAErD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,aAAa,GAAG,GAAG,EAAE;YACzB,YAAY,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,CAAC;QACF,MAAM,YAAY,GAAG,GAAG,EAAE;YACxB,YAAY,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC,CAAC;QACF,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC7C,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC/C,OAAO,GAAG,EAAE;YACV,UAAU,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAChD,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,OAAO;QACL,aAAa;KACd,CAAC;AACJ,CAAC","sourcesContent":["import { NavigationProp, NavigationState } from '@react-navigation/native';\nimport { useEffect, useRef, useState } from 'react';\nimport { ScrollView } from 'react-native';\n\nimport type { useNavigation } from '../../useNavigation';\n\ninterface Args {\n  navigation: ReturnType<\n    typeof useNavigation<\n      Omit<NavigationProp<ReactNavigation.RootParamList>, 'getState'> & {\n        getState(): NavigationState | undefined;\n      }\n    >\n  >;\n  topInset: number;\n}\n\nexport function useScrollOnSelect({ navigation, topInset }: Args) {\n  const [isFocused, setIsFocused] = useState(false);\n  const scrollViewRef = useRef<ScrollView>(null);\n\n  useEffect(() => {\n    const handleTabSelected = () => {\n      if (isFocused && scrollViewRef.current) {\n        scrollViewRef.current.scrollTo({ y: -topInset, animated: true });\n      }\n    };\n    navigation.addListener('tabSelected' as any, handleTabSelected);\n    return () => {\n      navigation.removeListener('tabSelected' as any, handleTabSelected);\n    };\n  }, [navigation, isFocused, scrollViewRef, topInset]);\n\n  useEffect(() => {\n    const handleFocused = () => {\n      setIsFocused(true);\n    };\n    const handleBlured = () => {\n      setIsFocused(false);\n    };\n    navigation.addListener('blur', handleBlured);\n    navigation.addListener('focus', handleFocused);\n    return () => {\n      navigation.removeListener('blur', handleBlured);\n      navigation.removeListener('focus', handleFocused);\n    };\n  }, [navigation]);\n\n  return {\n    scrollViewRef,\n  };\n}\n"]}