{"version":3,"file":"useOnTabSelect.js","sourceRoot":"","sources":["../../../src/ui/NativeBottomTabs/useOnTabSelect.tsx"],"names":[],"mappings":";;AAIA,wCAmCC;AAvCD,iCAA4C;AAE5C,uDAAoD;AAEpD,SAAgB,cAAc,CAAC,QAAoB;IACjD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAElD,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAE,CAAC;IAEnC,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,aAAa,GAAG,UAAU,CAAC;QAC/B,OAAO,aAAa,IAAI,aAAa,CAAC,QAAQ,EAAE,EAAE,IAAI,KAAK,KAAK,EAAE,CAAC;YACjE,aAAa,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,MAAM,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC,aAAoB,EAAE,GAAG,EAAE;YACvE,IAAI,SAAS,EAAE,CAAC;gBACd,QAAQ,EAAE,CAAC;YACb,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,WAAW,CAAC;IACrB,CAAC,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEtC,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,aAAa,GAAG,GAAG,EAAE;YACzB,YAAY,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,CAAC;QACF,MAAM,YAAY,GAAG,GAAG,EAAE;YACxB,YAAY,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC,CAAC;QACF,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC7C,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAC/C,OAAO,GAAG,EAAE;YACV,UAAU,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAChD,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;AACnB,CAAC","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { useNavigation } from '../../useNavigation';\n\nexport function useOnTabSelect(callback: () => void) {\n  const [isFocused, setIsFocused] = useState(false);\n\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    let tabNavigation = navigation;\n    while (tabNavigation && tabNavigation.getState()?.type !== 'tab') {\n      tabNavigation = tabNavigation.getParent();\n    }\n    if (!tabNavigation) {\n      return;\n    }\n    const unsubscribe = tabNavigation.addListener('tabSelected' as any, () => {\n      if (isFocused) {\n        callback();\n      }\n    });\n    return unsubscribe;\n  }, [navigation, isFocused, callback]);\n\n  useEffect(() => {\n    const handleFocused = () => {\n      setIsFocused(true);\n    };\n    const handleBlured = () => {\n      setIsFocused(false);\n    };\n    navigation.addListener('blur', handleBlured);\n    navigation.addListener('focus', handleFocused);\n    return () => {\n      navigation.removeListener('blur', handleBlured);\n      navigation.removeListener('focus', handleFocused);\n    };\n  }, [navigation]);\n}\n"]}