{"version":3,"file":"NativeTabsView.js","sourceRoot":"","sources":["../../../src/ui/NativeBottomTabs/NativeTabsView.tsx"],"names":[],"mappings":";;;;;AAMA,wCA6BC;AAnCD,qDAA0F;AAC1F,kDAAiD;AAEjD,mDAAqE;AACrE,+DAA4D;AAE5D,SAAgB,cAAc,CAAC,KAA6C;IAC1E,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC;IACzD,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IAEzB,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QAC3C,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;QACxC,OAAO,CACL,CAAC,yCAAmB,CAClB,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACf,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,UAAU,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAClC,QAAQ,CAAC,CAAC,GAAG,EAAE;gBACb,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC;gBACtC,IAAI,IAAI,EAAE,CAAC;oBACT,MAAM,QAAQ,GAAG,IAAA,yBAAgB,EAAC,IAAI,CAAC,CAAC;oBACxC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACtB,IAAI,QAAQ,IAAI,IAAA,yBAAgB,EAAC,QAAQ,CAAC,KAAK,IAAA,yBAAgB,EAAC,KAAK,CAAC,EAAE,CAAC;wBACvE,OAAO,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBACpC,CAAC;gBACH,CAAC;gBACD,UAAU,CAAC,QAAQ,CAAC,mBAAU,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CACF;QAAA,CAAC,UAAU,CAAC,MAAM,EAAE,CACtB;MAAA,EAAE,yCAAmB,CAAC,CACvB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,6BAAa,CAAC,CAAC,QAAQ,CAAC,EAAE,6BAAa,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import { getPathFromState, getStateFromPath, TabActions } from '@react-navigation/native';\nimport React, { PropsWithChildren } from 'react';\n\nimport { NativeTabsViewProps, RNSNativeTabs } from './RNSNativeTabs';\nimport { RNSNativeTabsScreen } from './RNSNativeTabsScreen';\n\nexport function NativeTabsView(props: PropsWithChildren<NativeTabsViewProps>) {\n  const { state, descriptors, navigation } = props.builder;\n  const { routes } = state;\n\n  const children = routes.map((route, index) => {\n    const descriptor = descriptors[route.key];\n    const isFocused = state.index === index;\n    return (\n      <RNSNativeTabsScreen\n        key={route.key}\n        isFocused={isFocused}\n        badgeValue={descriptor.route.name}\n        onAppear={() => {\n          const href = descriptor.options?.href;\n          if (href) {\n            const newState = getStateFromPath(href);\n            console.log(newState);\n            if (newState && getPathFromState(newState) !== getPathFromState(state)) {\n              return navigation.reset(newState);\n            }\n          }\n          navigation.dispatch(TabActions.jumpTo(route.name));\n        }}>\n        {descriptor.render()}\n      </RNSNativeTabsScreen>\n    );\n  });\n\n  return <RNSNativeTabs>{children}</RNSNativeTabs>;\n}\n"]}