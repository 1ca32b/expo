{"version":3,"file":"NativeTabsView.js","sourceRoot":"","sources":["../../../src/ui/NativeBottomTabs/NativeTabsView.tsx"],"names":[],"mappings":";;;;;AA8BA,wCAqCC;AA5DD,kDAAiD;AACjD,+DAAgE;AAChE,4GAAoF;AAEpF,IAAA,mCAAY,EAAC,KAAK,CAAC,CAAC;AAmBpB,SAAgB,cAAc,CAAC,KAA6C;IAC1E,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC;IACzD,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IAEzB,MAAM,QAAQ,GAAG,MAAM;SACpB,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAE,WAAW,CAAC,GAAG,CAAC,CAAC,OAAe,EAAE,eAAe,EAAE,OAAO,KAAK,MAAM,CAAC;SAC3F,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACpB,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;QAExC,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC;QACtC,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC;QACxC,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;QACxE,OAAO,CACL,CAAC,0BAAgB,CACf,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACf,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,WAAW,CAAC,CAAC,GAAG,EAAE;gBAChB,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;YACzE,CAAC,CAAC,CACF,YAAY,CAAC,CAAC,GAAG,EAAE;gBACjB,UAAU,CAAC,QAAQ,CAAC;oBAClB,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,KAAK,CAAC,GAAG;oBACjB,OAAO,EAAE;wBACP,IAAI,EAAE,KAAK,CAAC,IAAI;qBACjB;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CACF;UAAA,CAAC,UAAU,CAAC,MAAM,EAAE,CACtB;QAAA,EAAE,0BAAgB,CAAC,CACpB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEL,OAAO,CAAC,iCAAU,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,CAAC,QAAQ,CAAC,EAAE,iCAAU,CAAC,CAAC;AACzF,CAAC","sourcesContent":["import {\n  DefaultRouterOptions,\n  ParamListBase,\n  TabNavigationState,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport React, { PropsWithChildren } from 'react';\nimport { BottomTabs, enableFreeze } from 'react-native-screens';\nimport BottomTabsScreen from 'react-native-screens/src/components/BottomTabsScreen';\n\nenableFreeze(false);\n\nexport interface NativeTabOptions extends DefaultRouterOptions {\n  label?: string;\n  icon?: string;\n}\n\nexport type NativeTabsViewProps = {\n  builder: ReturnType<\n    typeof useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      Record<string, (...args: any) => void>,\n      NativeTabOptions,\n      Record<string, any>\n    >\n  >;\n};\n\nexport function NativeTabsView(props: PropsWithChildren<NativeTabsViewProps>) {\n  const { state, descriptors, navigation } = props.builder;\n  const { routes } = state;\n\n  const children = routes\n    .filter(({ key }) => (descriptors[key].options as any)?.tabBarItemStyle?.display !== 'none')\n    .map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const isFocused = state.index === index;\n\n      const icon = descriptor.options?.icon;\n      const label = descriptor.options?.label;\n      const title = label ? label : !icon ? descriptor.route.name : undefined;\n      return (\n        <BottomTabsScreen\n          key={route.key}\n          isFocused={isFocused}\n          title={title}\n          icon={icon}\n          onDidSelect={() => {\n            navigation.emit({ type: 'tabSelected', target: descriptor.route.key });\n          }}\n          onWillAppear={() => {\n            navigation.dispatch({\n              type: 'JUMP_TO',\n              target: state.key,\n              payload: {\n                name: route.name,\n              },\n            });\n          }}>\n          {descriptor.render()}\n        </BottomTabsScreen>\n      );\n    });\n\n  return <BottomTabs tabBarBlurEffect=\"systemThickMaterialLight\">{children}</BottomTabs>;\n}\n"]}