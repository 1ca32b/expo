{"version":3,"file":"NativeTabsView.js","sourceRoot":"","sources":["../../../src/ui/NativeBottomTabs/NativeTabsView.tsx"],"names":[],"mappings":";;;;;AAMA,wCA+BC;AArCD,kDAAiD;AAEjD,mDAAqE;AACrE,+DAA4D;AAC5D,uCAA0C;AAE1C,SAAgB,cAAc,CAAC,KAA6C;IAC1E,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC;IACzD,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IAEzB,OAAO,CAAC,GAAG,CAAC,IAAA,mBAAW,GAAE,CAAC,CAAC;IAE3B,MAAM,QAAQ,GAAG,MAAM;SACpB,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAE,WAAW,CAAC,GAAG,CAAC,CAAC,OAAe,EAAE,eAAe,EAAE,OAAO,KAAK,MAAM,CAAC;SAC3F,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QACpB,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;QACxC,OAAO,CACL,CAAC,yCAAmB,CAClB,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACf,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,UAAU,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAClC,QAAQ,CAAC,CAAC,GAAG,EAAE;gBACb,UAAU,CAAC,QAAQ,CAAC;oBAClB,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,KAAK,CAAC,GAAG;oBACjB,OAAO,EAAE;wBACP,IAAI,EAAE,KAAK,CAAC,IAAI;qBACjB;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CACF;UAAA,CAAC,UAAU,CAAC,MAAM,EAAE,CACtB;QAAA,EAAE,yCAAmB,CAAC,CACvB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEL,OAAO,CAAC,6BAAa,CAAC,CAAC,QAAQ,CAAC,EAAE,6BAAa,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import React, { PropsWithChildren } from 'react';\n\nimport { NativeTabsViewProps, RNSNativeTabs } from './RNSNativeTabs';\nimport { RNSNativeTabsScreen } from './RNSNativeTabsScreen';\nimport { usePathname } from '../../hooks';\n\nexport function NativeTabsView(props: PropsWithChildren<NativeTabsViewProps>) {\n  const { state, descriptors, navigation } = props.builder;\n  const { routes } = state;\n\n  console.log(usePathname());\n\n  const children = routes\n    .filter(({ key }) => (descriptors[key].options as any)?.tabBarItemStyle?.display !== 'none')\n    .map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const isFocused = state.index === index;\n      return (\n        <RNSNativeTabsScreen\n          key={route.key}\n          isFocused={isFocused}\n          badgeValue={descriptor.route.name}\n          onAppear={() => {\n            navigation.dispatch({\n              type: 'JUMP_TO',\n              target: state.key,\n              payload: {\n                name: route.name,\n              },\n            });\n          }}>\n          {descriptor.render()}\n        </RNSNativeTabsScreen>\n      );\n    });\n\n  return <RNSNativeTabs>{children}</RNSNativeTabs>;\n}\n"]}