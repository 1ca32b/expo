{"version":3,"file":"renderStaticContent.js","sourceRoot":"","sources":["../../src/static/renderStaticContent.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport '@expo/metro-runtime';\n\nimport { ServerContainer, ServerContainerRef } from '@react-navigation/native';\nimport * as Font from 'expo-font/build/server';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server.node';\nimport { AppRegistry } from 'react-native-web';\n\nimport { getRootComponent } from './getRootComponent';\nimport { ctx } from '../../_ctx';\nimport { ExpoRoot } from '../ExpoRoot';\nimport { getReactNavigationConfig } from '../getReactNavigationConfig';\nimport { getRoutes, Options } from '../getRoutes';\nimport { Head } from '../head';\nimport { loadStaticParamsAsync } from '../loadStaticParamsAsync';\n\nconst debug = require('debug')('expo:router:renderStaticContent');\n\n/** Get the linking manifest from a Node.js process. */\nasync function getManifest(options: Options = {}) {\n  const routeTree = getRoutes(ctx, {\n    preserveApiRoutes: true,\n    platform: 'web',\n    ...options,\n  });\n\n  if (!routeTree) {\n    throw new Error('No routes found');\n  }\n\n  // Evaluate all static params\n  await loadStaticParamsAsync(routeTree);\n\n  return getReactNavigationConfig(routeTree, false);\n}\n\nfunction resetReactNavigationContexts() {\n  // https://github.com/expo/router/discussions/588\n  // https://github.com/react-navigation/react-navigation/blob/9fe34b445fcb86e5666f61e144007d7540f014fa/packages/elements/src/getNamedContext.tsx#LL3C1-L4C1\n\n  // React Navigation is storing providers in a global, this is fine for the first static render\n  // but subsequent static renders of Stack or Tabs will cause React to throw a warning. To prevent this warning, we'll reset the globals before rendering.\n  const contexts = '__react_navigation__elements_contexts';\n  global[contexts] = new Map<string, React.Context<any>>();\n}\n\nexport async function getStaticContent(location: URL): Promise<string> {\n  const headContext: { helmet?: any } = {};\n\n  const ref = React.createRef<ServerContainerRef>();\n\n  const Root = getRootComponent();\n\n  function Main() {\n    return (\n      <ExpoRoot\n        location={location}\n        context={ctx}\n        wrapper={({ children }) => (\n          <Root>\n            <div id=\"root\">{children}</div>\n          </Root>\n        )}\n      />\n    );\n  }\n\n  // Based on the legacy implementation in `@expo/next-adapter` for parity until we have server components.\n  const getInitialProps =\n    Root.getInitialProps ||\n    (async ({ renderPage }) => {\n      // Clear any existing static resources from the global scope to attempt to prevent leaking between pages.\n      // This could break if pages are rendered in parallel or if fonts are loaded outside of the React tree\n      Font.resetServerContext();\n\n      // This MUST be run before `ReactDOMServer.renderToString` to prevent\n      // \"Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.\"\n      resetReactNavigationContexts();\n\n      AppRegistry.registerComponent('main', () => Main);\n      const { getStyleElement } = AppRegistry.getApplication('main');\n      const page = await renderPage();\n      const styles = [getStyleElement()];\n      return { ...page, styles: React.Children.toArray(styles) };\n    });\n\n  const { styles, ...initialProps } = await getInitialProps({\n    renderPage() {\n      return { children: <Main /> };\n    },\n  });\n\n  const html = await ReactDOMServer.renderToString(\n    <Head.Provider context={headContext}>\n      <ServerContainer ref={ref} {...initialProps} />\n    </Head.Provider>\n  );\n\n  // Eval the CSS after the HTML is rendered so that the CSS is in the same order\n  const css = ReactDOMServer.renderToStaticMarkup(styles);\n\n  let output = mixHeadComponentsWithStaticResults(headContext.helmet, html);\n\n  output = output.replace('</head>', `${css}</head>`);\n\n  // TODO: Make this use React JSX in the future to unify with other server-based styling libraries.\n  const fonts = Font.getServerResources();\n  debug(`Pushing static fonts: (count: ${fonts.length})`, fonts);\n  // Inject static fonts loaded with expo-font\n  output = output.replace('</head>', `${fonts.join('')}</head>`);\n\n  return '<!DOCTYPE html>' + output;\n}\n\nfunction mixHeadComponentsWithStaticResults(helmet: any, html: string) {\n  // Head components\n  for (const key of ['title', 'priority', 'meta', 'link', 'script', 'style'].reverse()) {\n    const result = helmet?.[key]?.toString();\n    if (result) {\n      html = html.replace('<head>', `<head>${result}`);\n    }\n  }\n\n  // attributes\n  html = html.replace('<html ', `<html ${helmet?.htmlAttributes.toString()} `);\n  html = html.replace('<body ', `<body ${helmet?.bodyAttributes.toString()} `);\n\n  return html;\n}\n\n// Re-export for use in server\nexport { getManifest };\nexport { getBuildTimeServerManifestAsync } from './getServerManifest';\n"]}