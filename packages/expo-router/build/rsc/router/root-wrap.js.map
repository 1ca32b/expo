{"version":3,"file":"root-wrap.js","sourceRoot":"","sources":["../../../src/rsc/router/root-wrap.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,YAAY,CAAC;;;;;;;AAEb,kDAA0B;AAC1B,mFAAkE;AAElE,6DAA6D;AAC7D,6DAA6D;AAE7D,8BAA8B;AAC9B,0DAA0D;AAC1D,4BAA4B;AAC5B,gCAAgC;AAChC,2BAA2B;AAC3B,yBAAyB;AACzB,UAAU;AACV,QAAQ;AACR,8DAA8D;AAC9D,oDAAoD;AACpD,yDAAyD;AACzD,wEAAwE;AACxE,4CAA4C;AAC5C,WAAW;AACX,4BAA4B;AAC5B,mFAAmF;AACnF,iBAAiB;AACjB,0EAA0E;AAC1E,UAAU;AACV,0DAA0D;AAC1D,QAAQ;AACR,oCAAoC;AAEpC,aAAa;AACb,qBAAqB;AACrB,4BAA4B;AAC5B,uBAAuB;AACvB,8EAA8E;AAC9E,qEAAqE;AACrE,0DAA0D;AAC1D,gCAAgC;AAChC,WAAW;AACX,SAAS;AACT,OAAO;AACP,IAAI;AAEJ,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,CAAC;AAElD,MAAM,eAAe,GACnB,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,KAAK,IAAI,SAAS;IACxC,CAAC,CAAC;QACE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;QAC1C,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;KACjD;IACH,CAAC,CAAC,SAAS,CAAC;AAEhB,SAAgB,QAAQ,CAAC,EAAE,QAAQ,EAAE;IACnC,OAAO,CACL,CAAC,iDAAgB,CAAC,cAAc,CAAC,CAAC,eAAe,CAAC,CAChD;MAAA,CAAC,QAAQ,CACT;MAAA,CAAC,qDAAqD,CACxD;IAAA,EAAE,iDAAgB,CAAC,CACpB,CAAC;AACJ,CAAC;AAPD,4BAOC","sourcesContent":["/**\n * Copyright Â© 2024 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use client';\n\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\n// import { ErrorBoundary } from '../../views/ErrorBoundary';\n// import { ErrorBoundaryProps, Try } from '../../views/Try';\n\n// // Add root error recovery.\n// function RootErrorBoundary(props: ErrorBoundaryProps) {\n//   React.useEffect(() => {\n//     function refetchRoute() {\n//       if (props.error) {\n//         props.retry();\n//       }\n//     }\n//     // TODO: Only strip when not connected to a dev server.\n//     if (process.env.NODE_ENV === 'development') {\n//       globalThis.__EXPO_RSC_RELOAD_LISTENERS__ ||= [];\n//       const index = globalThis.__EXPO_RSC_RELOAD_LISTENERS__.indexOf(\n//         globalThis.__EXPO_REFETCH_ROUTE__\n//       );\n//       if (index !== -1) {\n//         globalThis.__EXPO_RSC_RELOAD_LISTENERS__.splice(index, 1, refetchRoute);\n//       } else {\n//         globalThis.__EXPO_RSC_RELOAD_LISTENERS__.unshift(refetchRoute);\n//       }\n//       globalThis.__EXPO_REFETCH_ROUTE__ = refetchRoute;\n//     }\n//   }, [props.error, props.retry]);\n\n//   return (\n//     <ErrorBoundary\n//       error={props.error}\n//       retry={() => {\n//         // TODO: Invalidate the cache automatically when the request fails.\n//         // Invalidate the fetch cache so we can retry the request.\n//         globalThis.__EXPO_REFETCH_ROUTE_NO_CACHE__?.();\n//         return props.retry();\n//       }}\n//     />\n//   );\n// }\n\nconst isTestEnv = process.env.NODE_ENV === 'test';\n\nconst INITIAL_METRICS =\n  process.env.EXPO_OS === 'web' || isTestEnv\n    ? {\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : undefined;\n\nexport function RootWrap({ children }) {\n  return (\n    <SafeAreaProvider initialMetrics={INITIAL_METRICS}>\n      {children}\n      {/* <Try catch={RootErrorBoundary}>{children}</Try> */}\n    </SafeAreaProvider>\n  );\n}\n"]}