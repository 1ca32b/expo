{"version":3,"file":"Redirect.js","sourceRoot":"","sources":["../../src/link/Redirect.tsx"],"names":[],"mappings":";;;AAAA,iCAAmC;AAEnC,oCAAqC;AAErC,sDAAmD;AACnD,8CAAgD;AAChD,kDAA0C;AAgG1C;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,SAAgB,QAAQ,CAAC,EACvB,IAAI,EACJ,IAAI,EACJ,SAAS,EACT,QAAQ,EACR,mBAAmB,EACnB,UAAU,GACI;IACd,MAAM,MAAM,GAAG,IAAA,iBAAS,GAAE,CAAC;IAE3B,MAAM,KAAK,GAAwB,IAAI;QACrC,CAAC,CAAC,MAAM;QACR,CAAC,CAAC,SAAS;YACT,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,QAAQ;gBACR,CAAC,CAAC,UAAU;gBACZ,CAAC,CAAC,SAAS,CAAC;IAElB,IAAA,+BAAc,EAAC,GAAG,EAAE;QAClB,IAAI;YACF,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE,mBAAmB,EAAE,UAAU,EAAE,CAAC,CAAC;SAC1D;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACtB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,IAAA,kBAAU,EAAC,4BAAe,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAI,CAAC,AAAD,EAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AACvD,CAAC;AA3BD,4BA2BC","sourcesContent":["import { useContext } from 'react';\n\nimport { useRouter } from '../hooks';\nimport { Href } from '../types';\nimport { useFocusEffect } from '../useFocusEffect';\nimport { IsLayoutContext } from '../useScreens';\nimport { Slot } from '../views/Navigator';\nimport { WithAnchorOptions } from '../global-state/routing';\n\nexport type RedirectProps = {\n  /**\n   * The path of the route to navigate to. It can either be:\n   * - **string**: A full path like `/profile/settings` or a relative path like `../settings`.\n   * - **object**: An object with a `pathname` and optional `params`. The `pathname` can be\n   * a full path like `/profile/settings` or a relative path like `../settings`. The\n   * params can be an object of key-value pairs.\n   *\n   * @example\n   * ```tsx Dynamic\n   * import { Redirect } from 'expo-router';\n   *\n   * export default function RedirectToAbout() {\n   *  return (\n   *    <Redirect href=\"/about\">About</Link>\n   *  );\n   *}\n   * ```\n   */\n  href: Href;\n\n  /**\n   * Relative URL references are either relative to the directory or the document.\n   * By default, relative paths are relative to the document.\n   *\n   * @see [Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references).\n   */\n  relativeToDirectory?: boolean;\n\n  /**\n   * Replaces the initial screen with the current route.\n   * Can only when used with the `push`/`navigate`/`dismissTo` prop.\n   */\n  withAnchor?: WithAnchorOptions;\n  /**\n   * Always pushes a new route, and never pops or replaces to existing route.\n   * You can push the current route multiple times or with new parameters.\n   *\n   * @example\n   *```tsx\n   * import { Redirect } from 'expo-router';\n   * import { View } from 'react-native';\n   *\n   * export default function Route() {\n   *  return (\n   *   <View>\n   *     <Redirect navigate href=\"/feed\">Login</Redirect>\n   *   </View>\n   *  );\n   *}\n   * ```\n   */\n  navigate?: boolean;\n  /**\n   * Always pushes a new route, and never pops or replaces to existing route.\n   * You can push the current route multiple times or with new parameters.\n   *\n   * @example\n   *```tsx\n   * import { Redirect } from 'expo-router';\n   * import { View } from 'react-native';\n   *\n   * export default function Route() {\n   *  return (\n   *   <View>\n   *     <Redirect push href=\"/feed\">Login</Redirect>\n   *   </View>\n   *  );\n   *}\n   * ```\n   */\n  push?: boolean;\n  /**\n   * While in a stack, this will dismiss screens until the provided href is reached. If the href is not found,\n   * it will instead replace the current screen with the provided href.\n   *\n   * @example\n   *```tsx\n   * import { Redirect } from 'expo-router';\n   * import { View } from 'react-native';\n   *\n   * export default function Route() {\n   *  return (\n   *   <View>\n   *     <Redirect dismissTo href=\"/feed\">Close modal</Redirect>\n   *   </View>\n   *  );\n   *}\n   * ```\n   */\n  dismissTo?: boolean;\n};\n\n/**\n * Redirects to the `href` as soon as the component is mounted.\n *\n * @example\n * ```tsx\n * import { View, Text } from 'react-native';\n * import { Redirect } from 'expo-router';\n *\n * export default function Page() {\n *  const { user } = useAuth();\n *\n *  if (!user) {\n *    return <Redirect href=\"/login\" />;\n *  }\n *\n *  return (\n *    <View>\n *      <Text>Welcome Back!</Text>\n *    </View>\n *  );\n * }\n * ```\n */\nexport function Redirect({\n  href,\n  push,\n  dismissTo,\n  navigate,\n  relativeToDirectory,\n  withAnchor,\n}: RedirectProps) {\n  const router = useRouter();\n\n  const event: keyof typeof router = push\n    ? 'push'\n    : dismissTo\n      ? 'dismissTo'\n      : navigate\n        ? 'navigate'\n        : 'replace';\n\n  useFocusEffect(() => {\n    try {\n      router[event](href, { relativeToDirectory, withAnchor });\n    } catch (error) {\n      console.error(error);\n    }\n  });\n\n  return useContext(IsLayoutContext) ? <Slot /> : null;\n}\n"]}