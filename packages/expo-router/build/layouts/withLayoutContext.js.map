{"version":3,"file":"withLayoutContext.js","sourceRoot":"","sources":["../../src/layouts/withLayoutContext.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,+CAQe;AAEf,oCAAyC;AAGzC,2EAA6F;AAC7F,4CAAyC;AACzC,4DAA8E;AAE9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,SAAgB,iBAAiB,CAK/B,GAAM,EAAE,SAAqE;IAC7E,OAAO,MAAM,CAAC,MAAM,CAClB,IAAA,kBAAU,EAAC,CAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE,GAAG,KAAK,EAAO,EAAE,GAAG,EAAE,EAAE;QACnE,MAAM,UAAU,GAAG,IAAA,qBAAa,GAAE,CAAC;QAEnC,MAAM,EAAE,QAAQ,GAAG,EAAE,EAAE,GAAG,IAAA,qDAAyB,EAAC,mBAAmB,EAAE;YACvE,UAAU;YACV,SAAS;SACV,CAAC,CAAC;QAEH,uDAAuD;QACvD,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAG,CAAC;IAC1E,CAAC,CAAC,EACF;QACE,MAAM,EAAN,eAAM;QACN,QAAQ,EAAE,+BAAc;KACzB,CAMF,CAAC;AACJ,CAAC;AAhCD,8CAgCC","sourcesContent":["import { EventMapBase, NavigationState } from '@react-navigation/native';\nimport React, {\n  FunctionComponent,\n  forwardRef,\n  ComponentProps,\n  ComponentType,\n  ForwardRefExoticComponent,\n  PropsWithoutRef,\n  RefAttributes,\n} from 'react';\n\nimport { useContextKey } from '../Route';\nimport { PickPartial } from '../types';\nimport { ScreenProps } from '../useScreens';\nimport { ScreenPropsWithName, useGroupNavigatorChildren } from './useGroupNavigatorChildren';\nimport { Screen } from '../views/Screen';\nimport { ScreenRedirect, ScreenRedirectProps } from '../views/ScreenRedirect';\n\n/**\n * Returns a navigator that automatically injects matched routes and renders nothing when there are no children.\n * Return type with `children` prop optional.\n * \n * Enables use of other built-in React Navigation navigators and other navigators built with the React Navigation custom navigator API.\n *\n *  @example\n * ```tsx app/_layout.tsx\n * import { ParamListBase, TabNavigationState } from \"@react-navigation/native\";\n * import {\n *   createMaterialTopTabNavigator,\n *   MaterialTopTabNavigationOptions,\n *   MaterialTopTabNavigationEventMap,\n * } from \"@react-navigation/material-top-tabs\";\n * import { withLayoutContext } from \"expo-router\";\n * \n * const MaterialTopTabs = createMaterialTopTabNavigator();\n * \n * const ExpoRouterMaterialTopTabs = withLayoutContext<\n *   MaterialTopTabNavigationOptions,\n *   typeof MaterialTopTabs.Navigator,\n *   TabNavigationState<ParamListBase>,\n *   MaterialTopTabNavigationEventMap\n * >(MaterialTopTabs.Navigator);\n\n * export default function TabLayout() {\n *   return <ExpoRouterMaterialTopTabs />;\n * }\n * ```\n */\nexport function withLayoutContext<\n  TOptions extends object,\n  T extends ComponentType<any>,\n  TState extends NavigationState,\n  TEventMap extends EventMapBase,\n>(Nav: T, processor?: (options: ScreenPropsWithName[]) => ScreenPropsWithName[]) {\n  return Object.assign(\n    forwardRef(({ children: userDefinedChildren, ...props }: any, ref) => {\n      const contextKey = useContextKey();\n\n      const { children = [] } = useGroupNavigatorChildren(userDefinedChildren, {\n        contextKey,\n        processor,\n      });\n\n      // Prevent throwing an error when there are no screens.\n      if (!children.length) {\n        return null;\n      }\n\n      return <Nav {...props} id={contextKey} ref={ref} children={children} />;\n    }),\n    {\n      Screen,\n      Redirect: ScreenRedirect,\n    }\n  ) as ForwardRefExoticComponent<\n    PropsWithoutRef<PickPartial<ComponentProps<T>, 'children'>> & RefAttributes<unknown>\n  > & {\n    Screen: (props: ScreenProps<TOptions, TState, TEventMap>) => null;\n    Redirect: FunctionComponent<ScreenRedirectProps>;\n  };\n}\n"]}