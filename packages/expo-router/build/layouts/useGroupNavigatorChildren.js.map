{"version":3,"file":"useGroupNavigatorChildren.js","sourceRoot":"","sources":["../../src/layouts/useGroupNavigatorChildren.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ReactElement, Children, ReactNode, isValidElement, useMemo } from 'react';\n\nimport { RouteNode, useRouteNode } from '../Route';\nimport { sortRoutes, sortRoutesWithAnchor } from '../sortRoutes';\nimport { ScreenProps, routeToScreen } from '../useScreens';\nimport { Screen } from '../views/Screen';\nimport { ScreenRedirect } from '../views/ScreenRedirect';\n\nexport type ScreenPropsWithName = ScreenProps & { name: string };\n\n/**\n * Groups a navigator's children into screens and custom children.\n */\nexport function useGroupNavigatorChildren(\n  children: ReactNode,\n  {\n    isCustomNavigator,\n    contextKey,\n    processor,\n  }: {\n    /** Allow non-<Screen /> children */\n    isCustomNavigator?: boolean;\n    /** Used for sending developer hints */\n    contextKey?: string;\n    /** Manually process screen children */\n    processor?: (options: ScreenPropsWithName[]) => ScreenPropsWithName[];\n  } = {}\n) {\n  const node = useRouteNode();\n\n  return useMemo(() => {\n    const nonScreens: ReactNode[] = [];\n    const redirects: Map<string, ScreenPropsWithName> = new Map();\n\n    let userScreenOrder = Children.map(children, (child): ScreenPropsWithName | null => {\n      if (!isValidElement(child) || !child) {\n        if (isCustomNavigator) {\n          nonScreens.push(child);\n          return null;\n        } else {\n          warnLayoutChildren(contextKey);\n          return null;\n        }\n      }\n\n      if (child.type === Screen) {\n        if (!assertNameInProps(child)) {\n          return errorMissingName('Screen', contextKey);\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (\n            ['children', 'component', 'getComponent'].some(\n              (key) => child.props && typeof child.props === 'object' && key in child.props\n            )\n          ) {\n            throw new Error(\n              `<Screen /> component in \\`default export\\` at \\`app${contextKey}/_layout\\` must not have a \\`children\\`, \\`component\\`, or \\`getComponent\\` prop when used as a child of a Layout Route`\n            );\n          }\n\n          return child.props as ScreenPropsWithName;\n        }\n      }\n\n      if (child.type === ScreenRedirect) {\n        if (!assertNameInProps(child)) {\n          return errorMissingName('Screen', contextKey);\n        }\n\n        redirects.set(child.props.name, child.props as ScreenPropsWithName);\n      }\n\n      warnLayoutChildren(contextKey);\n      return null;\n    });\n\n    // Add an assertion for development\n    if (userScreenOrder) {\n      if (process.env.NODE_ENV !== 'production') {\n        // Assert if names are not unique\n        const seen = new Set<string>();\n\n        for (const screen of userScreenOrder) {\n          if (seen.has(screen.name)) {\n            throw new Error(`Screen names must be unique: ${screen.name}`);\n          }\n          seen.add(screen.name);\n        }\n      }\n    }\n\n    userScreenOrder ||= [];\n\n    if (processor) {\n      userScreenOrder = processor(userScreenOrder);\n    }\n\n    const screens = getScreens(node, userScreenOrder, redirects);\n\n    return {\n      screens,\n      nonScreens,\n    };\n  }, [children, processor, node]);\n}\n\nfunction getScreens(\n  node: RouteNode,\n  order: ScreenPropsWithName[],\n  redirects: Map<string, ScreenPropsWithName>\n): ReactNode[] {\n  const children = node.children;\n  const anchor = node.initialRouteName;\n\n  // If there is no specific order, return the children in the order they were defined\n  if (!order.length && !redirects.size) {\n    return children.sort(sortRoutesWithAnchor(anchor)).map((route) => routeToScreen(route));\n  }\n\n  const childrenNodeMap = new Map(children.map((child) => [child.route, child]));\n\n  const screens: ReactNode[] = [];\n\n  for (const { name, redirect, ...props } of order) {\n    const route = childrenNodeMap.get(name);\n\n    if (!route) {\n      console.warn(\n        `[Layout children]: No route named \"${name}\" exists in nested children:`,\n        ...childrenNodeMap.keys()\n      );\n      continue;\n    }\n\n    // Ensure to return null after removing from entries.\n    if (redirect) {\n      throw new Error(`Please use <Screen.Redirect /> to declare a redirect.`);\n    }\n\n    // Remove from the children so it doesn't get added again\n    childrenNodeMap.delete(name);\n\n    // Ensure the anchor is at the start\n    if (name === anchor) {\n      screens.unshift(routeToScreen(route, props));\n    } else {\n      screens.push(routeToScreen(route, props));\n    }\n  }\n\n  // If there is an anchor, add it to the start\n  if (anchor) {\n    const anchorRoute = childrenNodeMap.get(anchor);\n\n    if (anchorRoute) {\n      screens.unshift(routeToScreen(anchorRoute));\n      childrenNodeMap.delete(anchor);\n    }\n  }\n\n  // The remaining nodes where not in the order, so sort them and add them to the end\n  const sortedScreens = Array.from(childrenNodeMap.values())\n    .sort(sortRoutes)\n    .map((route) => routeToScreen(route));\n\n  // Add the remaining screens\n  screens.push(...sortedScreens);\n\n  return screens;\n}\n\nconst warnLayoutChildren = (contextKey?: string) => {\n  console.warn(\n    `Layout children must be of type Screen, ScreenRedirect or ScreenRewrite. All other children are ignored. To use custom children, create a custom <Layout />. Update Layout Route at: \"app${contextKey}/_layout\"`\n  );\n};\n\nconst assertNameInProps = (child: ReactNode): child is ReactElement<ScreenPropsWithName> => {\n  return Boolean(\n    child &&\n      typeof child === 'object' &&\n      'props' in child &&\n      typeof child.props === 'object' &&\n      child.props &&\n      'name' in child.props &&\n      typeof child.props.name === 'string' &&\n      child.props.name\n  );\n};\n\nconst errorMissingName = (type: string, contextKey?: string) => {\n  throw new Error(\n    `<${type} /> component in \\`default export\\` at \\`app${contextKey}/_layout\\` must have a \\`name\\` prop when used as a child of a Layout Route.`\n  );\n};\n"]}