{"version":3,"file":"generate.js","names":["_nodeFs","data","_interopRequireDefault","require","_path","_getRoutes","_matchers","obj","__esModule","default","CATCH_ALL","SLUG","getTypedRoutesDeclarationFile","ctx","staticRoutes","Set","dynamicRoutes","dynamicRouteContextKeys","walkRouteNode","getRoutes","platformRoutes","ignoreEntryPoints","ignoreRequireErrors","importMode","fs","readFileSync","path","join","resolve","replace","setToUnionType","routeNode","addRouteNode","child","children","route","isTypedRoute","routePath","removeSupportedExtensions","startsWith","dynamic","generateCombinations","add","replaceAll","combination","set","size","sort","map","s","pathname","groups","split","filter","part","endsWith","combinations","generate","currentIndex","currentPath","length","push","group","withoutGroup"],"sources":["../../../src/typed-routes/generate.ts"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'path';\n\nimport { RouteNode } from '../Route';\nimport { getRoutes } from '../getRoutes';\nimport { isTypedRoute, removeSupportedExtensions } from '../matchers';\nimport { RequireContext } from '../types';\n\n// /[...param1]/ - Match [...param1]\nconst CATCH_ALL = /\\[\\.\\.\\..+?\\]/g;\n// /[param1] - Match [param1]\nconst SLUG = /\\[.+?\\]/g;\n\nexport function getTypedRoutesDeclarationFile(ctx: RequireContext) {\n  const staticRoutes = new Set<string>();\n  const dynamicRoutes = new Set<string>();\n  const dynamicRouteContextKeys = new Set<string>();\n\n  walkRouteNode(\n    getRoutes(ctx, {\n      platformRoutes: false, // We don't need to generate platform specific routes\n      ignoreEntryPoints: true,\n      ignoreRequireErrors: true,\n      importMode: 'async',\n    }),\n    staticRoutes,\n    dynamicRoutes,\n    dynamicRouteContextKeys\n  );\n\n  // If the user has expo-router v3+ installed, we can use the types from the package\n  return (\n    fs\n      .readFileSync(\n        path.join(require.resolve('expo-router/package.json'), '..', './types/expo-router.d.ts'),\n        'utf-8'\n      )\n      // Swap from being a namespace to a module\n      .replace('declare namespace ExpoRouter {', `declare module \"expo-router\" {`)\n      // Add the route values\n      .replace(\n        'type StaticRoutes = string;',\n        `type StaticRoutes = ${setToUnionType(staticRoutes)};`\n      )\n      .replace(\n        'type DynamicRoutes<T extends string> = string;',\n        `type DynamicRoutes<T extends string> = ${setToUnionType(dynamicRoutes)};`\n      )\n      .replace(\n        'type DynamicRouteTemplate = never;',\n        `type DynamicRouteTemplate = ${setToUnionType(dynamicRouteContextKeys)};`\n      )\n  );\n}\n\n/**\n * Walks a RouteNode tree and adds the routes to the provided sets\n */\nfunction walkRouteNode(\n  routeNode: RouteNode | null,\n  staticRoutes: Set<string>,\n  dynamicRoutes: Set<string>,\n  dynamicRouteContextKeys: Set<string>\n) {\n  if (!routeNode) return;\n\n  addRouteNode(routeNode, staticRoutes, dynamicRoutes, dynamicRouteContextKeys);\n\n  for (const child of routeNode.children) {\n    walkRouteNode(child, staticRoutes, dynamicRoutes, dynamicRouteContextKeys);\n  }\n}\n\n/**\n * Given a RouteNode, adds the route to the correct sets\n * Modifies the RouteNode.route to be a typed-route string\n */\nfunction addRouteNode(\n  routeNode: RouteNode | null,\n  staticRoutes: Set<string>,\n  dynamicRoutes: Set<string>,\n  dynamicRouteContextKeys: Set<string>\n) {\n  if (!routeNode?.route) return;\n  if (!isTypedRoute(routeNode.route)) return;\n\n  let routePath = `${removeSupportedExtensions(routeNode.route).replace(/\\/?index$/, '')}`; // replace /index with /\n\n  if (!routePath.startsWith('/')) {\n    routePath = `/${routePath}`;\n  }\n\n  if (routeNode.dynamic) {\n    for (const path of generateCombinations(routePath)) {\n      dynamicRouteContextKeys.add(path);\n      dynamicRoutes.add(\n        `${path\n          .replaceAll(CATCH_ALL, '${CatchAllRoutePart<T>}')\n          .replaceAll(SLUG, '${SingleRoutePart<T>}')}`\n      );\n    }\n  } else {\n    for (const combination of generateCombinations(routePath)) {\n      staticRoutes.add(combination);\n    }\n  }\n}\n\n/**\n * Converts a Set to a TypeScript union type\n */\nconst setToUnionType = <T>(set: Set<T>) => {\n  return set.size > 0\n    ? [...set]\n        .sort()\n        .map((s) => `\\`${s}\\``)\n        .join(' | ')\n    : 'never';\n};\n\nfunction generateCombinations(pathname) {\n  const groups = pathname.split('/').filter((part) => part.startsWith('(') && part.endsWith(')'));\n  const combinations: string[] = [];\n\n  function generate(currentIndex, currentPath) {\n    if (currentIndex === groups.length) {\n      combinations.push(currentPath.replace(/\\/{2,}/g, '/'));\n      return;\n    }\n\n    const group = groups[currentIndex];\n    const withoutGroup = currentPath.replace(group, '');\n    generate(currentIndex + 1, withoutGroup);\n    generate(currentIndex + 1, currentPath);\n  }\n\n  generate(0, pathname);\n  return combinations;\n}\n"],"mappings":"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"}