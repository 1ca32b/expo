{"version":3,"file":"generate.js","names":["_nodeFs","data","_interopRequireDefault","require","_path","_getRoutes","_matchers","obj","__esModule","default","CATCH_ALL","SLUG","getTypedRoutesDeclarationFile","ctx","staticRoutes","Set","dynamicRoutes","dynamicRouteContextKeys","walkRouteNode","getRoutes","ignoreEntryPoints","ignoreRequireErrors","importMode","fs","readFileSync","path","join","__dirname","replace","setToUnionType","routeNode","addRouteNode","child","children","route","isTypedRoute","routePath","removeSupportedExtensions","dynamic","add","replaceAll","set","size","map","s"],"sources":["../../../src/typed-routes/generate.ts"],"sourcesContent":["import fs from 'node:fs';\nimport path from 'path';\n\nimport { RouteNode } from '../Route';\nimport { getRoutes } from '../getRoutes';\nimport { isTypedRoute, removeSupportedExtensions } from '../matchers';\nimport { RequireContext } from '../types';\n\n// /[...param1]/ - Match [...param1]\nconst CATCH_ALL = /\\[\\.\\.\\..+?\\]/g;\n// /[param1] - Match [param1]\nconst SLUG = /\\[.+?\\]/g;\n\nexport function getTypedRoutesDeclarationFile(ctx: RequireContext) {\n  const staticRoutes = new Set<string>();\n  const dynamicRoutes = new Set<string>();\n  const dynamicRouteContextKeys = new Set<string>();\n\n  walkRouteNode(\n    getRoutes(ctx, {\n      ignoreEntryPoints: true,\n      ignoreRequireErrors: true,\n      importMode: 'async',\n    }),\n    staticRoutes,\n    dynamicRoutes,\n    dynamicRouteContextKeys\n  );\n\n  // If the user has expo-router v3+ installed, we can use the types from the package\n  return (\n    fs\n      .readFileSync(path.join(__dirname, '../../types/expo-router.d.ts'), 'utf-8')\n      // Swap from being a namespace to a module\n      .replace('declare namespace ExpoRouter {', `declare module \"expo-router\" {`)\n      // Add the route values\n      .replace(\n        'type StaticRoutes = string;',\n        `type StaticRoutes = ${setToUnionType(staticRoutes)};`\n      )\n      .replace(\n        'type DynamicRoutes<T extends string> = string;',\n        `type DynamicRoutes<T extends string> = ${setToUnionType(dynamicRoutes)};`\n      )\n      .replace(\n        'type DynamicRouteTemplate = never;',\n        `type DynamicRouteTemplate = ${setToUnionType(dynamicRouteContextKeys)};`\n      )\n  );\n}\n\n/**\n * Walks a RouteNode tree and adds the routes to the provided sets\n */\nfunction walkRouteNode(\n  routeNode: RouteNode | null,\n  staticRoutes: Set<string>,\n  dynamicRoutes: Set<string>,\n  dynamicRouteContextKeys: Set<string>\n) {\n  if (!routeNode) return;\n\n  addRouteNode(routeNode, staticRoutes, dynamicRoutes, dynamicRouteContextKeys);\n\n  for (const child of routeNode.children) {\n    walkRouteNode(child, staticRoutes, dynamicRoutes, dynamicRouteContextKeys);\n  }\n}\n\n/**\n * Given a RouteNode, adds the route to the correct sets\n * Modifies the RouteNode.route to be a typed-route string\n */\nfunction addRouteNode(\n  routeNode: RouteNode | null,\n  staticRoutes: Set<string>,\n  dynamicRoutes: Set<string>,\n  dynamicRouteContextKeys: Set<string>\n) {\n  if (!routeNode?.route) return;\n  if (!isTypedRoute(routeNode.route)) return;\n\n  const routePath = `/${removeSupportedExtensions(routeNode.route).replace(/\\/?index$/, '')}`; // replace /index with /\n\n  if (routeNode.dynamic) {\n    dynamicRouteContextKeys.add(routePath);\n    dynamicRoutes.add(\n      `${routePath\n        .replaceAll(CATCH_ALL, '${CatchAllRoutePart<T>}')\n        .replaceAll(SLUG, '${SingleRoutePart<T>}')}`\n    );\n  } else {\n    staticRoutes.add(routePath);\n  }\n}\n\n/**\n * Converts a Set to a TypeScript union type\n */\nconst setToUnionType = <T>(set: Set<T>) => {\n  return set.size > 0 ? [...set].map((s) => `\\`${s}\\``).join(' | ') : 'never';\n};\n"],"mappings":"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"}