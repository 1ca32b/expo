{"version":3,"file":"mock-config.js","names":["_path","data","_interopRequireDefault","require","_contextStubs","_getLinkingConfig","_getRoutes","obj","__esModule","default","getMockConfig","context","metaOnly","getNavigationConfig","getExactRoutes","getMockContext","requireContext","path","resolve","process","cwd","Array","isArray","inMemoryContext","Object","fromEntries","map","filename","appDir","requireContextWithOverrides","overrides","Error"],"sources":["../../../src/testing-library/mock-config.ts"],"sourcesContent":["import path from 'path';\n\nimport {\n  MemoryContext,\n  inMemoryContext,\n  requireContext,\n  requireContextWithOverrides,\n} from './context-stubs';\nimport { getNavigationConfig } from '../getLinkingConfig';\nimport { getExactRoutes } from '../getRoutes';\n\nexport type MockContextConfig =\n  | string // Pathname to a directory\n  | string[] // Array of filenames to mock as empty components, e.g () => null\n  | MemoryContext // Map of filenames and their exports\n  | {\n      // Directory to load as context\n      appDir: string;\n      // Map of filenames and their exports. Will override contents of files loaded in `appDir\n      overrides: MemoryContext;\n    };\n\nexport function getMockConfig(context: MockContextConfig, metaOnly: boolean = true) {\n  return getNavigationConfig(getExactRoutes(getMockContext(context))!, metaOnly);\n}\n\nexport function getMockContext(context: MockContextConfig) {\n  if (typeof context === 'string') {\n    return requireContext(path.resolve(process.cwd(), context));\n  } else if (Array.isArray(context)) {\n    return inMemoryContext(\n      Object.fromEntries(context.map((filename) => [filename, { default: () => null }]))\n    );\n  } else if (!('appDir' in context)) {\n    return inMemoryContext(context);\n  } else if ('appDir' in context && typeof context.appDir === 'string') {\n    return requireContextWithOverrides(context.appDir, context.overrides as MemoryContext);\n  } else {\n    throw new Error('Invalid context');\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,MAAA;EAAA,MAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,KAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAG,cAAA;EAAA,MAAAH,IAAA,GAAAE,OAAA;EAAAC,aAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAMA,SAAAI,kBAAA;EAAA,MAAAJ,IAAA,GAAAE,OAAA;EAAAE,iBAAA,YAAAA,CAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,WAAA;EAAA,MAAAL,IAAA,GAAAE,OAAA;EAAAG,UAAA,YAAAA,CAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA8C,SAAAC,uBAAAK,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAavC,SAASG,aAAaA,CAACC,OAA0B,EAAEC,QAAiB,GAAG,IAAI,EAAE;EAClF,OAAO,IAAAC,uCAAmB,EAAC,IAAAC,2BAAc,EAACC,cAAc,CAACJ,OAAO,CAAC,CAAC,EAAGC,QAAQ,CAAC;AAChF;AAEO,SAASG,cAAcA,CAACJ,OAA0B,EAAE;EACzD,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAO,IAAAK,8BAAc,EAACC,eAAI,CAACC,OAAO,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAET,OAAO,CAAC,CAAC;EAC7D,CAAC,MAAM,IAAIU,KAAK,CAACC,OAAO,CAACX,OAAO,CAAC,EAAE;IACjC,OAAO,IAAAY,+BAAe,EACpBC,MAAM,CAACC,WAAW,CAACd,OAAO,CAACe,GAAG,CAAEC,QAAQ,IAAK,CAACA,QAAQ,EAAE;MAAElB,OAAO,EAAEA,CAAA,KAAM;IAAK,CAAC,CAAC,CAAC,CACnF,CAAC;EACH,CAAC,MAAM,IAAI,EAAE,QAAQ,IAAIE,OAAO,CAAC,EAAE;IACjC,OAAO,IAAAY,+BAAe,EAACZ,OAAO,CAAC;EACjC,CAAC,MAAM,IAAI,QAAQ,IAAIA,OAAO,IAAI,OAAOA,OAAO,CAACiB,MAAM,KAAK,QAAQ,EAAE;IACpE,OAAO,IAAAC,2CAA2B,EAAClB,OAAO,CAACiB,MAAM,EAAEjB,OAAO,CAACmB,SAA0B,CAAC;EACxF,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;AACF"}