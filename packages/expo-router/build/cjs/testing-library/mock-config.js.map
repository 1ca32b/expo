{"version":3,"file":"mock-config.js","names":["_path","data","_interopRequireDefault","require","_contextStubs","_getLinkingConfig","_getRoutes","obj","__esModule","default","isOverrideContext","context","Boolean","getMockConfig","metaOnly","getNavigationConfig","getExactRoutes","getMockContext","requireContext","path","resolve","process","cwd","Array","isArray","inMemoryContext","Object","fromEntries","map","filename","requireContextWithOverrides","appDir","overrides"],"sources":["../../../src/testing-library/mock-config.ts"],"sourcesContent":["import path from 'path';\n\nimport {\n  FileStub,\n  inMemoryContext,\n  requireContext,\n  requireContextWithOverrides,\n} from './context-stubs';\nimport { getNavigationConfig } from '../getLinkingConfig';\nimport { getExactRoutes } from '../getRoutes';\n\nfunction isOverrideContext(\n  context: object\n): context is { appDir: string; overrides: Record<string, FileStub> } {\n  return Boolean(typeof context === 'object' && 'appDir' in context);\n}\n\nexport type MockContextConfig =\n  | string // Pathname to a directory\n  | string[] // Array of filenames to mock as empty components, e.g () => null\n  | Record<string, FileStub> // Map of filenames and their exports\n  | {\n      // Directory to load as context\n      appDir: string;\n      // Map of filenames and their exports. Will override contents of files loaded in `appDir\n      overrides: Record<string, FileStub>;\n    };\n\nexport function getMockConfig(context: MockContextConfig, metaOnly: boolean = true) {\n  return getNavigationConfig(getExactRoutes(getMockContext(context))!, metaOnly);\n}\n\nexport function getMockContext(context: MockContextConfig) {\n  if (typeof context === 'string') {\n    return requireContext(path.resolve(process.cwd(), context));\n  } else if (Array.isArray(context)) {\n    return inMemoryContext(\n      Object.fromEntries(context.map((filename) => [filename, { default: () => null }]))\n    );\n  } else if (isOverrideContext(context)) {\n    return requireContextWithOverrides(context.appDir, context.overrides);\n  } else {\n    return inMemoryContext(context);\n  }\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,MAAA;EAAA,MAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,KAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAG,cAAA;EAAA,MAAAH,IAAA,GAAAE,OAAA;EAAAC,aAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAMA,SAAAI,kBAAA;EAAA,MAAAJ,IAAA,GAAAE,OAAA;EAAAE,iBAAA,YAAAA,CAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,WAAA;EAAA,MAAAL,IAAA,GAAAE,OAAA;EAAAG,UAAA,YAAAA,CAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA8C,SAAAC,uBAAAK,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAE9C,SAASG,iBAAiBA,CACxBC,OAAe,EACqD;EACpE,OAAOC,OAAO,CAAC,OAAOD,OAAO,KAAK,QAAQ,IAAI,QAAQ,IAAIA,OAAO,CAAC;AACpE;AAaO,SAASE,aAAaA,CAACF,OAA0B,EAAEG,QAAiB,GAAG,IAAI,EAAE;EAClF,OAAO,IAAAC,uCAAmB,EAAC,IAAAC,2BAAc,EAACC,cAAc,CAACN,OAAO,CAAC,CAAC,EAAGG,QAAQ,CAAC;AAChF;AAEO,SAASG,cAAcA,CAACN,OAA0B,EAAE;EACzD,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAO,IAAAO,8BAAc,EAACC,eAAI,CAACC,OAAO,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC,EAAEX,OAAO,CAAC,CAAC;EAC7D,CAAC,MAAM,IAAIY,KAAK,CAACC,OAAO,CAACb,OAAO,CAAC,EAAE;IACjC,OAAO,IAAAc,+BAAe,EACpBC,MAAM,CAACC,WAAW,CAAChB,OAAO,CAACiB,GAAG,CAAEC,QAAQ,IAAK,CAACA,QAAQ,EAAE;MAAEpB,OAAO,EAAEA,CAAA,KAAM;IAAK,CAAC,CAAC,CAAC,CACnF,CAAC;EACH,CAAC,MAAM,IAAIC,iBAAiB,CAACC,OAAO,CAAC,EAAE;IACrC,OAAO,IAAAmB,2CAA2B,EAACnB,OAAO,CAACoB,MAAM,EAAEpB,OAAO,CAACqB,SAAS,CAAC;EACvE,CAAC,MAAM;IACL,OAAO,IAAAP,+BAAe,EAACd,OAAO,CAAC;EACjC;AACF"}