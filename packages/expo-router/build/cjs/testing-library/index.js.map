{"version":3,"file":"index.js","names":["require","_reactNative","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_react","data","_interopRequireDefault","_mockConfig","_ExpoRoot","_getPathFromState","_getLinkingConfig","_routerStore","_imperativeApi","obj","__esModule","default","afterAll","store","cleanup","renderRouter","context","initialUrl","linking","options","jest","useFakeTimers","mockContext","getMockContext","process","env","EXPO_ROUTER_IMPORT_MODE","stateCache","clear","result","render","createElement","ExpoRoot","location","assign","getPathname","routeInfoSnapshot","pathname","getSegments","segments","getSearchParams","params","getPathnameWithParams","getPathFromState","rootState","config","getRouterState","rootStateSnapshot","testRouter","navigate","path","act","router","expect","screen","toHavePathnameWithParams","push","replace","back","canGoBack","toBe","setParams","dismissAll"],"sources":["../../../src/testing-library/index.tsx"],"sourcesContent":["import './expect';\nimport './mocks';\n\nimport { NavigationState, PartialState } from '@react-navigation/native';\nimport { act, render, RenderResult, screen } from '@testing-library/react-native';\nimport React from 'react';\n\nimport { MockContextConfig, getMockConfig, getMockContext } from './mock-config';\nimport { ExpoRoot } from '../ExpoRoot';\nimport getPathFromState from '../fork/getPathFromState';\nimport { ExpoLinkingOptions, stateCache } from '../getLinkingConfig';\nimport { store } from '../global-state/router-store';\nimport { router } from '../imperative-api';\n\n// re-export everything\nexport * from '@testing-library/react-native';\n\nafterAll(() => {\n  store.cleanup();\n});\n\ntype RenderRouterOptions = Parameters<typeof render>[1] & {\n  initialUrl?: any;\n  linking?: Partial<ExpoLinkingOptions>;\n};\n\ntype Result = ReturnType<typeof render> & {\n  getPathname(): string;\n  getPathnameWithParams(): string;\n  getSegments(): string[];\n  getSearchParams(): Record<string, string | string[]>;\n  getRouterState(): NavigationState<any> | PartialState<any>;\n};\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toHavePathname(pathname: string): R;\n      toHavePathnameWithParams(pathname: string): R;\n      toHaveSegments(segments: string[]): R;\n      toHaveSearchParams(params: Record<string, string | string[]>): R;\n      toHaveRouterState(state: NavigationState<any> | PartialState<any>): R;\n    }\n  }\n}\n\nexport { MockContextConfig, getMockConfig, getMockContext };\n\nexport function renderRouter(\n  context: MockContextConfig = './app',\n  { initialUrl = '/', linking, ...options }: RenderRouterOptions = {}\n): Result {\n  jest.useFakeTimers();\n\n  const mockContext = getMockContext(context);\n\n  // Force the render to be synchronous\n  process.env.EXPO_ROUTER_IMPORT_MODE = 'sync';\n  stateCache.clear();\n\n  const result = render(\n    <ExpoRoot context={mockContext} location={initialUrl} linking={linking} />,\n    options\n  );\n\n  return Object.assign(result, {\n    getPathname(this: RenderResult): string {\n      return store.routeInfoSnapshot().pathname;\n    },\n    getSegments(this: RenderResult): string[] {\n      return store.routeInfoSnapshot().segments;\n    },\n    getSearchParams(this: RenderResult): Record<string, string | string[]> {\n      return store.routeInfoSnapshot().params;\n    },\n    getPathnameWithParams(this: RenderResult): string {\n      return getPathFromState(store.rootState!, store.linking!.config);\n    },\n    getRouterState(this: RenderResult) {\n      return store.rootStateSnapshot();\n    },\n  });\n}\n\nexport const testRouter = {\n  /** Navigate to the provided pathname and the pathname */\n  navigate(path: string) {\n    act(() => router.navigate(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Push the provided pathname and assert the pathname */\n  push(path: string) {\n    act(() => router.push(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Replace with provided pathname and assert the pathname */\n  replace(path: string) {\n    act(() => router.replace(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Go back in history and asset the new pathname */\n  back(path?: string) {\n    expect(router.canGoBack()).toBe(true);\n    act(() => router.back());\n    if (path) {\n      expect(screen).toHavePathnameWithParams(path);\n    }\n  },\n  /** If there's history that supports invoking the `back` function. */\n  canGoBack() {\n    return router.canGoBack();\n  },\n  /** Update the current route query params and assert the new pathname */\n  setParams(params?: Record<string, string>, path?: string) {\n    router.setParams(params);\n    if (path) {\n      expect(screen).toHavePathnameWithParams(path);\n    }\n  },\n  /** If there's history that supports invoking the `back` function. */\n  dismissAll() {\n    act(() => router.dismissAll());\n  },\n};\n"],"mappings":"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"}