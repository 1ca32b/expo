{"version":3,"file":"index.js","names":["require","_reactNative","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_react","data","_interopRequireDefault","_mockConfig","_mocks","_ExpoRoot","_getPathFromState","_getLinkingConfig","_routerStore","_imperativeApi","obj","__esModule","default","renderRouter","context","initialUrl","options","mockContext","getMockContext","setInitialUrl","process","env","EXPO_ROUTER_IMPORT_MODE","stateCache","clear","location","URL","result","render","createElement","ExpoRoot","assign","getPathname","store","routeInfoSnapshot","pathname","getSegments","segments","getSearchParams","params","getPathnameWithParams","getPathFromState","rootState","linking","config","testRouter","navigate","path","act","router","expect","screen","toHavePathnameWithParams","push","replace","back","canGoBack","toBe","setParams","dismissAll"],"sources":["../../../src/testing-library/index.tsx"],"sourcesContent":["/// <reference types=\"../../types/jest\" />\nimport './expect';\n\nimport { act, render, RenderResult, screen } from '@testing-library/react-native';\nimport React from 'react';\n\nimport { MockContextConfig, getMockConfig, getMockContext } from './mock-config';\nimport { setInitialUrl } from './mocks';\nimport { ExpoRoot } from '../ExpoRoot';\nimport getPathFromState from '../fork/getPathFromState';\nimport { stateCache } from '../getLinkingConfig';\nimport { store } from '../global-state/router-store';\nimport { router } from '../imperative-api';\n\n// re-export everything\nexport * from '@testing-library/react-native';\n\ntype RenderRouterOptions = Parameters<typeof render>[1] & {\n  initialUrl?: any;\n};\n\ntype Result = ReturnType<typeof render> & {\n  getPathname(): string;\n  getPathnameWithParams(): string;\n  getSegments(): string[];\n  getSearchParams(): Record<string, string | string[]>;\n};\n\nexport { MockContextConfig, getMockConfig, getMockContext };\n\nexport function renderRouter(\n  context: MockContextConfig = './app',\n  { initialUrl = '/', ...options }: RenderRouterOptions = {}\n): Result {\n  const mockContext = getMockContext(context);\n\n  // Reset the initial URL\n  setInitialUrl(initialUrl);\n\n  // Force the render to be synchronous\n  process.env.EXPO_ROUTER_IMPORT_MODE = 'sync';\n  stateCache.clear();\n\n  let location: URL | undefined;\n\n  if (typeof initialUrl === 'string') {\n    location = new URL(initialUrl, 'test://');\n  } else if (initialUrl instanceof URL) {\n    location = initialUrl;\n  }\n\n  const result = render(<ExpoRoot context={mockContext} location={location} />, {\n    ...options,\n  });\n\n  return Object.assign(result, {\n    getPathname(this: RenderResult): string {\n      return store.routeInfoSnapshot().pathname;\n    },\n    getSegments(this: RenderResult): string[] {\n      return store.routeInfoSnapshot().segments;\n    },\n    getSearchParams(this: RenderResult): Record<string, string | string[]> {\n      return store.routeInfoSnapshot().params;\n    },\n    getPathnameWithParams(this: RenderResult): string {\n      return getPathFromState(store.rootState!, store.linking!.config);\n    },\n  });\n}\n\nexport const testRouter = {\n  /** Navigate to the provided pathname and the pathname */\n  navigate(path: string) {\n    act(() => router.navigate(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Push the provided pathname and assert the pathname */\n  push(path: string) {\n    act(() => router.push(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Replace with provided pathname and assert the pathname */\n  replace(path: string) {\n    act(() => router.replace(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Go back in history and asset the new pathname */\n  back(path?: string) {\n    expect(router.canGoBack()).toBe(true);\n    act(() => router.back());\n    if (path) {\n      expect(screen).toHavePathnameWithParams(path);\n    }\n  },\n  /** If there's history that supports invoking the `back` function. */\n  canGoBack() {\n    return router.canGoBack();\n  },\n  /** Update the current route query params and assert the new pathname */\n  setParams(params?: Record<string, string>, path?: string) {\n    router.setParams(params);\n    if (path) {\n      expect(screen).toHavePathnameWithParams(path);\n    }\n  },\n  /** If there's history that supports invoking the `back` function. */\n  dismissAll() {\n    act(() => router.dismissAll());\n  },\n};\n"],"mappings":"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"}