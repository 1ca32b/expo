{"version":3,"file":"useLinking.js","names":["_core","data","require","_fastDeepEqual","_interopRequireDefault","React","_interopRequireWildcard","_createMemoryHistory","_serverLocationContext","_getPathFromState","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","obj","findMatchingState","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","queue","Promise","resolve","callback","then","exports","linkingHandlers","useLinking","ref","independent","enabled","config","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getActionFromStateDefault","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","createMemoryHistory","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","location","useContext","ServerLocationContext","server","getInitialState","useCallback","value","window","path","pathname","search","thenable","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","routeNames","includes","name","warn","action","dispatch","message","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","isEqual","params","appendBaseUrl","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"sources":["../../../src/fork/useLinking.ts"],"sourcesContent":["/* eslint-disable */\n// Forked from react-navigation to add basePath functionality to web.\n// https://github.com/react-navigation/react-navigation/blob/6.x/packages/native/src/useLinking.tsx\n\nimport {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\n/* Start of fork. Source: https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/native/src/useLinking.tsx#L13  */\n// createMemoryHistory is a self-contained module with no side effects any only depends on `nanoid` and `tiny-warning`\nimport createMemoryHistory from '@react-navigation/native/lib/commonjs/createMemoryHistory';\n// This was removed as we don't use ServerContext\n// import ServerContext from './ServerContext';\nimport { ServerLocationContext } from '../global-state/serverLocationContext';\n/* End of fork */\nimport type { LinkingOptions } from '@react-navigation/native';\nimport { appendBaseUrl } from './getPathFromState';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nexport const series = (cb: () => Promise<void>) => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  /* Start of fork. Source: https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/native/src/useLinking.tsx#L142 */\n  // ServerContext is used inside ServerContainer to set the location during SSR: https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/native/src/ServerContainer.tsx#L50-L54\n  // Expo Router uses the `initialLocation` prop to set the initial location during SSR:\n  const location = React.useContext(ServerLocationContext);\n  const server = { location };\n  /* End of fork */\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ?? (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const { location } = window;\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e ? e.message : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            /* Start of fork. Source: https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/native/src/useLinking.tsx#L280  */\n            return appendBaseUrl(route.path);\n            /* End of fork */\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history ? focusedState.history.length : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (\n              nextIndex !== -1 &&\n              nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)\n            ) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"],"mappings":"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"}