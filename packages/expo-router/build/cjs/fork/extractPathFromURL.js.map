{"version":3,"file":"extractPathFromURL.js","names":["Linking","data","_interopRequireWildcard","require","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","extractExactPathFromURL","url","match","origin","href","URL","replace","isExpoGo","expo","globalThis","modules","ExpoGo","pathname","fromDeepLink","res","parse","qs","queryParams","entries","map","k","v","join","adjustPathname","hostname","path","isExpoDevelopmentClient","searchParams","incomingUrl","decodeURI","results","host","search","decodeURIComponent","extractExpoPathFromURL","split","slice"],"sources":["../../../src/fork/extractPathFromURL.ts"],"sourcesContent":["import * as Linking from 'expo-linking';\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href } = new URL(url);\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1];\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n\n    const res = Linking.parse(url);\n\n    const qs = !res.queryParams\n      ? ''\n      : Object.entries(res.queryParams)\n          .map(([k, v]) => `${k}=${v}`)\n          .join('&');\n    return (\n      adjustPathname({ hostname: res.hostname, pathname: res.path || '' }) + (qs ? '?' + qs : '')\n    );\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    return url;\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(url: string = '') {\n  // TODO: We should get rid of this, dropping specificities is not good\n  return extractExactPathFromURL(url).replace(/^\\//, '');\n}\n\nexport function adjustPathname(url: { hostname?: string | null; pathname: string }) {\n  if (url.hostname === 'exp.host' || url.hostname === 'u.expo.dev') {\n    // drop the first two segments from pathname:\n    return url.pathname.split('/').slice(2).join('/');\n  }\n  return url.pathname;\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,QAAA;EAAA,MAAAC,IAAA,GAAAC,uBAAA,CAAAC,OAAA;EAAAH,OAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAwC,SAAAG,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAH,wBAAAG,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAK,OAAA,EAAAL,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,OAAAQ,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAd,CAAA,oBAAAc,CAAA,IAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAjB,CAAA,EAAAc,CAAA,SAAAI,CAAA,GAAAR,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA,UAAAI,CAAA,KAAAA,CAAA,CAAAX,GAAA,IAAAW,CAAA,CAAAC,GAAA,IAAAR,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAI,CAAA,IAAAV,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,YAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAgB,GAAA,CAAAnB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AAExC;AACA,SAASY,uBAAuBA,CAACC,GAAW,EAAU;EACpD;EACE;EACA;EACAA,GAAG,CAACC,KAAK,CAAC,cAAc,CAAC,EACzB;IACA,MAAM;MAAEC,MAAM;MAAEC;IAAK,CAAC,GAAG,IAAIC,GAAG,CAACJ,GAAG,CAAC;IACrC,OAAOG,IAAI,CAACE,OAAO,CAACH,MAAM,EAAE,EAAE,CAAC;EACjC;EAEA,MAAMI,QAAQ,GAAG,OAAOC,IAAI,KAAK,WAAW,IAAIC,UAAU,CAACD,IAAI,EAAEE,OAAO,EAAEC,MAAM;;EAEhF;EACA,IACEJ,QAAQ;EACR;EACA;EACAN,GAAG,CAACC,KAAK,CAAC,eAAe,CAAC,EAC1B;IACA,MAAMU,QAAQ,GAAGX,GAAG,CAACC,KAAK,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;IAC1D,IAAIU,QAAQ,EAAE;MACZ,OAAOC,YAAY,CAAC,MAAM,GAAGD,QAAQ,CAAC;IACxC;IAEA,MAAME,GAAG,GAAGvC,OAAO,CAAD,CAAC,CAACwC,KAAK,CAACd,GAAG,CAAC;IAE9B,MAAMe,EAAE,GAAG,CAACF,GAAG,CAACG,WAAW,GACvB,EAAE,GACF1B,MAAM,CAAC2B,OAAO,CAACJ,GAAG,CAACG,WAAW,CAAC,CAC5BE,GAAG,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAM,GAAED,CAAE,IAAGC,CAAE,EAAC,CAAC,CAC5BC,IAAI,CAAC,GAAG,CAAC;IAChB,OACEC,cAAc,CAAC;MAAEC,QAAQ,EAAEV,GAAG,CAACU,QAAQ;MAAEZ,QAAQ,EAAEE,GAAG,CAACW,IAAI,IAAI;IAAG,CAAC,CAAC,IAAIT,EAAE,GAAG,GAAG,GAAGA,EAAE,GAAG,EAAE,CAAC;EAE/F;;EAEA;;EAEA,OAAOH,YAAY,CAACZ,GAAG,CAAC;AAC1B;;AAEA;AACA,SAASyB,uBAAuBA,CAACzB,GAAQ,EAAW;EAClD,OAAOA,GAAG,CAACuB,QAAQ,KAAK,yBAAyB;AACnD;AAEA,SAASX,YAAYA,CAACZ,GAAW,EAAU;EACzC,IAAIa,GAAQ;EACZ,IAAI;IACF;IACA;IACAA,GAAG,GAAG,IAAIT,GAAG,CAACJ,GAAG,CAAC;EACpB,CAAC,CAAC,MAAM;IACN,OAAOA,GAAG;EACZ;EAEA,IAAIyB,uBAAuB,CAACZ,GAAG,CAAC,EAAE;IAChC,IAAI,CAACA,GAAG,CAACa,YAAY,CAACxC,GAAG,CAAC,KAAK,CAAC,EAAE;MAChC,OAAO,EAAE;IACX;IACA,MAAMyC,WAAW,GAAGd,GAAG,CAACa,YAAY,CAACxC,GAAG,CAAC,KAAK,CAAE;IAChD,OAAOa,uBAAuB,CAAC6B,SAAS,CAACD,WAAW,CAAC,CAAC;EACxD;EAEA,IAAIE,OAAO,GAAG,EAAE;EAEhB,IAAIhB,GAAG,CAACiB,IAAI,EAAE;IACZD,OAAO,IAAIhB,GAAG,CAACiB,IAAI;EACrB;EAEA,IAAIjB,GAAG,CAACF,QAAQ,EAAE;IAChBkB,OAAO,IAAIhB,GAAG,CAACF,QAAQ;EACzB;EAEA,MAAMI,EAAE,GAAG,CAACF,GAAG,CAACkB,MAAM,GAClB,EAAE;EACF;EACA,CAAC,GAAGlB,GAAG,CAACa,YAAY,CAACT,OAAO,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAM,GAAED,CAAE,IAAGa,kBAAkB,CAACZ,CAAC,CAAE,EAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAE9F,IAAIN,EAAE,EAAE;IACNc,OAAO,IAAI,GAAG,GAAGd,EAAE;EACrB;EAEA,OAAOc,OAAO;AAChB;AAEO,SAASI,sBAAsBA,CAACjC,GAAW,GAAG,EAAE,EAAE;EACvD;EACA,OAAOD,uBAAuB,CAACC,GAAG,CAAC,CAACK,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AACxD;AAEO,SAASiB,cAAcA,CAACtB,GAAmD,EAAE;EAClF,IAAIA,GAAG,CAACuB,QAAQ,KAAK,UAAU,IAAIvB,GAAG,CAACuB,QAAQ,KAAK,YAAY,EAAE;IAChE;IACA,OAAOvB,GAAG,CAACW,QAAQ,CAACuB,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAACd,IAAI,CAAC,GAAG,CAAC;EACnD;EACA,OAAOrB,GAAG,CAACW,QAAQ;AACrB"}