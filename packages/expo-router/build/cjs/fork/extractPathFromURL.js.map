{"version":3,"file":"extractPathFromURL.js","names":["parsePathAndParamsFromExpoGoLink","url","href","parsePathFromExpoGoLink","results","match","pathname","queryString","extractExactPathFromURL","origin","hostname","URL","replace","isExpoGo","expo","globalThis","modules","ExpoGo","fromDeepLink","queryParams","isExpoDevelopmentClient","res","searchParams","get","incomingUrl","decodeURI","host","qs","search","entries","map","k","v","decodeURIComponent","join","extractExpoPathFromURL"],"sources":["../../../src/fork/extractPathFromURL.ts"],"sourcesContent":["export function parsePathAndParamsFromExpoGoLink(url: string): {\n  pathname: string;\n  queryString: string;\n} {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n\n  const href = parsePathFromExpoGoLink(url);\n  const results = href.match(/(.*?)(\\?.*)/);\n  return {\n    pathname: results?.[1] ?? '',\n    queryString: results?.[2] ?? '',\n  };\n}\n\nexport function parsePathFromExpoGoLink(url: string): string {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1] ?? '';\n}\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href, hostname } = new URL(url);\n\n    if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n      // These are QR code generate deep-link that always like to the '/' path\n      // TODO: In the future, QR code may link to a specific path and this logic will need to be udpated\n      return '';\n    }\n\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = parsePathFromExpoGoLink(url);\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    // Match the `?.*` segment of the URL.\n    const queryParams = url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];\n    if (queryParams) {\n      return fromDeepLink('a://?' + queryParams);\n    }\n\n    return '';\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    return url;\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(url: string = '') {\n  return (\n    extractExactPathFromURL(url)\n      // TODO: We should get rid of this, dropping specificities is not good\n      .replace(/^\\//, '')\n  );\n}\n"],"mappings":"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"}