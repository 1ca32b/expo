{"version":3,"file":"routing.js","names":["_native","data","require","Linking","_interopRequireWildcard","_nonSecure","_href","_path","_url","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","assertIsReady","store","navigationRef","isReady","Error","navigate","url","linkTo","resolveHref","push","dismiss","count","dispatch","StackActions","pop","replace","dismissAll","popToTop","goBack","current","canGoBack","canDismiss","state","rootState","type","routes","length","index","undefined","setParams","params","href","event","shouldLinkExternally","openURL","linking","getRootState","startsWith","base","routeInfo","segments","map","segment","slice","Array","isArray","join","split","filter","Boolean","isIndex","resolve","getStateFromPath","config","console","error","getNavigateAction","rewriteNavigationStateToParams","lastRoute","screen","name","JSON","parse","stringify","parentState","key","nanoid","target","payload"],"sources":["../../../src/global-state/routing.ts"],"sourcesContent":["import { StackActions, type NavigationState } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\nimport { nanoid } from 'nanoid/non-secure';\n\nimport { type RouterStore } from './router-store';\nimport { ResultState } from '../fork/getStateFromPath';\nimport { Href, resolveHref } from '../link/href';\nimport { resolve } from '../link/path';\nimport { shouldLinkExternally } from '../utils/url';\n\nfunction assertIsReady(store: RouterStore) {\n  if (!store.navigationRef.isReady()) {\n    throw new Error(\n      'Attempted to navigate before mounting the Root Layout component. Ensure the Root Layout component is rendering a Slot, or other navigator on the first render.'\n    );\n  }\n}\n\nexport function navigate(this: RouterStore, url: Href) {\n  return this.linkTo(resolveHref(url), 'NAVIGATE');\n}\n\nexport function push(this: RouterStore, url: Href) {\n  return this.linkTo(resolveHref(url), 'PUSH');\n}\n\nexport function dismiss(this: RouterStore, count?: number) {\n  this.navigationRef?.dispatch(StackActions.pop(count));\n}\n\nexport function replace(this: RouterStore, url: Href) {\n  return this.linkTo(resolveHref(url), 'REPLACE');\n}\n\nexport function dismissAll(this: RouterStore) {\n  this.navigationRef?.dispatch(StackActions.popToTop());\n}\n\nexport function goBack(this: RouterStore) {\n  assertIsReady(this);\n  this.navigationRef?.current?.goBack();\n}\n\nexport function canGoBack(this: RouterStore): boolean {\n  // Return a default value here if the navigation hasn't mounted yet.\n  // This can happen if the user calls `canGoBack` from the Root Layout route\n  // before mounting a navigator. This behavior exists due to React Navigation being dynamically\n  // constructed at runtime. We can get rid of this in the future if we use\n  // the static configuration internally.\n  if (!this.navigationRef.isReady()) {\n    return false;\n  }\n  return this.navigationRef?.current?.canGoBack() ?? false;\n}\n\nexport function canDismiss(this: RouterStore): boolean {\n  let state = this.rootState;\n\n  // Keep traversing down the state tree until we find a stack navigator that we can pop\n  while (state) {\n    if (state.type === 'stack' && state.routes.length > 1) {\n      return true;\n    }\n    if (state.index === undefined) return false;\n\n    state = state.routes?.[state.index]?.state as any;\n  }\n\n  return false;\n}\n\nexport function setParams(this: RouterStore, params: Record<string, string | number> = {}) {\n  assertIsReady(this);\n  return (this.navigationRef?.current?.setParams as any)(params);\n}\n\nexport function linkTo(this: RouterStore, href: string, event?: string) {\n  if (shouldLinkExternally(href)) {\n    Linking.openURL(href);\n    return;\n  }\n\n  assertIsReady(this);\n  const navigationRef = this.navigationRef.current;\n\n  if (navigationRef == null) {\n    throw new Error(\n      \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n    );\n  }\n\n  if (!this.linking) {\n    throw new Error('Attempted to link to route when no routes are present');\n  }\n\n  if (href === '..' || href === '../') {\n    navigationRef.goBack();\n    return;\n  }\n\n  const rootState = navigationRef.getRootState();\n\n  if (href.startsWith('.')) {\n    // Resolve base path by merging the current segments with the params\n    let base =\n      this.routeInfo?.segments\n        ?.map((segment) => {\n          if (!segment.startsWith('[')) return segment;\n\n          if (segment.startsWith('[...')) {\n            segment = segment.slice(4, -1);\n            const params = this.routeInfo?.params?.[segment];\n            if (Array.isArray(params)) {\n              return params.join('/');\n            } else {\n              return params?.split(',')?.join('/') ?? '';\n            }\n          } else {\n            segment = segment.slice(1, -1);\n            return this.routeInfo?.params?.[segment];\n          }\n        })\n        .filter(Boolean)\n        .join('/') ?? '/';\n\n    if (!this.routeInfo?.isIndex) {\n      base += '/..';\n    }\n\n    href = resolve(base, href);\n  }\n\n  const state = this.linking.getStateFromPath!(href, this.linking.config);\n\n  if (!state || state.routes.length === 0) {\n    console.error('Could not generate a valid navigation state for the given path: ' + href);\n    return;\n  }\n\n  return navigationRef.dispatch(getNavigateAction(state, rootState, event));\n}\n\ntype NavigationParams = Partial<{\n  screen: string;\n  params: NavigationParams;\n  key?: string;\n}>;\n\nfunction rewriteNavigationStateToParams(\n  state: { routes: ResultState['routes'] } | NavigationState | undefined,\n  params: NavigationParams = {}\n) {\n  if (!state) return params;\n  // We Should always have at least one route in the state\n  const lastRoute = state.routes[state.routes.length - 1]!;\n  params.screen = lastRoute.name;\n  // Weirdly, this always needs to be an object. If it's undefined, it won't work.\n  params.params = lastRoute.params ? JSON.parse(JSON.stringify(lastRoute.params)) : {};\n\n  if (lastRoute.state) {\n    rewriteNavigationStateToParams(lastRoute.state, params.params);\n  }\n\n  return JSON.parse(JSON.stringify(params));\n}\n\nfunction getNavigateAction(state: ResultState, parentState: NavigationState, type = 'NAVIGATE') {\n  const { screen, params } = rewriteNavigationStateToParams(state);\n\n  let key: string | undefined;\n\n  if (type === 'PUSH') {\n    /*\n     * The StackAction.PUSH does not work correctly with Expo Router.\n     *\n     * Expo Router provides a getId() function for every route, altering how React Navigation handles stack routing.\n     * Ordinarily, PUSH always adds a new screen to the stack. However, with getId() present, it navigates to the screen with the matching ID instead (by moving the screen to the top of the stack)\n     * When you try and push to a screen with the same ID, no navigation will occur\n     * Refer to: https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/routers/src/StackRouter.tsx#L279-L290\n     *\n     * Expo Router needs to retain the default behavior of PUSH, consistently adding new screens to the stack, even if their IDs are identical.\n     *\n     * To resolve this issue, we switch to using a NAVIGATE action with a new key. In the navigate action, screens are matched by either key or getId() function.\n     * By generating a unique new key, we ensure that the screen is always pushed onto the stack.\n     *\n     */\n    type = 'NAVIGATE';\n\n    if (parentState.type === 'stack') {\n      key = `${screen}-${nanoid()}`; // @see https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/routers/src/StackRouter.tsx#L406-L407\n    }\n  } else if (type === 'REPLACE' && parentState.type === 'tab') {\n    type = 'JUMP_TO';\n  }\n\n  return {\n    type,\n    target: parentState.key,\n    payload: {\n      key,\n      name: screen,\n      params,\n    },\n  };\n}\n"],"mappings":"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"}