{"version":3,"file":"routing.js","names":["_native","data","require","Linking","_interopRequireWildcard","_nonSecure","_href","_path","_matchers","_url","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","assertIsReady","store","navigationRef","isReady","Error","navigate","url","linkTo","resolveHref","push","dismiss","count","dispatch","StackActions","pop","replace","dismissAll","popToTop","goBack","current","canGoBack","canDismiss","state","rootState","type","routes","length","index","undefined","setParams","params","href","event","shouldLinkExternally","openURL","linking","getRootState","startsWith","base","routeInfo","segments","map","segment","slice","Array","isArray","join","split","filter","Boolean","isIndex","resolve","getStateFromPath","config","console","error","getNavigateAction","actionState","navigationState","actionStateRoute","stateRoute","childState","nextNavigationState","dynamicName","matchDynamicName","name","didActionAndCurrentStateDiverge","rootPayload","payload","assign","screen","key","nanoid","target"],"sources":["../../../src/global-state/routing.ts"],"sourcesContent":["import { StackActions, type NavigationState, PartialRoute } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\nimport { nanoid } from 'nanoid/non-secure';\n\nimport { type RouterStore } from './router-store';\nimport { ExpoRouter } from '../../types/expo-router';\nimport { ResultState } from '../fork/getStateFromPath';\nimport { resolveHref } from '../link/href';\nimport { resolve } from '../link/path';\nimport { matchDynamicName } from '../matchers';\nimport { shouldLinkExternally } from '../utils/url';\n\nfunction assertIsReady(store: RouterStore) {\n  if (!store.navigationRef.isReady()) {\n    throw new Error(\n      'Attempted to navigate before mounting the Root Layout component. Ensure the Root Layout component is rendering a Slot, or other navigator on the first render.'\n    );\n  }\n}\n\nexport function navigate(this: RouterStore, url: ExpoRouter.Href) {\n  return this.linkTo(resolveHref(url), 'NAVIGATE');\n}\n\nexport function push(this: RouterStore, url: ExpoRouter.Href) {\n  return this.linkTo(resolveHref(url), 'PUSH');\n}\n\nexport function dismiss(this: RouterStore, count?: number) {\n  this.navigationRef?.dispatch(StackActions.pop(count));\n}\n\nexport function replace(this: RouterStore, url: ExpoRouter.Href) {\n  return this.linkTo(resolveHref(url), 'REPLACE');\n}\n\nexport function dismissAll(this: RouterStore) {\n  this.navigationRef?.dispatch(StackActions.popToTop());\n}\n\nexport function goBack(this: RouterStore) {\n  assertIsReady(this);\n  this.navigationRef?.current?.goBack();\n}\n\nexport function canGoBack(this: RouterStore): boolean {\n  // Return a default value here if the navigation hasn't mounted yet.\n  // This can happen if the user calls `canGoBack` from the Root Layout route\n  // before mounting a navigator. This behavior exists due to React Navigation being dynamically\n  // constructed at runtime. We can get rid of this in the future if we use\n  // the static configuration internally.\n  if (!this.navigationRef.isReady()) {\n    return false;\n  }\n  return this.navigationRef?.current?.canGoBack() ?? false;\n}\n\nexport function canDismiss(this: RouterStore): boolean {\n  let state = this.rootState;\n\n  // Keep traversing down the state tree until we find a stack navigator that we can pop\n  while (state) {\n    if (state.type === 'stack' && state.routes.length > 1) {\n      return true;\n    }\n    if (state.index === undefined) return false;\n\n    state = state.routes?.[state.index]?.state as any;\n  }\n\n  return false;\n}\n\nexport function setParams(this: RouterStore, params: Record<string, string | number> = {}) {\n  assertIsReady(this);\n  return (this.navigationRef?.current?.setParams as any)(params);\n}\n\nexport function linkTo(this: RouterStore, href: string, event?: string) {\n  if (shouldLinkExternally(href)) {\n    Linking.openURL(href);\n    return;\n  }\n\n  assertIsReady(this);\n  const navigationRef = this.navigationRef.current;\n\n  if (navigationRef == null) {\n    throw new Error(\n      \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n    );\n  }\n\n  if (!this.linking) {\n    throw new Error('Attempted to link to route when no routes are present');\n  }\n\n  if (href === '..' || href === '../') {\n    navigationRef.goBack();\n    return;\n  }\n\n  const rootState = navigationRef.getRootState();\n\n  if (href.startsWith('.')) {\n    // Resolve base path by merging the current segments with the params\n    let base =\n      this.routeInfo?.segments\n        ?.map((segment) => {\n          if (!segment.startsWith('[')) return segment;\n\n          if (segment.startsWith('[...')) {\n            segment = segment.slice(4, -1);\n            const params = this.routeInfo?.params?.[segment];\n            if (Array.isArray(params)) {\n              return params.join('/');\n            } else {\n              return params?.split(',')?.join('/') ?? '';\n            }\n          } else {\n            segment = segment.slice(1, -1);\n            return this.routeInfo?.params?.[segment];\n          }\n        })\n        .filter(Boolean)\n        .join('/') ?? '/';\n\n    if (!this.routeInfo?.isIndex) {\n      base += '/..';\n    }\n\n    href = resolve(base, href);\n  }\n\n  const state = this.linking.getStateFromPath!(href, this.linking.config);\n\n  if (!state || state.routes.length === 0) {\n    console.error('Could not generate a valid navigation state for the given path: ' + href);\n    return;\n  }\n\n  return navigationRef.dispatch(getNavigateAction(state, rootState, event));\n}\n\nfunction getNavigateAction(\n  actionState: ResultState,\n  navigationState: NavigationState,\n  type = 'NAVIGATE'\n) {\n  /**\n   * We need to find the deepest navigator where the action and current state diverge, If they do not diverge, the\n   * lowest navigator is the target.\n   *\n   * By default React Navigation will target the current navigator, but this doesn't work for all actions\n   * For example:\n   *  - /deeply/nested/route -> /top-level-route the target needs to be the top-level navigator\n   *  - /stack/nestedStack/page -> /stack1/nestedStack/other-page needs to target the nestedStack navigator\n   *\n   * This matching needs to done by comparing the route names and the dynamic path, for example\n   * - /1/page -> /2/anotherPage needs to target the /[id] navigator\n   *\n   * Other parameters such as search params and hash are not evaluated.\n   */\n  let actionStateRoute: PartialRoute<any> | undefined;\n\n  // Traverse the state tree comparing the current state and the action state until we find where they diverge\n  while (actionState && navigationState) {\n    const stateRoute = navigationState.routes[navigationState.index];\n\n    actionStateRoute = actionState.routes[actionState.routes.length - 1];\n\n    const childState = actionStateRoute.state;\n    const nextNavigationState = stateRoute.state;\n\n    const dynamicName = matchDynamicName(actionStateRoute.name);\n\n    const didActionAndCurrentStateDiverge =\n      actionStateRoute.name !== stateRoute.name ||\n      !childState ||\n      !nextNavigationState ||\n      (dynamicName && actionStateRoute.params?.[dynamicName] !== stateRoute.params?.[dynamicName]);\n\n    if (didActionAndCurrentStateDiverge) {\n      break;\n    }\n\n    actionState = childState;\n    navigationState = nextNavigationState as NavigationState;\n  }\n\n  /*\n   * We found the target navigator, but the payload is in the incorrect format\n   * We need to convert the action state to a payload that can be dispatched\n   */\n  const rootPayload: Record<string, any> = { params: {} };\n  let payload = rootPayload;\n  let params = payload.params;\n\n  // The root level of payload is a bit weird, its params are in the child object\n  while (actionStateRoute) {\n    Object.assign(params, { ...payload.params, ...actionStateRoute.params });\n    // Assign the screen name to the payload\n    payload.screen = actionStateRoute.name;\n    // Merge the params, ensuring that we create a new object\n    payload.params = { ...params };\n    // Params don't include the screen, thats a separate attribute\n    delete payload.params['screen'];\n\n    // Continue down the payload tree\n    // Initially these values are separate, but React Nav merges them after the first layer\n    payload = payload.params;\n    params = payload;\n\n    actionStateRoute = actionStateRoute.state?.routes[actionStateRoute.state?.routes.length - 1];\n  }\n\n  // Expo Router uses only three actions, but these don't directly translate to all navigator actions\n  if (type === 'PUSH') {\n    // Only stack navigators have a push action, and even then we want to use NAVIGATE (see below)\n    type = 'NAVIGATE';\n\n    /*\n     * The StackAction.PUSH does not work correctly with Expo Router.\n     *\n     * Expo Router provides a getId() function for every route, altering how React Navigation handles stack routing.\n     * Ordinarily, PUSH always adds a new screen to the stack. However, with getId() present, it navigates to the screen with the matching ID instead (by moving the screen to the top of the stack)\n     * When you try and push to a screen with the same ID, no navigation will occur\n     * Refer to: https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/routers/src/StackRouter.tsx#L279-L290\n     *\n     * Expo Router needs to retain the default behavior of PUSH, consistently adding new screens to the stack, even if their IDs are identical.\n     *\n     * To resolve this issue, we switch to using a NAVIGATE action with a new key. In the navigate action, screens are matched by either key or getId() function.\n     * By generating a unique new key, we ensure that the screen is always pushed onto the stack.\n     *\n     */\n    if (navigationState.type === 'stack') {\n      rootPayload.key = `${rootPayload.name}-${nanoid()}`; // @see https://github.com/react-navigation/react-navigation/blob/13d4aa270b301faf07960b4cd861ffc91e9b2c46/packages/routers/src/StackRouter.tsx#L406-L407\n    }\n  }\n\n  if (type === 'REPLACE' && navigationState.type === 'tab') {\n    type = 'JUMP_TO';\n  }\n\n  return {\n    type,\n    target: navigationState.key,\n    payload: {\n      key: rootPayload.key,\n      name: rootPayload.screen,\n      params: rootPayload.params,\n    },\n  };\n}\n"],"mappings":"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"}