{"version":3,"file":"getLinkingConfig.js","names":["_native","data","require","_getReactNavigationConfig","_linking","getNavigationConfig","routes","metaOnly","getReactNavigationConfig","getLinkingConfig","prefixes","config","getInitialURL","subscribe","addEventListener","getStateFromPath","getStateFromPathMemoized","getPathFromState","state","options","screens","getActionFromState","stateCache","exports","Map","path","cached","get","result","set"],"sources":["../../src/getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from '@react-navigation/native';\n\nimport { RouteNode } from './Route';\nimport { State } from './fork/getPathFromState';\nimport { getReactNavigationConfig, Screen } from './getReactNavigationConfig';\nimport {\n  addEventListener,\n  getInitialURL,\n  getPathFromState,\n  getStateFromPath,\n} from './link/linking';\n\nexport function getNavigationConfig(\n  routes: RouteNode,\n  metaOnly: boolean = true\n): {\n  initialRouteName?: string;\n  screens: Record<string, Screen>;\n} {\n  return getReactNavigationConfig(routes, metaOnly);\n}\n\nexport type ExpoLinkingOptions = LinkingOptions<object> & {\n  getPathFromState?: typeof getPathFromState;\n};\n\nexport function getLinkingConfig(routes: RouteNode, metaOnly: boolean = true): ExpoLinkingOptions {\n  return {\n    prefixes: [],\n    // @ts-expect-error\n    config: getNavigationConfig(routes, metaOnly),\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL,\n    subscribe: addEventListener,\n    getStateFromPath: getStateFromPathMemoized,\n    getPathFromState(state: State, options: Parameters<typeof getPathFromState>[1]) {\n      return (\n        getPathFromState(state, {\n          screens: [],\n          ...this.config,\n          ...options,\n        }) ?? '/'\n      );\n    },\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n\nexport const stateCache = new Map<string, any>();\n\n/** We can reduce work by memoizing the state by the pathname. This only works because the options (linking config) theoretically never change.  */\nfunction getStateFromPathMemoized(path: string, options: Parameters<typeof getStateFromPath>[1]) {\n  const cached = stateCache.get(path);\n  if (cached) {\n    return cached;\n  }\n  const result = getStateFromPath(path, options);\n  stateCache.set(path, result);\n  return result;\n}\n"],"mappings":";;;;;;;;AAAA,SAAAA,QAAA;EAAA,MAAAC,IAAA,GAAAC,OAAA;EAAAF,OAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAIA,SAAAE,0BAAA;EAAA,MAAAF,IAAA,GAAAC,OAAA;EAAAC,yBAAA,YAAAA,CAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,SAAA;EAAA,MAAAH,IAAA,GAAAC,OAAA;EAAAE,QAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAOO,SAASI,mBAAmBA,CACjCC,MAAiB,EACjBC,QAAiB,GAAG,IAAI,EAIxB;EACA,OAAO,IAAAC,oDAAwB,EAACF,MAAM,EAAEC,QAAQ,CAAC;AACnD;AAMO,SAASE,gBAAgBA,CAACH,MAAiB,EAAEC,QAAiB,GAAG,IAAI,EAAsB;EAChG,OAAO;IACLG,QAAQ,EAAE,EAAE;IACZ;IACAC,MAAM,EAAEN,mBAAmB,CAACC,MAAM,EAAEC,QAAQ,CAAC;IAC7C;IACA;IACA;IACA;IACA;IACAK,aAAa,EAAbA,wBAAa;IACbC,SAAS,EAAEC,2BAAgB;IAC3BC,gBAAgB,EAAEC,wBAAwB;IAC1CC,gBAAgBA,CAACC,KAAY,EAAEC,OAA+C,EAAE;MAC9E,OACE,IAAAF,2BAAgB,EAACC,KAAK,EAAE;QACtBE,OAAO,EAAE,EAAE;QACX,GAAG,IAAI,CAACT,MAAM;QACd,GAAGQ;MACL,CAAC,CAAC,IAAI,GAAG;IAEb,CAAC;IACD;IACA;IACAE,kBAAkB,EAAlBA;EACF,CAAC;AACH;AAEO,MAAMC,UAAU,GAAAC,OAAA,CAAAD,UAAA,GAAG,IAAIE,GAAG,CAAc,CAAC;;AAEhD;AACA,SAASR,wBAAwBA,CAACS,IAAY,EAAEN,OAA+C,EAAE;EAC/F,MAAMO,MAAM,GAAGJ,UAAU,CAACK,GAAG,CAACF,IAAI,CAAC;EACnC,IAAIC,MAAM,EAAE;IACV,OAAOA,MAAM;EACf;EACA,MAAME,MAAM,GAAG,IAAAb,2BAAgB,EAACU,IAAI,EAAEN,OAAO,CAAC;EAC9CG,UAAU,CAACO,GAAG,CAACJ,IAAI,EAAEG,MAAM,CAAC;EAC5B,OAAOA,MAAM;AACf"}