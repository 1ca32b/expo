{"version":3,"file":"getLinkingConfig.js","names":["_native","data","require","_expoModulesCore","_getReactNavigationConfig","_linking","getNavigationConfig","routes","metaOnly","getReactNavigationConfig","getLinkingConfig","context","serverUrl","hasCachedInitialUrl","initialUrl","nativeLinkingKey","keys","find","key","match","nativeLinking","undefined","prefixes","config","getInitialURL","Platform","OS","redirectSystemPath","path","initial","then","url","subscribe","addEventListener","getStateFromPath","getStateFromPathMemoized","getPathFromState","state","options","screens","getActionFromState","stateCache","exports","Map","cached","get","result","set"],"sources":["../../src/getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from '@react-navigation/native';\nimport { Platform } from 'expo-modules-core';\n\nimport { RouteNode } from './Route';\nimport { State } from './fork/getPathFromState';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport {\n  addEventListener,\n  getInitialURL,\n  getPathFromState,\n  getStateFromPath,\n} from './link/linking';\nimport { NativeIntent, RequireContext } from './types';\n\nexport function getNavigationConfig(routes: RouteNode, metaOnly: boolean = true) {\n  return getReactNavigationConfig(routes, metaOnly);\n}\n\nexport type ExpoLinkingOptions<T extends object = Record<string, unknown>> = LinkingOptions<T> & {\n  getPathFromState?: typeof getPathFromState;\n};\n\nexport type LinkingConfigOptions = {\n  metaOnly?: boolean;\n  serverUrl?: string;\n  getInitialURL?: typeof getInitialURL;\n};\n\nexport function getLinkingConfig(\n  routes: RouteNode,\n  context: RequireContext,\n  { metaOnly = true, serverUrl }: LinkingConfigOptions = {}\n): ExpoLinkingOptions {\n  // Returning `undefined` / `null from `getInitialURL` are valid values, so we need to track if it's been called.\n  let hasCachedInitialUrl = false;\n  let initialUrl: ReturnType<typeof getInitialURL> | undefined;\n\n  const nativeLinkingKey = context\n    .keys()\n    .find((key) => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking: NativeIntent | undefined = nativeLinkingKey\n    ? context(nativeLinkingKey)\n    : undefined;\n\n  return {\n    prefixes: [],\n    config: getNavigationConfig(routes, metaOnly),\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL() {\n      // Expo Router calls `getInitialURL` twice, which may confuse the user if they provide a custom `getInitialURL`.\n      // Therefor we memoize the result.\n      if (!hasCachedInitialUrl) {\n        if (Platform.OS === 'web') {\n          initialUrl = serverUrl ?? getInitialURL();\n        } else {\n          initialUrl = serverUrl ?? getInitialURL();\n\n          if (typeof initialUrl === 'string') {\n            if (typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({ path: initialUrl, initial: true });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then((url) => {\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({ path: url, initial: true });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: addEventListener(nativeLinking),\n    getStateFromPath: getStateFromPathMemoized,\n    getPathFromState(state: State, options: Parameters<typeof getPathFromState>[1]) {\n      return (\n        getPathFromState(state, {\n          screens: {},\n          ...this.config,\n          ...options,\n        }) ?? '/'\n      );\n    },\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n\nexport const stateCache = new Map<string, any>();\n\n/** We can reduce work by memoizing the state by the pathname. This only works because the options (linking config) theoretically never change.  */\nfunction getStateFromPathMemoized(path: string, options: Parameters<typeof getStateFromPath>[1]) {\n  const cached = stateCache.get(path);\n  if (cached) {\n    return cached;\n  }\n  const result = getStateFromPath(path, options);\n  stateCache.set(path, result);\n  return result;\n}\n"],"mappings":"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"}