{"version":3,"file":"href.js","names":["resolveHref","href","pathname","path","params","createQualifiedPathname","paramsString","createQueryParams","exports","key","value","Object","entries","dynamicKey","deepDynamicKey","includes","replace","encodeParam","param","Array","isArray","map","p","join","encodeURIComponent","toString","filter"],"sources":["../../../src/link/href.ts"],"sourcesContent":["import { ExpoRouter } from '../../types/expo-router';\n\n/** Resolve an href object into a fully qualified, relative href. */\nexport const resolveHref = (href: ExpoRouter.Href): string => {\n  if (typeof href === 'string') {\n    return resolveHref({ pathname: href });\n  }\n  const path = href.pathname ?? '';\n  if (!href?.params) {\n    return path;\n  }\n  const { pathname, params } = createQualifiedPathname(path, {\n    ...href.params,\n  });\n  const paramsString = createQueryParams(params);\n  return pathname + (paramsString ? `?${paramsString}` : '');\n};\n\nfunction createQualifiedPathname(\n  pathname: string,\n  params: Record<string, any>\n): { pathname: string; params: ExpoRouter.UnknownInputParams } {\n  for (const [key, value = ''] of Object.entries(params)) {\n    const dynamicKey = `[${key}]`;\n    const deepDynamicKey = `[...${key}]`;\n    if (pathname.includes(dynamicKey)) {\n      pathname = pathname.replace(dynamicKey, encodeParam(value));\n    } else if (pathname.includes(deepDynamicKey)) {\n      pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n    } else {\n      continue;\n    }\n\n    delete params[key];\n  }\n  return { pathname, params };\n}\n\nfunction encodeParam(param: any): string {\n  if (Array.isArray(param)) {\n    return param.map((p) => encodeParam(p)).join('/');\n  }\n\n  return encodeURIComponent(param.toString());\n}\n\nfunction createQueryParams(params: Record<string, any>): string {\n  return (\n    Object.entries(params)\n      // Allow nullish params\n      .filter(([, value]) => value != null)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value.toString())}`)\n      .join('&')\n  );\n}\n"],"mappings":";;;;;;AAEA;AACO,MAAMA,WAAW,GAAIC,IAAqB,IAAa;EAC5D,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOD,WAAW,CAAC;MAAEE,QAAQ,EAAED;IAAK,CAAC,CAAC;EACxC;EACA,MAAME,IAAI,GAAGF,IAAI,CAACC,QAAQ,IAAI,EAAE;EAChC,IAAI,CAACD,IAAI,EAAEG,MAAM,EAAE;IACjB,OAAOD,IAAI;EACb;EACA,MAAM;IAAED,QAAQ;IAAEE;EAAO,CAAC,GAAGC,uBAAuB,CAACF,IAAI,EAAE;IACzD,GAAGF,IAAI,CAACG;EACV,CAAC,CAAC;EACF,MAAME,YAAY,GAAGC,iBAAiB,CAACH,MAAM,CAAC;EAC9C,OAAOF,QAAQ,IAAII,YAAY,GAAI,IAAGA,YAAa,EAAC,GAAG,EAAE,CAAC;AAC5D,CAAC;AAACE,OAAA,CAAAR,WAAA,GAAAA,WAAA;AAEF,SAASK,uBAAuBA,CAC9BH,QAAgB,EAChBE,MAA2B,EACkC;EAC7D,KAAK,MAAM,CAACK,GAAG,EAAEC,KAAK,GAAG,EAAE,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACR,MAAM,CAAC,EAAE;IACtD,MAAMS,UAAU,GAAI,IAAGJ,GAAI,GAAE;IAC7B,MAAMK,cAAc,GAAI,OAAML,GAAI,GAAE;IACpC,IAAIP,QAAQ,CAACa,QAAQ,CAACF,UAAU,CAAC,EAAE;MACjCX,QAAQ,GAAGA,QAAQ,CAACc,OAAO,CAACH,UAAU,EAAEI,WAAW,CAACP,KAAK,CAAC,CAAC;IAC7D,CAAC,MAAM,IAAIR,QAAQ,CAACa,QAAQ,CAACD,cAAc,CAAC,EAAE;MAC5CZ,QAAQ,GAAGA,QAAQ,CAACc,OAAO,CAACF,cAAc,EAAEG,WAAW,CAACP,KAAK,CAAC,CAAC;IACjE,CAAC,MAAM;MACL;IACF;IAEA,OAAON,MAAM,CAACK,GAAG,CAAC;EACpB;EACA,OAAO;IAAEP,QAAQ;IAAEE;EAAO,CAAC;AAC7B;AAEA,SAASa,WAAWA,CAACC,KAAU,EAAU;EACvC,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACxB,OAAOA,KAAK,CAACG,GAAG,CAAEC,CAAC,IAAKL,WAAW,CAACK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACnD;EAEA,OAAOC,kBAAkB,CAACN,KAAK,CAACO,QAAQ,CAAC,CAAC,CAAC;AAC7C;AAEA,SAASlB,iBAAiBA,CAACH,MAA2B,EAAU;EAC9D,OACEO,MAAM,CAACC,OAAO,CAACR,MAAM;EACnB;EAAA,CACCsB,MAAM,CAAC,CAAC,GAAGhB,KAAK,CAAC,KAAKA,KAAK,IAAI,IAAI,CAAC,CACpCW,GAAG,CAAC,CAAC,CAACZ,GAAG,EAAEC,KAAK,CAAC,KAAM,GAAED,GAAI,IAAGe,kBAAkB,CAACd,KAAK,CAACe,QAAQ,CAAC,CAAC,CAAE,EAAC,CAAC,CACvEF,IAAI,CAAC,GAAG,CAAC;AAEhB"}