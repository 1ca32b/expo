{"version":3,"file":"useLinkToPathProps.js","names":["_getPathFromState","data","require","_routerStore","_matchers","_interopRequireDefault","obj","__esModule","default","eventShouldPreventDefault","e","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","undefined","includes","currentTarget","target","useLinkToPathProps","props","linkTo","useExpoRouter","onPress","shouldHandle","Platform","OS","preventDefault","href","event","appendBaseUrl","stripGroupSegmentsFromPath","role"],"sources":["../../../src/link/useLinkToPathProps.tsx"],"sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport { appendBaseUrl } from '../fork/getPathFromState';\nimport { useExpoRouter } from '../global-state/router-store';\nimport { stripGroupSegmentsFromPath } from '../matchers';\n\nfunction eventShouldPreventDefault(\n  e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n): boolean {\n  if (e?.defaultPrevented) {\n    return false;\n  }\n\n  if (\n    // Only check MouseEvents\n    'button' in e &&\n    // ignore clicks with modifier keys\n    !e.metaKey &&\n    !e.altKey &&\n    !e.ctrlKey &&\n    !e.shiftKey &&\n    (e.button == null || e.button === 0) && // Only accept left clicks\n    [undefined, null, '', 'self'].includes(e.currentTarget.target) // let browser handle \"target=_blank\" etc.\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default function useLinkToPathProps(props: { href: string; event?: string }) {\n  const { linkTo } = useExpoRouter();\n\n  const onPress = (e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (eventShouldPreventDefault(e)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      linkTo(props.href, props.event);\n    }\n  };\n\n  return {\n    // Ensure there's always a value for href. Manually append the baseUrl to the href prop that shows in the static HTML.\n    href: appendBaseUrl(stripGroupSegmentsFromPath(props.href) || '/'),\n    role: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;AAGA,SAAAA,kBAAA;EAAA,MAAAC,IAAA,GAAAC,OAAA;EAAAF,iBAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,aAAA;EAAA,MAAAF,IAAA,GAAAC,OAAA;EAAAC,YAAA,YAAAA,CAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,UAAA;EAAA,MAAAH,IAAA,GAAAC,OAAA;EAAAE,SAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAyD,SAAAI,uBAAAC,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAEzD,SAASG,yBAAyBA,CAChCC,CAA0E,EACjE;EACT,IAAIA,CAAC,EAAEC,gBAAgB,EAAE;IACvB,OAAO,KAAK;EACd;EAEA;EACE;EACA,QAAQ,IAAID,CAAC;EACb;EACA,CAACA,CAAC,CAACE,OAAO,IACV,CAACF,CAAC,CAACG,MAAM,IACT,CAACH,CAAC,CAACI,OAAO,IACV,CAACJ,CAAC,CAACK,QAAQ,KACVL,CAAC,CAACM,MAAM,IAAI,IAAI,IAAIN,CAAC,CAACM,MAAM,KAAK,CAAC,CAAC;EAAI;EACxC,CAACC,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACR,CAAC,CAACS,aAAa,CAACC,MAAM,CAAC,CAAC;EAAA,EAC/D;IACA,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd;AAEe,SAASC,kBAAkBA,CAACC,KAAuC,EAAE;EAClF,MAAM;IAAEC;EAAO,CAAC,GAAG,IAAAC,4BAAa,EAAC,CAAC;EAElC,MAAMC,OAAO,GAAIf,CAA2E,IAAK;IAC/F,IAAIgB,YAAY,GAAG,KAAK;IAExB,IAAIC,mBAAQ,CAACC,EAAE,KAAK,KAAK,IAAI,CAAClB,CAAC,EAAE;MAC/BgB,YAAY,GAAGhB,CAAC,GAAG,CAACA,CAAC,CAACC,gBAAgB,GAAG,IAAI;IAC/C,CAAC,MAAM,IAAIF,yBAAyB,CAACC,CAAC,CAAC,EAAE;MACvCA,CAAC,CAACmB,cAAc,CAAC,CAAC;MAClBH,YAAY,GAAG,IAAI;IACrB;IAEA,IAAIA,YAAY,EAAE;MAChBH,MAAM,CAACD,KAAK,CAACQ,IAAI,EAAER,KAAK,CAACS,KAAK,CAAC;IACjC;EACF,CAAC;EAED,OAAO;IACL;IACAD,IAAI,EAAE,IAAAE,iCAAa,EAAC,IAAAC,sCAA0B,EAACX,KAAK,CAACQ,IAAI,CAAC,IAAI,GAAG,CAAC;IAClEI,IAAI,EAAE,MAAe;IACrBT;EACF,CAAC;AACH"}