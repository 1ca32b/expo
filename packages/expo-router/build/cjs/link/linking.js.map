{"version":3,"file":"linking.js","names":["Linking","data","_interopRequireWildcard","require","_Platform","_interopRequireDefault","_extractPathFromURL","_getPathFromState","_getStateFromPath","obj","__esModule","default","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","isExpoGo","expo","globalThis","modules","ExpoGo","getInitialURLWithTimeout","Promise","race","getInitialURL","resolve","setTimeout","Platform","OS","window","location","href","then","url","parseExpoGoUrlFromListener","getRootURL","_rootURL","undefined","createURL","pathname","queryString","parsePathAndParamsFromExpoGoLink","addEventListener","nativeLinking","listener","callback","redirectSystemPath","path","initial","subscription","remove"],"sources":["../../../src/link/linking.ts"],"sourcesContent":["import { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'react-native';\n\nimport { parsePathAndParamsFromExpoGoLink } from '../fork/extractPathFromURL';\nimport getPathFromState from '../fork/getPathFromState';\nimport getStateFromPath from '../fork/getStateFromPath';\nimport { NativeIntent } from '../types';\n\nconst isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\nfunction getInitialURLWithTimeout(): Promise<string | null> {\n  return Promise.race([\n    Linking.getInitialURL(),\n    new Promise<null>((resolve) =>\n      // Timeout in 150ms if `getInitialState` doesn't resolve\n      // Workaround for https://github.com/facebook/react-native/issues/25675\n      setTimeout(() => resolve(null), 150)\n    ),\n  ]);\n}\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport function getInitialURL(): ReturnType<\n  NonNullable<LinkingOptions<Record<string, unknown>>['getInitialURL']>\n> {\n  if (Platform.OS === 'web') {\n    if (typeof window === 'undefined') {\n      return '';\n    } else if (window.location?.href) {\n      return window.location.href;\n    }\n  }\n\n  return getInitialURLWithTimeout().then(\n    (url) =>\n      parseExpoGoUrlFromListener(url) ??\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      getRootURL()\n  );\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n  }\n  return _rootURL;\n}\n\n// Expo Go is weird and requires the root path to be `/--/`\nfunction parseExpoGoUrlFromListener<T extends string | null>(url: T): T {\n  if (!url || !isExpoGo) {\n    return url;\n  }\n  const { pathname, queryString } = parsePathAndParamsFromExpoGoLink(url);\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  if (!pathname || pathname === '/') {\n    return (getRootURL() + queryString) as T;\n  }\n  return url;\n}\n\nexport function addEventListener(nativeLinking?: NativeIntent) {\n  return (listener: (url: string) => void) => {\n    let callback: (({ url }: { url: string }) => void) | undefined;\n\n    if (isExpoGo) {\n      // This extra work is only done in the Expo Go app.\n      callback = async ({ url }) => {\n        url = parseExpoGoUrlFromListener(url);\n\n        if (url && nativeLinking?.redirectSystemPath) {\n          url = await nativeLinking.redirectSystemPath({ path: url, initial: false });\n        }\n\n        listener(url);\n      };\n    } else {\n      callback = async ({ url }) => {\n        if (url && nativeLinking?.redirectSystemPath) {\n          url = await nativeLinking.redirectSystemPath({ path: url, initial: false });\n        }\n        listener(url);\n      };\n    }\n\n    const subscription = Linking.addEventListener('url', callback);\n\n    return () => {\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      subscription?.remove?.();\n    };\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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"}