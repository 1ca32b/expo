{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAUrD,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACjE,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAEtD,MAAM,kBAAkB,GAAG,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC;AAEzD,MAAM,UAAU,cAAc,CAC5B,SAA+C,IAAI,EACnD,cAA8C;IAE9C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAE3F,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAG,MAAM,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC,MAAmB,EAAE,EAAE;YACxF,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,OAAyB,EACzB,cAAgD;IAEhD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IAC3E,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAiB,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;IAEzE,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAG,QAAQ,CAAC,WAAW,CACvC,yBAAyB,EACzB,CAAC,KAAqB,EAAE,EAAE;YACxB,cAAc,EAAE,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC,CACF,CAAC;QACF,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;YAChC,QAAQ,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;QACjC,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC3B,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,QAAsC;IAC5E,OAAO,kBAAkB,CAAC,WAAW,CAAc,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AACzF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,MAAe;IACzD,OAAO,MAAM,WAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,IAAe;IACrD,OAAO,MAAM,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AACnD,CAAC;AAED,OAAO,EAAqC,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC;AACtF,cAAc,eAAe,CAAC","sourcesContent":["import { EventEmitter, Subscription } from 'expo-modules-core';\nimport { useMemo, useEffect, useState } from 'react';\n\nimport {\n  AudioMode,\n  AudioSource,\n  AudioStatus,\n  RecorderStatus,\n  RecordingOptions,\n  RecordingState,\n} from './Audio.types';\nimport AudioModule from './AudioModule';\nimport { AudioPlayer, AudioRecorder } from './AudioModule.types';\nimport { resolveSource } from './utils/resolveSource';\n\nconst audioModuleEmitter = new EventEmitter(AudioModule);\n\nexport function useAudioPlayer(\n  source: AudioSource | string | number | null = null,\n  statusListener?: (status: AudioStatus) => void\n): AudioPlayer {\n  const player = useMemo(() => new AudioModule.AudioPlayer(resolveSource(source)), [source]);\n\n  useEffect(() => {\n    const subscription = player.addListener('onPlaybackStatusUpdate', (status: AudioStatus) => {\n      statusListener?.(status);\n    });\n    return () => subscription.remove();\n  }, []);\n\n  return player;\n}\n\nexport function useAudioRecorder(\n  options: RecordingOptions,\n  statusListener?: (state: RecordingState) => void\n): [AudioRecorder, RecorderStatus] {\n  const recorder = useMemo(() => new AudioModule.AudioRecorder(options), []);\n  const [state, setState] = useState<RecorderStatus>(recorder.getStatus());\n\n  useEffect(() => {\n    const subscription = recorder.addListener(\n      'onRecordingStatusUpdate',\n      (state: RecordingState) => {\n        statusListener?.(state);\n      }\n    );\n    return () => subscription.remove();\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setState(recorder.getStatus());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return [recorder, state];\n}\n\nexport function addStatusUpdateListener(listener: (event: AudioStatus) => void): Subscription {\n  return audioModuleEmitter.addListener<AudioStatus>('onPlaybackStatusUpdate', listener);\n}\n\nexport async function setIsAudioActiveAsync(active: boolean): Promise<void> {\n  return await AudioModule.setIsAudioActiveAsync(active);\n}\n\nexport async function setAudioModeAsync(mode: AudioMode): Promise<void> {\n  return await AudioModule.setAudioModeAsync(mode);\n}\n\nexport { AudioStatus as ChangeEventPayload, AudioModule, AudioPlayer, AudioRecorder };\nexport * from './Audio.types';\n"]}